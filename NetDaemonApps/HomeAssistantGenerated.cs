//------------------------------------------------------------------------------
// <auto-generated>
// Generated using NetDaemon CodeGenerator nd-codegen v23.44.1.0
//   At: 2023-11-10T12:01:08.9008460-05:00
//
// *** Make sure the version of the codegen tool and your nugets Joysoftware.NetDaemon.* have the same version.***
// You can use following command to keep it up to date with the latest version:
//   dotnet tool update JoySoftware.NetDaemon.HassModel.CodeGen
//
// To update this file with latest entities run this command in your project directory:
//   dotnet tool run nd-codegen
//
// In the template projects we provided a convenience powershell script that will update
// the codegen and nugets to latest versions update_all_dependencies.ps1.
//
// For more information: https://netdaemon.xyz/docs/v3/hass_model/hass_model_codegen
// For more information about NetDaemon: https://netdaemon.xyz/
// </auto-generated>
//------------------------------------------------------------------------------
#nullable enable
using System;
using System.Collections.Generic;
using Microsoft.Extensions.DependencyInjection;
using System.Text.Json.Serialization;
using NetDaemon.HassModel;
using NetDaemon.HassModel.Entities;
using NetDaemon.HassModel.Entities.Core;

namespace HomeAssistantGenerated;
public static class GeneratedExtensions
{
    ///<summary>Registers all injectable generated types in the serviceCollection</summary>
    public static IServiceCollection AddHomeAssistantGenerated(this IServiceCollection serviceCollection)
    {
        serviceCollection.AddTransient<Entities>();
        serviceCollection.AddTransient<LightEntities>();
        serviceCollection.AddTransient<MediaPlayerEntities>();
        serviceCollection.AddTransient<AutomationEntities>();
        serviceCollection.AddTransient<BinarySensorEntities>();
        serviceCollection.AddTransient<ButtonEntities>();
        serviceCollection.AddTransient<CameraEntities>();
        serviceCollection.AddTransient<DeviceTrackerEntities>();
        serviceCollection.AddTransient<EventEntities>();
        serviceCollection.AddTransient<InputBooleanEntities>();
        serviceCollection.AddTransient<InputButtonEntities>();
        serviceCollection.AddTransient<InputSelectEntities>();
        serviceCollection.AddTransient<InputTextEntities>();
        serviceCollection.AddTransient<LockEntities>();
        serviceCollection.AddTransient<NumberEntities>();
        serviceCollection.AddTransient<PersonEntities>();
        serviceCollection.AddTransient<RemoteEntities>();
        serviceCollection.AddTransient<ScriptEntities>();
        serviceCollection.AddTransient<SelectEntities>();
        serviceCollection.AddTransient<SensorEntities>();
        serviceCollection.AddTransient<SttEntities>();
        serviceCollection.AddTransient<SunEntities>();
        serviceCollection.AddTransient<SwitchEntities>();
        serviceCollection.AddTransient<TodoEntities>();
        serviceCollection.AddTransient<TtsEntities>();
        serviceCollection.AddTransient<UpdateEntities>();
        serviceCollection.AddTransient<WakeWordEntities>();
        serviceCollection.AddTransient<WaterHeaterEntities>();
        serviceCollection.AddTransient<WeatherEntities>();
        serviceCollection.AddTransient<ZoneEntities>();
        serviceCollection.AddTransient<Services>();
        serviceCollection.AddTransient<AlarmControlPanelServices>();
        serviceCollection.AddTransient<AlexaMediaServices>();
        serviceCollection.AddTransient<AutomationServices>();
        serviceCollection.AddTransient<ButtonServices>();
        serviceCollection.AddTransient<CameraServices>();
        serviceCollection.AddTransient<CastServices>();
        serviceCollection.AddTransient<ClimateServices>();
        serviceCollection.AddTransient<CloudServices>();
        serviceCollection.AddTransient<ConversationServices>();
        serviceCollection.AddTransient<CounterServices>();
        serviceCollection.AddTransient<CoverServices>();
        serviceCollection.AddTransient<DeviceTrackerServices>();
        serviceCollection.AddTransient<FanServices>();
        serviceCollection.AddTransient<FfmpegServices>();
        serviceCollection.AddTransient<FrigateServices>();
        serviceCollection.AddTransient<FrontendServices>();
        serviceCollection.AddTransient<GeHomeServices>();
        serviceCollection.AddTransient<GroupServices>();
        serviceCollection.AddTransient<HassioServices>();
        serviceCollection.AddTransient<HomeassistantServices>();
        serviceCollection.AddTransient<HumidifierServices>();
        serviceCollection.AddTransient<InputBooleanServices>();
        serviceCollection.AddTransient<InputButtonServices>();
        serviceCollection.AddTransient<InputDatetimeServices>();
        serviceCollection.AddTransient<InputNumberServices>();
        serviceCollection.AddTransient<InputSelectServices>();
        serviceCollection.AddTransient<InputTextServices>();
        serviceCollection.AddTransient<IntentScriptServices>();
        serviceCollection.AddTransient<LawnMowerServices>();
        serviceCollection.AddTransient<LightServices>();
        serviceCollection.AddTransient<LockServices>();
        serviceCollection.AddTransient<LogbookServices>();
        serviceCollection.AddTransient<LoggerServices>();
        serviceCollection.AddTransient<MatterServices>();
        serviceCollection.AddTransient<MediaPlayerServices>();
        serviceCollection.AddTransient<MqttServices>();
        serviceCollection.AddTransient<NetdaemonServices>();
        serviceCollection.AddTransient<NotifyServices>();
        serviceCollection.AddTransient<NumberServices>();
        serviceCollection.AddTransient<PersistentNotificationServices>();
        serviceCollection.AddTransient<PersonServices>();
        serviceCollection.AddTransient<RecorderServices>();
        serviceCollection.AddTransient<RemoteServices>();
        serviceCollection.AddTransient<RokuServices>();
        serviceCollection.AddTransient<SceneServices>();
        serviceCollection.AddTransient<ScheduleServices>();
        serviceCollection.AddTransient<ScriptServices>();
        serviceCollection.AddTransient<SelectServices>();
        serviceCollection.AddTransient<ShoppingListServices>();
        serviceCollection.AddTransient<SirenServices>();
        serviceCollection.AddTransient<SwitchServices>();
        serviceCollection.AddTransient<SystemLogServices>();
        serviceCollection.AddTransient<TemplateServices>();
        serviceCollection.AddTransient<TextServices>();
        serviceCollection.AddTransient<TimerServices>();
        serviceCollection.AddTransient<TodoServices>();
        serviceCollection.AddTransient<TtsServices>();
        serviceCollection.AddTransient<UpdateServices>();
        serviceCollection.AddTransient<VacuumServices>();
        serviceCollection.AddTransient<WatchmanServices>();
        serviceCollection.AddTransient<WaterHeaterServices>();
        serviceCollection.AddTransient<WeatherServices>();
        serviceCollection.AddTransient<YiHackServices>();
        serviceCollection.AddTransient<ZhaServices>();
        serviceCollection.AddTransient<ZoneServices>();
        serviceCollection.AddTransient<ZwaveJsServices>();
        return serviceCollection;
    }
}

public interface IEntities
{
    LightEntities Light { get; }

    MediaPlayerEntities MediaPlayer { get; }

    AutomationEntities Automation { get; }

    BinarySensorEntities BinarySensor { get; }

    ButtonEntities Button { get; }

    CameraEntities Camera { get; }

    DeviceTrackerEntities DeviceTracker { get; }

    EventEntities Event { get; }

    InputBooleanEntities InputBoolean { get; }

    InputButtonEntities InputButton { get; }

    InputSelectEntities InputSelect { get; }

    InputTextEntities InputText { get; }

    LockEntities Lock { get; }

    NumberEntities Number { get; }

    PersonEntities Person { get; }

    RemoteEntities Remote { get; }

    ScriptEntities Script { get; }

    SelectEntities Select { get; }

    SensorEntities Sensor { get; }

    SttEntities Stt { get; }

    SunEntities Sun { get; }

    SwitchEntities Switch { get; }

    TodoEntities Todo { get; }

    TtsEntities Tts { get; }

    UpdateEntities Update { get; }

    WakeWordEntities WakeWord { get; }

    WaterHeaterEntities WaterHeater { get; }

    WeatherEntities Weather { get; }

    ZoneEntities Zone { get; }
}

public partial class Entities : IEntities
{
    private readonly IHaContext _haContext;
    public Entities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public LightEntities Light => new(_haContext);
    public MediaPlayerEntities MediaPlayer => new(_haContext);
    public AutomationEntities Automation => new(_haContext);
    public BinarySensorEntities BinarySensor => new(_haContext);
    public ButtonEntities Button => new(_haContext);
    public CameraEntities Camera => new(_haContext);
    public DeviceTrackerEntities DeviceTracker => new(_haContext);
    public EventEntities Event => new(_haContext);
    public InputBooleanEntities InputBoolean => new(_haContext);
    public InputButtonEntities InputButton => new(_haContext);
    public InputSelectEntities InputSelect => new(_haContext);
    public InputTextEntities InputText => new(_haContext);
    public LockEntities Lock => new(_haContext);
    public NumberEntities Number => new(_haContext);
    public PersonEntities Person => new(_haContext);
    public RemoteEntities Remote => new(_haContext);
    public ScriptEntities Script => new(_haContext);
    public SelectEntities Select => new(_haContext);
    public SensorEntities Sensor => new(_haContext);
    public SttEntities Stt => new(_haContext);
    public SunEntities Sun => new(_haContext);
    public SwitchEntities Switch => new(_haContext);
    public TodoEntities Todo => new(_haContext);
    public TtsEntities Tts => new(_haContext);
    public UpdateEntities Update => new(_haContext);
    public WakeWordEntities WakeWord => new(_haContext);
    public WaterHeaterEntities WaterHeater => new(_haContext);
    public WeatherEntities Weather => new(_haContext);
    public ZoneEntities Zone => new(_haContext);
}

public partial class LightEntities
{
    private readonly IHaContext _haContext;
    public LightEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Basement 1</summary>
    public LightEntity Basement1 => new(_haContext, "light.basement_1");
    ///<summary>Basement 1 Basic</summary>
    public LightEntity Basement1Basic => new(_haContext, "light.basement_1_basic");
    ///<summary>Basement 2</summary>
    public LightEntity Basement2 => new(_haContext, "light.basement_2");
    ///<summary>Basement 2 Basic</summary>
    public LightEntity Basement2Basic => new(_haContext, "light.basement_2_basic");
    ///<summary>Basement Motion Basic</summary>
    public LightEntity BasementMotionBasic => new(_haContext, "light.basement_motion_basic");
    ///<summary>Basement Work</summary>
    public LightEntity BasementWork => new(_haContext, "light.basement_work");
    ///<summary>Basement Work Basic</summary>
    public LightEntity BasementWorkBasic => new(_haContext, "light.basement_work_basic");
    ///<summary>Couch Overhead </summary>
    public LightEntity CouchOverhead => new(_haContext, "light.couch_overhead");
    ///<summary>Craft Room</summary>
    public LightEntity CraftRoom => new(_haContext, "light.craft_room");
    ///<summary>Craft Room Basic</summary>
    public LightEntity CraftRoomBasic => new(_haContext, "light.craft_room_basic");
    ///<summary>Entry Light</summary>
    public LightEntity EntryLight => new(_haContext, "light.entry_light");
    ///<summary>Entry Light Basic</summary>
    public LightEntity EntryLightBasic => new(_haContext, "light.entry_light_basic");
    ///<summary>LCD Backlight</summary>
    public LightEntity First32LcdBacklight => new(_haContext, "light.first32_lcd_backlight");
    ///<summary>RGB LED</summary>
    public LightEntity First32RgbLed => new(_haContext, "light.first32_rgb_led");
    ///<summary>Front Porch</summary>
    public LightEntity FrontPorch => new(_haContext, "light.front_porch");
    ///<summary>Front Porch Basic</summary>
    public LightEntity FrontPorchBasic => new(_haContext, "light.front_porch_basic");
    ///<summary>Front Room</summary>
    public LightEntity FrontRoom => new(_haContext, "light.front_room");
    ///<summary>Garage Door 1 Tilt Basic</summary>
    public LightEntity GarageDoor1TiltBasic => new(_haContext, "light.garage_door_1_tilt_basic");
    ///<summary>Garage Door 2 Tilt Basic</summary>
    public LightEntity GarageDoor2TiltBasic => new(_haContext, "light.garage_door_2_tilt_basic");
    ///<summary>Kitchen Lights</summary>
    public LightEntity KitchenLights => new(_haContext, "light.kitchen_lights");
    ///<summary>Kitchen Lights Basic</summary>
    public LightEntity KitchenLightsBasic => new(_haContext, "light.kitchen_lights_basic");
    ///<summary>living lamp 1</summary>
    public LightEntity LivingLamp1 => new(_haContext, "light.living_lamp_1");
    ///<summary>living lamp 2</summary>
    public LightEntity LivingLamp2 => new(_haContext, "light.living_lamp_2");
    ///<summary>Lounge Lights</summary>
    public LightEntity LoungeLights => new(_haContext, "light.lounge_lights");
    ///<summary>Main Bedroom Light 1</summary>
    public LightEntity MainBedroomLight1 => new(_haContext, "light.main_bedroom_light_1");
    ///<summary>Main Bedroom Light 2</summary>
    public LightEntity MainBedroomLight2 => new(_haContext, "light.main_bedroom_light_2");
    ///<summary>Office LED Light</summary>
    public LightEntity OfficeLedLight => new(_haContext, "light.office_led_light");
    ///<summary>Office Lights</summary>
    public LightEntity OfficeLights => new(_haContext, "light.office_lights");
    ///<summary>RT149699 Interior Light</summary>
    public LightEntity Rt149699InteriorLight => new(_haContext, "light.rt149699_interior_light");
    ///<summary>TV Backlight </summary>
    public LightEntity TvBacklight => new(_haContext, "light.tv_backlight");
    ///<summary>Upstairs Hall</summary>
    public LightEntity UpstairsHall => new(_haContext, "light.upstairs_hall");
    ///<summary>Upstairs Hall Basic</summary>
    public LightEntity UpstairsHallBasic => new(_haContext, "light.upstairs_hall_basic");
    ///<summary>Couch1</summary>
    public LightEntity WizRgbwTunable79a59c => new(_haContext, "light.wiz_rgbw_tunable_79a59c");
    ///<summary>Couch2</summary>
    public LightEntity WizRgbwTunable79aab4 => new(_haContext, "light.wiz_rgbw_tunable_79aab4");
    ///<summary>Couch3</summary>
    public LightEntity WizRgbwTunable8d7d54 => new(_haContext, "light.wiz_rgbw_tunable_8d7d54");
}

public partial class MediaPlayerEntities
{
    private readonly IHaContext _haContext;
    public MediaPlayerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Asher</summary>
    public MediaPlayerEntity Asher => new(_haContext, "media_player.asher");
    ///<summary>Dad&apos;s Surface</summary>
    public MediaPlayerEntity DadSSurface => new(_haContext, "media_player.dad_s_surface");
    ///<summary>Everywhere</summary>
    public MediaPlayerEntity Everywhere => new(_haContext, "media_player.everywhere");
    ///<summary>ESP32 S3 Box Lite Media Player</summary>
    public MediaPlayerEntity First32MediaPlayer => new(_haContext, "media_player.first32_media_player");
    ///<summary>Kitchen</summary>
    public MediaPlayerEntity Kitchen => new(_haContext, "media_player.kitchen");
    ///<summary>Kitchen Tablet</summary>
    public MediaPlayerEntity KitchenTablet => new(_haContext, "media_player.kitchen_tablet");
    ///<summary>Leonard&apos;s 5th Fire</summary>
    public MediaPlayerEntity LeonardS5thFire => new(_haContext, "media_player.leonard_s_5th_fire");
    ///<summary>Living Room</summary>
    public MediaPlayerEntity LivingRoom => new(_haContext, "media_player.living_room");
    ///<summary>Living Room speaker</summary>
    public MediaPlayerEntity LivingRoomSpeaker => new(_haContext, "media_player.living_room_speaker");
    ///<summary>Logan</summary>
    public MediaPlayerEntity Logan => new(_haContext, "media_player.logan");
    ///<summary>Lyra</summary>
    public MediaPlayerEntity Lyra => new(_haContext, "media_player.lyra");
    ///<summary>Lyra FireTVStick</summary>
    public MediaPlayerEntity LyraFiretvstick => new(_haContext, "media_player.lyra_firetvstick");
    ///<summary>Main Bedroom</summary>
    public MediaPlayerEntity MainBedroom => new(_haContext, "media_player.main_bedroom");
    ///<summary>Office</summary>
    public MediaPlayerEntity Office => new(_haContext, "media_player.office");
    ///<summary>Roku Ultra</summary>
    public MediaPlayerEntity RokuUltra => new(_haContext, "media_player.roku_ultra");
    ///<summary>Samsung QN90AA 65 TV</summary>
    public MediaPlayerEntity SamsungQn90aa65Tv => new(_haContext, "media_player.samsung_qn90aa_65_tv");
    ///<summary>Samsung QN90AA 65 TV</summary>
    public MediaPlayerEntity SamsungQn90aa65Tv2 => new(_haContext, "media_player.samsung_qn90aa_65_tv_2");
    ///<summary>Spotify Leonard Sperry</summary>
    public MediaPlayerEntity SpotifyLeonardSperry => new(_haContext, "media_player.spotify_leonard_sperry");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice => new(_haContext, "media_player.this_device");
    ///<summary>This Device</summary>
    public MediaPlayerEntity ThisDevice2 => new(_haContext, "media_player.this_device_2");
    ///<summary>TV</summary>
    public MediaPlayerEntity Tv => new(_haContext, "media_player.tv");
    ///<summary>XBOXONE</summary>
    public MediaPlayerEntity Xboxone => new(_haContext, "media_player.xboxone");
    ///<summary>yi_hack_a_0f0641_media_player</summary>
    public MediaPlayerEntity YiHackA0f0641MediaPlayer => new(_haContext, "media_player.yi_hack_a_0f0641_media_player");
}

public partial class AutomationEntities
{
    private readonly IHaContext _haContext;
    public AutomationEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Auto enable Porch motion</summary>
    public AutomationEntity AutoEnablePorchMotion => new(_haContext, "automation.auto_enable_porch_motion");
    ///<summary>auto off Entry light</summary>
    public AutomationEntity AutoOffEntryLight => new(_haContext, "automation.auto_off_entry_light");
    ///<summary>Auto off kitchen lights</summary>
    public AutomationEntity AutoOffKitchenLights => new(_haContext, "automation.auto_off_kitchen_lights");
    ///<summary>Back Door Open</summary>
    public AutomationEntity BackDoorOpen => new(_haContext, "automation.back_door_open");
    ///<summary>Back Hall auto off </summary>
    public AutomationEntity BackHallAutoOff => new(_haContext, "automation.back_hall_auto_off");
    ///<summary>Backup Failure</summary>
    public AutomationEntity BackupFailure => new(_haContext, "automation.backup_failure");
    ///<summary>Basement - Dim over time</summary>
    public AutomationEntity BasementDimOverTime => new(_haContext, "automation.basement_dim_over_time");
    ///<summary>Basement Motion</summary>
    public AutomationEntity BasementMotion => new(_haContext, "automation.basement_motion");
    ///<summary>Basement Stair Motion</summary>
    public AutomationEntity BasementStairMotion => new(_haContext, "automation.basement_stair_motion");
    ///<summary>Bedtime</summary>
    public AutomationEntity Bedtime => new(_haContext, "automation.bedtime");
    ///<summary>Call Asher</summary>
    public AutomationEntity CallAsher => new(_haContext, "automation.call_asher");
    ///<summary>Car detected </summary>
    public AutomationEntity CarDetected => new(_haContext, "automation.car_detected");
    ///<summary>Close Garage</summary>
    public AutomationEntity CloseGarage => new(_haContext, "automation.close_garage");
    ///<summary>System: CPU high</summary>
    public AutomationEntity CpuHigh => new(_haContext, "automation.cpu_high");
    ///<summary>Dining room - auto off</summary>
    public AutomationEntity DiningRoomAutoOff => new(_haContext, "automation.dining_room_auto_off");
    ///<summary>Ensure Garage door 1 off</summary>
    public AutomationEntity EnsureGarageDoor1Off => new(_haContext, "automation.ensure_garage_door_1_off");
    ///<summary>Ensure Garage door 2 off</summary>
    public AutomationEntity EnsureGarageDoor2Off => new(_haContext, "automation.ensure_garage_door_2_off");
    ///<summary>First Cam - Gesture - Leonard - Land</summary>
    public AutomationEntity FirstCamGestureLeonardLand => new(_haContext, "automation.first_cam_gesture_leonard_land");
    ///<summary>Front Door Open</summary>
    public AutomationEntity FrontDoorOpen => new(_haContext, "automation.front_door_open");
    ///<summary>Front door stays open</summary>
    public AutomationEntity FrontDoorStaysOpen => new(_haContext, "automation.front_door_stays_open");
    ///<summary>Front Porch light auto off </summary>
    public AutomationEntity FrontPorchAutoOff => new(_haContext, "automation.front_porch_auto_off");
    ///<summary>Front Porch Motion</summary>
    public AutomationEntity FrontPorchMotion => new(_haContext, "automation.front_porch_motion");
    ///<summary>Garage 1 opening </summary>
    public AutomationEntity Garage1Opening => new(_haContext, "automation.garage_1_opening");
    ///<summary>Garage 2 opening</summary>
    public AutomationEntity GarageDoor2Opening => new(_haContext, "automation.garage_door_2_opening");
    ///<summary>HA Restarted</summary>
    public AutomationEntity HaRestarted => new(_haContext, "automation.ha_restarted");
    ///<summary>Inside Garage Door Open</summary>
    public AutomationEntity InsideGarageDoorOpen => new(_haContext, "automation.inside_garage_door_open");
    ///<summary>Kazul - 8am</summary>
    public AutomationEntity Kazul8am => new(_haContext, "automation.kazul_8am");
    ///<summary>Kazul - Ceramic Safety Check</summary>
    public AutomationEntity KazulCeramicSafetyCheck => new(_haContext, "automation.kazul_ceramic_safety_check");
    ///<summary>Kazul - Sunrise</summary>
    public AutomationEntity KazulSunrise => new(_haContext, "automation.kazul_sunrise");
    ///<summary>Kazul - Sunset</summary>
    public AutomationEntity KazulSunset => new(_haContext, "automation.kazul_sunset");
    ///<summary>Kazul - 8pm</summary>
    public AutomationEntity Kazule8pm => new(_haContext, "automation.kazule_8pm");
    ///<summary>Kitchen lights on</summary>
    public AutomationEntity KitchenLightsOn => new(_haContext, "automation.kitchen_lights_on");
    ///<summary>Kitchen walkway auto off</summary>
    public AutomationEntity KitchenWalkwayAutoOff => new(_haContext, "automation.kitchen_walkway_auto_off");
    ///<summary>kitchen walkway subtle light</summary>
    public AutomationEntity KitchenWalkwaySubtleLight => new(_haContext, "automation.kitchen_walkway_subtle_light");
    ///<summary>Late Morning - Re-enable living room </summary>
    public AutomationEntity LateMorningReEnableLivingRoom => new(_haContext, "automation.late_morning_re_enable_living_room");
    ///<summary>Shopping Done</summary>
    public AutomationEntity LeonardDoneShopping => new(_haContext, "automation.leonard_done_shopping");
    ///<summary>Living btn 8 - Porch Motion temp disable</summary>
    public AutomationEntity LivingBn5PorchMotionTempDisable => new(_haContext, "automation.living_bn_5_porch_motion_temp_disable");
    ///<summary>Living btn 1 - double - Dim TV Backlight</summary>
    public AutomationEntity LivingBtn1Dim => new(_haContext, "automation.living_btn_1_dim");
    ///<summary>Living btn 1 - Hold - Increase </summary>
    public AutomationEntity LivingBtn1Increase => new(_haContext, "automation.living_btn_1_increase");
    ///<summary>Living btn 2 - dim</summary>
    public AutomationEntity LivingBtn2Dim => new(_haContext, "automation.living_btn_2_dim");
    ///<summary>Living btn 2 - increase</summary>
    public AutomationEntity LivingBtn2Increase => new(_haContext, "automation.living_btn_2_increase");
    ///<summary>Living btn 3 - Dim Living Area</summary>
    public AutomationEntity LivingBtn3DimLivingAria => new(_haContext, "automation.living_btn_3_dim_living_aria");
    ///<summary>Living btn 4 dbl - pause Roku</summary>
    public AutomationEntity LivingBtn4DblPauseRoku => new(_haContext, "automation.living_btn_4_dbl_pause_roku");
    ///<summary>Living btn 4 - Find Roku Remote</summary>
    public AutomationEntity LivingBtn4FindRokuRemote => new(_haContext, "automation.living_btn_4_find_roku_remote");
    ///<summary>Living btn 5 - Peacock</summary>
    public AutomationEntity LivingBtn5Peacock => new(_haContext, "automation.living_btn_5_peacock");
    ///<summary>Living btn 8 - toggle front porch motion</summary>
    public AutomationEntity LivingBtn8ToggleFrontPorchMotion => new(_haContext, "automation.living_btn_8_toggle_front_porch_motion");
    ///<summary>Living btn 1 - Press - TV Backlight Toggle</summary>
    public AutomationEntity LivingBtn1TvBacklightToggle => new(_haContext, "automation.living_btn1_tv_backlight_toggle");
    ///<summary>Living btn 2 - Toggle overhead</summary>
    public AutomationEntity LivingBtn2ToggleOverhead => new(_haContext, "automation.living_btn2_toggle_overhead");
    ///<summary>Living Room - auto light level</summary>
    public AutomationEntity LivingRoomAutoLightLevel => new(_haContext, "automation.living_room_auto_light_level");
    ///<summary>Living Room Override - record state</summary>
    public AutomationEntity LivingRoomLightsAmbientLight => new(_haContext, "automation.living_room_lights_ambient_light");
    ///<summary>Living Room Override - physical</summary>
    public AutomationEntity LivingRoomOverride => new(_haContext, "automation.living_room_override");
    ///<summary>Lounge btn 1 - White</summary>
    public AutomationEntity LoungeBtn1ToggleLights => new(_haContext, "automation.lounge_btn_1_toggle_lights");
    ///<summary>Lounge btn 2 - Pink</summary>
    public AutomationEntity LoungeBtn2Pink => new(_haContext, "automation.lounge_btn_2_pink");
    ///<summary>Lyra Medicine</summary>
    public AutomationEntity LyraMedicine => new(_haContext, "automation.lyra_medicine");
    ///<summary>Main Bedroom No motion</summary>
    public AutomationEntity MainBedroomNoMotion => new(_haContext, "automation.main_bedroom_no_motion");
    ///<summary>Car Detected V2</summary>
    public AutomationEntity MyMotionlessTest => new(_haContext, "automation.my_motionless_test");
    ///<summary>Notify Porch motion disabled</summary>
    public AutomationEntity NotifyPorchMotionDisabled => new(_haContext, "automation.notify_porch_motion_disabled");
    ///<summary>Office Fan</summary>
    public AutomationEntity OfficeFan => new(_haContext, "automation.office_fan");
    ///<summary>Office Motion</summary>
    public AutomationEntity OfficeMotion => new(_haContext, "automation.office_motion");
    ///<summary>Office no motion</summary>
    public AutomationEntity OfficeNoMotion => new(_haContext, "automation.office_no_motion");
    ///<summary>Office Override</summary>
    public AutomationEntity OfficeOverride => new(_haContext, "automation.office_override");
    ///<summary>Periodically ensure state</summary>
    public AutomationEntity PeriodicallyEnsureState => new(_haContext, "automation.periodically_ensure_state");
    ///<summary>Person in front yard</summary>
    public AutomationEntity PersonInFrontYard => new(_haContext, "automation.person_in_front_yard");
    ///<summary>Rachel Phone Charge</summary>
    public AutomationEntity RachelPhoneCharge => new(_haContext, "automation.rachel_phone_charge");
    ///<summary>Watchman: Run Report</summary>
    public AutomationEntity RunWatchman => new(_haContext, "automation.run_watchman");
    ///<summary>Sunrise</summary>
    public AutomationEntity Sunrise => new(_haContext, "automation.sunrise");
    ///<summary>Sunset</summary>
    public AutomationEntity Sunset => new(_haContext, "automation.sunset");
    ///<summary>Test Alexa Command</summary>
    public AutomationEntity Test => new(_haContext, "automation.test");
    ///<summary>test buttons</summary>
    public AutomationEntity TestButtons => new(_haContext, "automation.test_buttons");
    ///<summary>test dashboard button</summary>
    public AutomationEntity TestDashboardButton => new(_haContext, "automation.test_dashboard_button");
    ///<summary>test dashboard button</summary>
    public AutomationEntity TestDashboardButton2 => new(_haContext, "automation.test_dashboard_button_2");
    ///<summary>test hello leonard</summary>
    public AutomationEntity TestHelloLeonard => new(_haContext, "automation.test_hello_leonard");
    ///<summary>test hello rachel</summary>
    public AutomationEntity TestHelloRachel => new(_haContext, "automation.test_hello_rachel");
    ///<summary>test script</summary>
    public AutomationEntity TestScript => new(_haContext, "automation.test_script");
    ///<summary>Upstairs Hall auto off </summary>
    public AutomationEntity UpstairsHallAutoOff => new(_haContext, "automation.upstairs_hall_auto_off");
    ///<summary>Watchman: missing entities/services</summary>
    public AutomationEntity WatchmanMissingEntitiesServices => new(_haContext, "automation.watchman_missing_entities_services");
}

public partial class BinarySensorEntities
{
    private readonly IHaContext _haContext;
    public BinarySensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Main Bedroom 4 in 1 Low battery level</summary>
    public BinarySensorEntity _4In1SensorLowBatteryLevel => new(_haContext, "binary_sensor.4_in_1_sensor_low_battery_level");
    ///<summary>Main Bedroom 4 in 1 Motion detection</summary>
    public BinarySensorEntity _4In1SensorMotionDetection => new(_haContext, "binary_sensor.4_in_1_sensor_motion_detection");
    ///<summary>Main Bedroom 4 in 1 Tampering, product cover removed</summary>
    public BinarySensorEntity _4In1SensorTamperingProductCoverRemoved => new(_haContext, "binary_sensor.4_in_1_sensor_tampering_product_cover_removed");
    ///<summary>Astroweather Deep Sky View</summary>
    public BinarySensorEntity AstroweatherDeepSkyView => new(_haContext, "binary_sensor.astroweather_deep_sky_view");
    ///<summary>Astroweather Moon always up during darkness</summary>
    public BinarySensorEntity AstroweatherMoonAlwaysUpDuringDarkness => new(_haContext, "binary_sensor.astroweather_moon_always_up_during_darkness");
    ///<summary>Astroweather Moon rises during darkness</summary>
    public BinarySensorEntity AstroweatherMoonRisesDuringDarkness => new(_haContext, "binary_sensor.astroweather_moon_rises_during_darkness");
    ///<summary>Astroweather Moon sets during darkness</summary>
    public BinarySensorEntity AstroweatherMoonSetsDuringDarkness => new(_haContext, "binary_sensor.astroweather_moon_sets_during_darkness");
    ///<summary>AV339078N Laundry Door</summary>
    public BinarySensorEntity Av339078nLaundryDoor => new(_haContext, "binary_sensor.av339078n_laundry_door");
    ///<summary>AV339078N Laundry End Of Cycle</summary>
    public BinarySensorEntity Av339078nLaundryEndOfCycle => new(_haContext, "binary_sensor.av339078n_laundry_end_of_cycle");
    ///<summary>AV339078N Laundry Remote Status</summary>
    public BinarySensorEntity Av339078nLaundryRemoteStatus => new(_haContext, "binary_sensor.av339078n_laundry_remote_status");
    ///<summary>AV339078N Laundry Washer Door Lock</summary>
    public BinarySensorEntity Av339078nLaundryWasherDoorLock => new(_haContext, "binary_sensor.av339078n_laundry_washer_door_lock");
    ///<summary>AV339078N Laundry Washer Powersteam</summary>
    public BinarySensorEntity Av339078nLaundryWasherPowersteam => new(_haContext, "binary_sensor.av339078n_laundry_washer_powersteam");
    ///<summary>AV339078N Laundry Washer Prewash</summary>
    public BinarySensorEntity Av339078nLaundryWasherPrewash => new(_haContext, "binary_sensor.av339078n_laundry_washer_prewash");
    ///<summary>AV339078N Laundry Washer Timesaver</summary>
    public BinarySensorEntity Av339078nLaundryWasherTimesaver => new(_haContext, "binary_sensor.av339078n_laundry_washer_timesaver");
    ///<summary>Back Door Contact Opening</summary>
    public BinarySensorEntity BackDoorContactOpening => new(_haContext, "binary_sensor.back_door_contact_opening");
    ///<summary>Backups Stale</summary>
    public BinarySensorEntity BackupsStale => new(_haContext, "binary_sensor.backups_stale");
    ///<summary>Basement Motion Low battery level</summary>
    public BinarySensorEntity BasementMotionLowBatteryLevel => new(_haContext, "binary_sensor.basement_motion_low_battery_level");
    ///<summary>Basement Motion Motion detection</summary>
    public BinarySensorEntity BasementMotionMotionDetection => new(_haContext, "binary_sensor.basement_motion_motion_detection");
    ///<summary>Basement Motion Tampering, product cover removed</summary>
    public BinarySensorEntity BasementMotionTamperingProductCoverRemoved => new(_haContext, "binary_sensor.basement_motion_tampering_product_cover_removed");
    ///<summary>Dining Zone all occupancy</summary>
    public BinarySensorEntity DiningZoneAllOccupancy => new(_haContext, "binary_sensor.dining_zone_all_occupancy");
    ///<summary>Dining Zone person occupancy</summary>
    public BinarySensorEntity DiningZonePersonOccupancy => new(_haContext, "binary_sensor.dining_zone_person_occupancy");
    ///<summary>DV102683G Laundry Door</summary>
    public BinarySensorEntity Dv102683gLaundryDoor => new(_haContext, "binary_sensor.dv102683g_laundry_door");
    ///<summary>DV102683G Laundry Dryer Level Sensor Disabled</summary>
    public BinarySensorEntity Dv102683gLaundryDryerLevelSensorDisabled => new(_haContext, "binary_sensor.dv102683g_laundry_dryer_level_sensor_disabled");
    ///<summary>DV102683G Laundry Dryer Washerlink Status</summary>
    public BinarySensorEntity Dv102683gLaundryDryerWasherlinkStatus => new(_haContext, "binary_sensor.dv102683g_laundry_dryer_washerlink_status");
    ///<summary>DV102683G Laundry End Of Cycle</summary>
    public BinarySensorEntity Dv102683gLaundryEndOfCycle => new(_haContext, "binary_sensor.dv102683g_laundry_end_of_cycle");
    ///<summary>DV102683G Laundry Remote Status</summary>
    public BinarySensorEntity Dv102683gLaundryRemoteStatus => new(_haContext, "binary_sensor.dv102683g_laundry_remote_status");
    ///<summary>ESP32 S3 Box Lite Left</summary>
    public BinarySensorEntity Esp32S3BoxLiteLeft => new(_haContext, "binary_sensor.esp32_s3_box_lite_left");
    ///<summary>ESP32 S3 Box Lite Middle</summary>
    public BinarySensorEntity Esp32S3BoxLiteMiddle => new(_haContext, "binary_sensor.esp32_s3_box_lite_middle");
    ///<summary>ESP32 S3 Box Lite Right</summary>
    public BinarySensorEntity Esp32S3BoxLiteRight => new(_haContext, "binary_sensor.esp32_s3_box_lite_right");
    ///<summary>First Cam all occupancy</summary>
    public BinarySensorEntity FirstCamAllOccupancy => new(_haContext, "binary_sensor.first_cam_all_occupancy");
    ///<summary>First Cam car occupancy</summary>
    public BinarySensorEntity FirstCamCarOccupancy => new(_haContext, "binary_sensor.first_cam_car_occupancy");
    ///<summary>First Cam horse occupancy</summary>
    public BinarySensorEntity FirstCamHorseOccupancy => new(_haContext, "binary_sensor.first_cam_horse_occupancy");
    ///<summary>First Cam Motion</summary>
    public BinarySensorEntity FirstCamMotion => new(_haContext, "binary_sensor.first_cam_motion");
    ///<summary>First Cam person occupancy</summary>
    public BinarySensorEntity FirstCamPersonOccupancy => new(_haContext, "binary_sensor.first_cam_person_occupancy");
    ///<summary>ESP32 S3 Box Lite Assist in progress</summary>
    public BinarySensorEntity First32AssistInProgress => new(_haContext, "binary_sensor.first32_assist_in_progress");
    ///<summary>Button 1</summary>
    public BinarySensorEntity First32Button1 => new(_haContext, "binary_sensor.first32_button_1");
    ///<summary>Button 2</summary>
    public BinarySensorEntity First32Button2 => new(_haContext, "binary_sensor.first32_button_2");
    ///<summary>Button 3</summary>
    public BinarySensorEntity First32Button3 => new(_haContext, "binary_sensor.first32_button_3");
    ///<summary>Muted</summary>
    public BinarySensorEntity First32Muted => new(_haContext, "binary_sensor.first32_muted");
    ///<summary>Settings</summary>
    public BinarySensorEntity First32Settings => new(_haContext, "binary_sensor.first32_settings");
    ///<summary>Front Door Contact Opening</summary>
    public BinarySensorEntity FrontDoorContactOpening => new(_haContext, "binary_sensor.front_door_contact_opening");
    ///<summary>Front Door Zone all occupancy</summary>
    public BinarySensorEntity FrontDoorZoneAllOccupancy => new(_haContext, "binary_sensor.front_door_zone_all_occupancy");
    ///<summary>Front Door Zone person occupancy</summary>
    public BinarySensorEntity FrontDoorZonePersonOccupancy => new(_haContext, "binary_sensor.front_door_zone_person_occupancy");
    ///<summary>Garage 1 Contact Opening</summary>
    public BinarySensorEntity Garage1ContactOpening => new(_haContext, "binary_sensor.garage_1_contact_opening");
    ///<summary>Garage 2 Contact Opening</summary>
    public BinarySensorEntity Garage2ContactOpening => new(_haContext, "binary_sensor.garage_2_contact_opening");
    ///<summary>Garage Door 1 Tilt Low battery level</summary>
    public BinarySensorEntity GarageDoor1TiltLowBatteryLevel => new(_haContext, "binary_sensor.garage_door_1_tilt_low_battery_level");
    ///<summary>Garage Door 1 Tilt Sensor state (Any)</summary>
    public BinarySensorEntity GarageDoor1TiltSensorStateAny => new(_haContext, "binary_sensor.garage_door_1_tilt_sensor_state_any");
    ///<summary>Tampering, product cover removed</summary>
    public BinarySensorEntity GarageDoor1TiltTamperingProductCoverRemoved => new(_haContext, "binary_sensor.garage_door_1_tilt_tampering_product_cover_removed");
    ///<summary>Garage Door 2 Tilt Low battery level</summary>
    public BinarySensorEntity GarageDoor2TiltLowBatteryLevel => new(_haContext, "binary_sensor.garage_door_2_tilt_low_battery_level");
    ///<summary>Garage Door 2 Tilt Sensor state (Any)</summary>
    public BinarySensorEntity GarageDoor2TiltSensorStateAny => new(_haContext, "binary_sensor.garage_door_2_tilt_sensor_state_any");
    ///<summary>Tampering, product cover removed</summary>
    public BinarySensorEntity GarageDoor2TiltTamperingProductCoverRemoved => new(_haContext, "binary_sensor.garage_door_2_tilt_tampering_product_cover_removed");
    ///<summary>Inside Garage Door Contact Opening</summary>
    public BinarySensorEntity InsideGarageDoorContactOpening => new(_haContext, "binary_sensor.inside_garage_door_contact_opening");
    ///<summary>Kitchen Walkway Zone all occupancy</summary>
    public BinarySensorEntity KitchenWalkwayZoneAllOccupancy => new(_haContext, "binary_sensor.kitchen_walkway_zone_all_occupancy");
    ///<summary>Kitchen Walkway Zone person occupancy</summary>
    public BinarySensorEntity KitchenWalkwayZonePersonOccupancy => new(_haContext, "binary_sensor.kitchen_walkway_zone_person_occupancy");
    ///<summary>Kitchen Zone all occupancy</summary>
    public BinarySensorEntity KitchenZoneAllOccupancy => new(_haContext, "binary_sensor.kitchen_zone_all_occupancy");
    ///<summary>Kitchen Zone person occupancy</summary>
    public BinarySensorEntity KitchenZonePersonOccupancy => new(_haContext, "binary_sensor.kitchen_zone_person_occupancy");
    ///<summary>LeonardPhone High accuracy mode</summary>
    public BinarySensorEntity LeonardphoneHighAccuracyMode => new(_haContext, "binary_sensor.leonardphone_high_accuracy_mode");
    ///<summary>Living Room Buttons Low battery level</summary>
    public BinarySensorEntity LivingRoomButtonsLowBatteryLevel => new(_haContext, "binary_sensor.living_room_buttons_low_battery_level");
    ///<summary>Lounge Buttons Low battery level</summary>
    public BinarySensorEntity LoungeButtonsLowBatteryLevel => new(_haContext, "binary_sensor.lounge_buttons_low_battery_level");
    ///<summary>Office Motion Motion</summary>
    public BinarySensorEntity LumiLumiSensorMotionAq2Motion => new(_haContext, "binary_sensor.lumi_lumi_sensor_motion_aq2_motion");
    ///<summary>Basement Stair Motion Motion</summary>
    public BinarySensorEntity LumiLumiSensorMotionAq2Motion2 => new(_haContext, "binary_sensor.lumi_lumi_sensor_motion_aq2_motion_2");
    ///<summary>Front Porch Motion Motion</summary>
    public BinarySensorEntity LumiLumiSensorMotionAq2Motion3 => new(_haContext, "binary_sensor.lumi_lumi_sensor_motion_aq2_motion_3");
    ///<summary>Office Motion Occupancy</summary>
    public BinarySensorEntity LumiLumiSensorMotionAq2Occupancy => new(_haContext, "binary_sensor.lumi_lumi_sensor_motion_aq2_occupancy");
    ///<summary>Basement Stair Motion Occupancy</summary>
    public BinarySensorEntity LumiLumiSensorMotionAq2Occupancy2 => new(_haContext, "binary_sensor.lumi_lumi_sensor_motion_aq2_occupancy_2");
    ///<summary>Front Porch Motion Occupancy</summary>
    public BinarySensorEntity LumiLumiSensorMotionAq2Occupancy3 => new(_haContext, "binary_sensor.lumi_lumi_sensor_motion_aq2_occupancy_3");
    ///<summary>Office door Opening</summary>
    public BinarySensorEntity OfficeDoorOpening => new(_haContext, "binary_sensor.office_door_opening");
    ///<summary>Rachel Phone Low Battery</summary>
    public BinarySensorEntity RachelPhoneLowBattery => new(_haContext, "binary_sensor.rachel_phone_low_battery");
    ///<summary>RBR850 (Gateway) WAN status</summary>
    public BinarySensorEntity Rbr850GatewayWanStatus => new(_haContext, "binary_sensor.rbr850_gateway_wan_status");
    ///<summary>Remote UI</summary>
    public BinarySensorEntity RemoteUi => new(_haContext, "binary_sensor.remote_ui");
    ///<summary>Roku Ultra Headphones connected</summary>
    public BinarySensorEntity RokuUltraHeadphonesConnected => new(_haContext, "binary_sensor.roku_ultra_headphones_connected");
    ///<summary>Roku Ultra Supports AirPlay</summary>
    public BinarySensorEntity RokuUltraSupportsAirplay => new(_haContext, "binary_sensor.roku_ultra_supports_airplay");
    ///<summary>Roku Ultra Supports ethernet</summary>
    public BinarySensorEntity RokuUltraSupportsEthernet => new(_haContext, "binary_sensor.roku_ultra_supports_ethernet");
    ///<summary>Roku Ultra Supports find remote</summary>
    public BinarySensorEntity RokuUltraSupportsFindRemote => new(_haContext, "binary_sensor.roku_ultra_supports_find_remote");
    ///<summary>RT149699 Door Status Any Open</summary>
    public BinarySensorEntity Rt149699DoorStatusAnyOpen => new(_haContext, "binary_sensor.rt149699_door_status_any_open");
    ///<summary>RT149699 Ice Maker Control Status Fridge</summary>
    public BinarySensorEntity Rt149699IceMakerControlStatusFridge => new(_haContext, "binary_sensor.rt149699_ice_maker_control_status_fridge");
    ///<summary>Button 1</summary>
    public BinarySensorEntity Second32Button1 => new(_haContext, "binary_sensor.second32_button_1");
    ///<summary>Button 2</summary>
    public BinarySensorEntity Second32Button2 => new(_haContext, "binary_sensor.second32_button_2");
    ///<summary>Button 3</summary>
    public BinarySensorEntity Second32Button3 => new(_haContext, "binary_sensor.second32_button_3");
    ///<summary>Settings</summary>
    public BinarySensorEntity Second32Settings => new(_haContext, "binary_sensor.second32_settings");
    ///<summary>Yi Cam1 all occupancy</summary>
    public BinarySensorEntity YiCam1AllOccupancy => new(_haContext, "binary_sensor.yi_cam1_all_occupancy");
    ///<summary>car occupancy</summary>
    public BinarySensorEntity YiCam1CarOccupancy => new(_haContext, "binary_sensor.yi_cam1_car_occupancy");
    ///<summary>Yi Cam1 Motion</summary>
    public BinarySensorEntity YiCam1Motion => new(_haContext, "binary_sensor.yi_cam1_motion");
    ///<summary>Yi Cam1 person occupancy</summary>
    public BinarySensorEntity YiCam1PersonOccupancy => new(_haContext, "binary_sensor.yi_cam1_person_occupancy");
    ///<summary>yi_hack_a_0f0641_animal_detection</summary>
    public BinarySensorEntity YiHackA0f0641AnimalDetection => new(_haContext, "binary_sensor.yi_hack_a_0f0641_animal_detection");
    ///<summary>yi_hack_a_0f0641_human_detection</summary>
    public BinarySensorEntity YiHackA0f0641HumanDetection => new(_haContext, "binary_sensor.yi_hack_a_0f0641_human_detection");
    ///<summary>yi_hack_a_0f0641_motion_detection</summary>
    public BinarySensorEntity YiHackA0f0641MotionDetection => new(_haContext, "binary_sensor.yi_hack_a_0f0641_motion_detection");
    ///<summary>yi_hack_a_0f0641_sound_detection</summary>
    public BinarySensorEntity YiHackA0f0641SoundDetection => new(_haContext, "binary_sensor.yi_hack_a_0f0641_sound_detection");
    ///<summary>yi_hack_a_0f0641_status</summary>
    public BinarySensorEntity YiHackA0f0641Status => new(_haContext, "binary_sensor.yi_hack_a_0f0641_status");
    ///<summary>yi_hack_a_0f0641_vehicle_detection</summary>
    public BinarySensorEntity YiHackA0f0641VehicleDetection => new(_haContext, "binary_sensor.yi_hack_a_0f0641_vehicle_detection");
}

public partial class ButtonEntities
{
    private readonly IHaContext _haContext;
    public ButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Back Door Contact Identify</summary>
    public ButtonEntity BackDoorContactIdentify => new(_haContext, "button.back_door_contact_identify");
    ///<summary>Back Flood Identify</summary>
    public ButtonEntity BackFloodIdentify => new(_haContext, "button.back_flood_identify");
    ///<summary>Back Hall Light Identify</summary>
    public ButtonEntity BackHallLightIdentify => new(_haContext, "button.back_hall_light_identify");
    ///<summary>Back Porch Light Ping</summary>
    public ButtonEntity BackPorchLightPing => new(_haContext, "button.back_porch_light_ping");
    ///<summary>Basement Stair Identify</summary>
    public ButtonEntity BasementStairIdentify => new(_haContext, "button.basement_stair_identify");
    ///<summary>Basement Stair Ping</summary>
    public ButtonEntity BasementStairPing => new(_haContext, "button.basement_stair_ping");
    ///<summary>Dining Room Identify</summary>
    public ButtonEntity DiningRoomIdentify => new(_haContext, "button.dining_room_identify");
    ///<summary>Front Door Contact Identify</summary>
    public ButtonEntity FrontDoorContactIdentify => new(_haContext, "button.front_door_contact_identify");
    ///<summary>Garage 1 Contact Identify</summary>
    public ButtonEntity Garage1ContactIdentify => new(_haContext, "button.garage_1_contact_identify");
    ///<summary>Garage 2 Contact Identify</summary>
    public ButtonEntity Garage2ContactIdentify => new(_haContext, "button.garage_2_contact_identify");
    ///<summary>Idle Home Security Cover status</summary>
    public ButtonEntity GarageDoor1TiltIdleHomeSecurityCoverStatus => new(_haContext, "button.garage_door_1_tilt_idle_home_security_cover_status");
    ///<summary>Idle Home Security Cover status</summary>
    public ButtonEntity GarageDoor2TiltIdleHomeSecurityCoverStatus => new(_haContext, "button.garage_door_2_tilt_idle_home_security_cover_status");
    ///<summary>Garage Door Opener Ping</summary>
    public ButtonEntity GarageDoorOpenerPing => new(_haContext, "button.garage_door_opener_ping");
    ///<summary>Inside Garage Door Contact Identify</summary>
    public ButtonEntity InsideGarageDoorContactIdentify => new(_haContext, "button.inside_garage_door_contact_identify");
    ///<summary>Office Motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2Identify => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_identify");
    ///<summary>Basement Stair Motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2Identify2 => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_identify_2");
    ///<summary>Front Porch Motion Identify</summary>
    public ButtonEntity LumiLumiSensorMotionAq2Identify3 => new(_haContext, "button.lumi_lumi_sensor_motion_aq2_identify_3");
    ///<summary>Main Bedroom 4 in 1 Identify</summary>
    public ButtonEntity MainBedroom4In1Identify => new(_haContext, "button.main_bedroom_4_in_1_identify");
    ///<summary>Main Bedroom 4 in 1 Idle Home Security Cover status</summary>
    public ButtonEntity MainBedroom4In1IdleHomeSecurityCoverStatus => new(_haContext, "button.main_bedroom_4_in_1_idle_home_security_cover_status");
    ///<summary>Main Bedroom 4 in 1 Idle Home Security Motion sensor status</summary>
    public ButtonEntity MainBedroom4In1IdleHomeSecurityMotionSensorStatus => new(_haContext, "button.main_bedroom_4_in_1_idle_home_security_motion_sensor_status");
    ///<summary>Kitchen Lights Ping</summary>
    public ButtonEntity Node10Ping => new(_haContext, "button.node_10_ping");
    ///<summary>Back Flood Ping</summary>
    public ButtonEntity Node11Ping => new(_haContext, "button.node_11_ping");
    ///<summary>Upstairs Hall Ping</summary>
    public ButtonEntity Node12Ping => new(_haContext, "button.node_12_ping");
    ///<summary>Craft Room Ping</summary>
    public ButtonEntity Node14Ping => new(_haContext, "button.node_14_ping");
    ///<summary>Main Bedroom 4 in 1 Ping</summary>
    public ButtonEntity Node15Ping => new(_haContext, "button.node_15_ping");
    ///<summary>Basement 1 Ping</summary>
    public ButtonEntity Node16Ping => new(_haContext, "button.node_16_ping");
    ///<summary>Basement 2 Ping</summary>
    public ButtonEntity Node17Ping => new(_haContext, "button.node_17_ping");
    ///<summary>Basement Work Ping</summary>
    public ButtonEntity Node18Ping => new(_haContext, "button.node_18_ping");
    ///<summary>Dining Room Ping</summary>
    public ButtonEntity Node19Ping => new(_haContext, "button.node_19_ping");
    ///<summary>Office Lights Ping</summary>
    public ButtonEntity Node2Ping => new(_haContext, "button.node_2_ping");
    ///<summary>Living Room Buttons Ping</summary>
    public ButtonEntity Node20Ping => new(_haContext, "button.node_20_ping");
    ///<summary>Front Porch Ping</summary>
    public ButtonEntity Node21Ping => new(_haContext, "button.node_21_ping");
    ///<summary>Garage Door 1 Tilt Ping</summary>
    public ButtonEntity Node22Ping => new(_haContext, "button.node_22_ping");
    ///<summary>Garage Door 2 Tilt Ping</summary>
    public ButtonEntity Node23Ping => new(_haContext, "button.node_23_ping");
    ///<summary>Back Hall Light Ping</summary>
    public ButtonEntity Node24Ping => new(_haContext, "button.node_24_ping");
    ///<summary>Lounge Buttons Ping</summary>
    public ButtonEntity Node27Ping => new(_haContext, "button.node_27_ping");
    ///<summary>Peacock Lamp Ping</summary>
    public ButtonEntity Node28Ping => new(_haContext, "button.node_28_ping");
    ///<summary>Entry Light Ping</summary>
    public ButtonEntity Node4Ping => new(_haContext, "button.node_4_ping");
    ///<summary>Front Room Ping</summary>
    public ButtonEntity Node5Ping => new(_haContext, "button.node_5_ping");
    ///<summary>Office door Identify</summary>
    public ButtonEntity OfficeDoorIdentify => new(_haContext, "button.office_door_identify");
    ///<summary>Office Fan Identify</summary>
    public ButtonEntity OfficeFanIdentify => new(_haContext, "button.office_fan_identify");
    ///<summary>Office LED Identify</summary>
    public ButtonEntity OfficeLedIdentify => new(_haContext, "button.office_led_identify");
    ///<summary>Peacock Lamp Identify</summary>
    public ButtonEntity PeacockLampIdentify => new(_haContext, "button.peacock_lamp_identify");
}

public partial class CameraEntities
{
    private readonly IHaContext _haContext;
    public CameraEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Test Camera via integration</summary>
    public CameraEntity _192168171 => new(_haContext, "camera.192_168_1_71");
    ///<summary>First Cam</summary>
    public CameraEntity FirstCam => new(_haContext, "camera.first_cam");
    ///<summary>First Cam Car</summary>
    public CameraEntity FirstCamCar => new(_haContext, "camera.first_cam_car");
    ///<summary>First Cam Horse</summary>
    public CameraEntity FirstCamHorse => new(_haContext, "camera.first_cam_horse");
    ///<summary>First Cam Person</summary>
    public CameraEntity FirstCamPerson => new(_haContext, "camera.first_cam_person");
    ///<summary>Yi Cam1</summary>
    public CameraEntity YiCam1 => new(_haContext, "camera.yi_cam1");
    ///<summary>Car</summary>
    public CameraEntity YiCam1Car => new(_haContext, "camera.yi_cam1_car");
    ///<summary>Yi Cam1 Person</summary>
    public CameraEntity YiCam1Person => new(_haContext, "camera.yi_cam1_person");
    ///<summary>yi_hack_a_0f0641_cam</summary>
    public CameraEntity YiHackA0f0641Cam => new(_haContext, "camera.yi_hack_a_0f0641_cam");
    ///<summary>yi_hack_a_0f0641_motion_detection_cam</summary>
    public CameraEntity YiHackA0f0641MotionDetectionCam => new(_haContext, "camera.yi_hack_a_0f0641_motion_detection_cam");
}

public partial class DeviceTrackerEntities
{
    private readonly IHaContext _haContext;
    public DeviceTrackerEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>asher</summary>
    public DeviceTrackerEntity DoubleTakeAsher => new(_haContext, "device_tracker.double_take_asher");
    ///<summary>lyra</summary>
    public DeviceTrackerEntity DoubleTakeLyra => new(_haContext, "device_tracker.double_take_lyra");
    ///<summary>rachel</summary>
    public DeviceTrackerEntity DoubleTakeRachel => new(_haContext, "device_tracker.double_take_rachel");
    ///<summary>Leonard</summary>
    public DeviceTrackerEntity Leonard => new(_haContext, "device_tracker.leonard");
    ///<summary>LeonardPhone</summary>
    public DeviceTrackerEntity Leophone => new(_haContext, "device_tracker.leophone");
    ///<summary>RT7 TITAN 5G fam</summary>
    public DeviceTrackerEntity Rt7Titan5g => new(_haContext, "device_tracker.rt7_titan_5g");
    ///<summary>RT7 TITAN 5G</summary>
    public DeviceTrackerEntity Rt7Titan5g2 => new(_haContext, "device_tracker.rt7_titan_5g_2");
    ///<summary>Rachel Phone</summary>
    public DeviceTrackerEntity SmF721u => new(_haContext, "device_tracker.sm_f721u");
}

public partial class EventEntities
{
    private readonly IHaContext _haContext;
    public EventEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Back Flood Scene 001</summary>
    public EventEntity BackFloodScene001 => new(_haContext, "event.back_flood_scene_001");
    ///<summary>Back Flood Scene 002</summary>
    public EventEntity BackFloodScene002 => new(_haContext, "event.back_flood_scene_002");
    ///<summary>Back Hall Light Scene 001</summary>
    public EventEntity BackHallLightScene001 => new(_haContext, "event.back_hall_light_scene_001");
    ///<summary>Back Hall Light Scene 002</summary>
    public EventEntity BackHallLightScene002 => new(_haContext, "event.back_hall_light_scene_002");
    ///<summary>Basement 1 Event value</summary>
    public EventEntity Basement1EventValue => new(_haContext, "event.basement_1_event_value");
    ///<summary>Basement 1 Scene 001</summary>
    public EventEntity Basement1Scene001 => new(_haContext, "event.basement_1_scene_001");
    ///<summary>Basement 1 Scene 002</summary>
    public EventEntity Basement1Scene002 => new(_haContext, "event.basement_1_scene_002");
    ///<summary>Basement 2 Event value</summary>
    public EventEntity Basement2EventValue => new(_haContext, "event.basement_2_event_value");
    ///<summary>Basement 2 Scene 001</summary>
    public EventEntity Basement2Scene001 => new(_haContext, "event.basement_2_scene_001");
    ///<summary>Basement 2 Scene 002</summary>
    public EventEntity Basement2Scene002 => new(_haContext, "event.basement_2_scene_002");
    ///<summary>Basement Stair Scene 001</summary>
    public EventEntity BasementStairScene001 => new(_haContext, "event.basement_stair_scene_001");
    ///<summary>Basement Stair Scene 002</summary>
    public EventEntity BasementStairScene002 => new(_haContext, "event.basement_stair_scene_002");
    ///<summary>Basement Stair Scene 003</summary>
    public EventEntity BasementStairScene003 => new(_haContext, "event.basement_stair_scene_003");
    ///<summary>Basement Stair Scene 004</summary>
    public EventEntity BasementStairScene004 => new(_haContext, "event.basement_stair_scene_004");
    ///<summary>Basement Stair Scene 005</summary>
    public EventEntity BasementStairScene005 => new(_haContext, "event.basement_stair_scene_005");
    ///<summary>Basement Work Event value</summary>
    public EventEntity BasementWorkEventValue => new(_haContext, "event.basement_work_event_value");
    ///<summary>Basement Work Scene 001</summary>
    public EventEntity BasementWorkScene001 => new(_haContext, "event.basement_work_scene_001");
    ///<summary>Basement Work Scene 002</summary>
    public EventEntity BasementWorkScene002 => new(_haContext, "event.basement_work_scene_002");
    ///<summary>Craft Room Event value</summary>
    public EventEntity CraftRoomEventValue => new(_haContext, "event.craft_room_event_value");
    ///<summary>Craft Room Scene 001</summary>
    public EventEntity CraftRoomScene001 => new(_haContext, "event.craft_room_scene_001");
    ///<summary>Craft Room Scene 002</summary>
    public EventEntity CraftRoomScene002 => new(_haContext, "event.craft_room_scene_002");
    ///<summary>Dining Room Scene 001</summary>
    public EventEntity DiningRoomScene001 => new(_haContext, "event.dining_room_scene_001");
    ///<summary>Dining Room Scene 002</summary>
    public EventEntity DiningRoomScene002 => new(_haContext, "event.dining_room_scene_002");
    ///<summary>Dining Room Scene 003</summary>
    public EventEntity DiningRoomScene003 => new(_haContext, "event.dining_room_scene_003");
    ///<summary>Dining Room Scene 004</summary>
    public EventEntity DiningRoomScene004 => new(_haContext, "event.dining_room_scene_004");
    ///<summary>Dining Room Scene 005</summary>
    public EventEntity DiningRoomScene005 => new(_haContext, "event.dining_room_scene_005");
    ///<summary>Entry Light Event value</summary>
    public EventEntity EntryLightEventValue => new(_haContext, "event.entry_light_event_value");
    ///<summary>Entry Light Scene 001</summary>
    public EventEntity EntryLightScene001 => new(_haContext, "event.entry_light_scene_001");
    ///<summary>Entry Light Scene 002</summary>
    public EventEntity EntryLightScene002 => new(_haContext, "event.entry_light_scene_002");
    ///<summary>Front Porch Event value</summary>
    public EventEntity FrontPorchEventValue => new(_haContext, "event.front_porch_event_value");
    ///<summary>Front Porch Scene 001</summary>
    public EventEntity FrontPorchScene001 => new(_haContext, "event.front_porch_scene_001");
    ///<summary>Front Porch Scene 002</summary>
    public EventEntity FrontPorchScene002 => new(_haContext, "event.front_porch_scene_002");
    ///<summary>Front Room Scene 001</summary>
    public EventEntity FrontRoomScene001 => new(_haContext, "event.front_room_scene_001");
    ///<summary>Front Room Scene 002</summary>
    public EventEntity FrontRoomScene002 => new(_haContext, "event.front_room_scene_002");
    ///<summary>Kitchen Lights Event value</summary>
    public EventEntity KitchenLightsEventValue => new(_haContext, "event.kitchen_lights_event_value");
    ///<summary>Kitchen Lights Scene 001</summary>
    public EventEntity KitchenLightsScene001 => new(_haContext, "event.kitchen_lights_scene_001");
    ///<summary>Kitchen Lights Scene 002</summary>
    public EventEntity KitchenLightsScene002 => new(_haContext, "event.kitchen_lights_scene_002");
    ///<summary>Living Room Buttons Scene 001</summary>
    public EventEntity LivingRoomButtonsScene001 => new(_haContext, "event.living_room_buttons_scene_001");
    ///<summary>Living Room Buttons Scene 002</summary>
    public EventEntity LivingRoomButtonsScene002 => new(_haContext, "event.living_room_buttons_scene_002");
    ///<summary>Living Room Buttons Scene 003</summary>
    public EventEntity LivingRoomButtonsScene003 => new(_haContext, "event.living_room_buttons_scene_003");
    ///<summary>Living Room Buttons Scene 004</summary>
    public EventEntity LivingRoomButtonsScene004 => new(_haContext, "event.living_room_buttons_scene_004");
    ///<summary>Living Room Buttons Scene 005</summary>
    public EventEntity LivingRoomButtonsScene005 => new(_haContext, "event.living_room_buttons_scene_005");
    ///<summary>Living Room Buttons Scene 006</summary>
    public EventEntity LivingRoomButtonsScene006 => new(_haContext, "event.living_room_buttons_scene_006");
    ///<summary>Living Room Buttons Scene 007</summary>
    public EventEntity LivingRoomButtonsScene007 => new(_haContext, "event.living_room_buttons_scene_007");
    ///<summary>Living Room Buttons Scene 008</summary>
    public EventEntity LivingRoomButtonsScene008 => new(_haContext, "event.living_room_buttons_scene_008");
    ///<summary>Lounge Buttons Scene 001</summary>
    public EventEntity LoungeButtonsScene001 => new(_haContext, "event.lounge_buttons_scene_001");
    ///<summary>Lounge Buttons Scene 002</summary>
    public EventEntity LoungeButtonsScene002 => new(_haContext, "event.lounge_buttons_scene_002");
    ///<summary>Lounge Buttons Scene 003</summary>
    public EventEntity LoungeButtonsScene003 => new(_haContext, "event.lounge_buttons_scene_003");
    ///<summary>Lounge Buttons Scene 004</summary>
    public EventEntity LoungeButtonsScene004 => new(_haContext, "event.lounge_buttons_scene_004");
    ///<summary>Lounge Buttons Scene 005</summary>
    public EventEntity LoungeButtonsScene005 => new(_haContext, "event.lounge_buttons_scene_005");
    ///<summary>Lounge Buttons Scene 006</summary>
    public EventEntity LoungeButtonsScene006 => new(_haContext, "event.lounge_buttons_scene_006");
    ///<summary>Lounge Buttons Scene 007</summary>
    public EventEntity LoungeButtonsScene007 => new(_haContext, "event.lounge_buttons_scene_007");
    ///<summary>Lounge Buttons Scene 008</summary>
    public EventEntity LoungeButtonsScene008 => new(_haContext, "event.lounge_buttons_scene_008");
    ///<summary>Office Lights Scene 001</summary>
    public EventEntity OfficeLightsScene001 => new(_haContext, "event.office_lights_scene_001");
    ///<summary>Office Lights Scene 002</summary>
    public EventEntity OfficeLightsScene002 => new(_haContext, "event.office_lights_scene_002");
    ///<summary>Upstairs Hall Event value</summary>
    public EventEntity UpstairsHallEventValue => new(_haContext, "event.upstairs_hall_event_value");
    ///<summary>Upstairs Hall Scene 001</summary>
    public EventEntity UpstairsHallScene001 => new(_haContext, "event.upstairs_hall_scene_001");
    ///<summary>Upstairs Hall Scene 002</summary>
    public EventEntity UpstairsHallScene002 => new(_haContext, "event.upstairs_hall_scene_002");
}

public partial class InputBooleanEntities
{
    private readonly IHaContext _haContext;
    public InputBooleanEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Bedtime Switch</summary>
    public InputBooleanEntity BedtimeSwitch => new(_haContext, "input_boolean.bedtime_switch");
    ///<summary>dev_netdaemon_app_model_hello_yaml_app</summary>
    public InputBooleanEntity DevNetdaemonAppModelHelloYamlApp => new(_haContext, "input_boolean.dev_netdaemon_app_model_hello_yaml_app");
    ///<summary>dev_netdaemon_extensions_scheduling_scheduling_app</summary>
    public InputBooleanEntity DevNetdaemonExtensionsSchedulingSchedulingApp => new(_haContext, "input_boolean.dev_netdaemon_extensions_scheduling_scheduling_app");
    ///<summary>dev_netdaemon_hass_model_hello_world_app</summary>
    public InputBooleanEntity DevNetdaemonHassModelHelloWorldApp => new(_haContext, "input_boolean.dev_netdaemon_hass_model_hello_world_app");
    ///<summary>dev_netdaemon_hass_model_light_on_movement</summary>
    public InputBooleanEntity DevNetdaemonHassModelLightOnMovement => new(_haContext, "input_boolean.dev_netdaemon_hass_model_light_on_movement");
    ///<summary>Front Porch Motion Enable</summary>
    public InputBooleanEntity FrontPorchMotionEnable => new(_haContext, "input_boolean.front_porch_motion_enable");
    ///<summary>Living Room Override</summary>
    public InputBooleanEntity LivingRoomOverride => new(_haContext, "input_boolean.living_room_override");
    ///<summary>netdaemon_app_model_hello_yaml_app</summary>
    public InputBooleanEntity NetdaemonAppModelHelloYamlApp => new(_haContext, "input_boolean.netdaemon_app_model_hello_yaml_app");
    ///<summary>netdaemon_extensions_scheduling_scheduling_app</summary>
    public InputBooleanEntity NetdaemonExtensionsSchedulingSchedulingApp => new(_haContext, "input_boolean.netdaemon_extensions_scheduling_scheduling_app");
    ///<summary>netdaemon_hass_model_hello_world_app</summary>
    public InputBooleanEntity NetdaemonHassModelHelloWorldApp => new(_haContext, "input_boolean.netdaemon_hass_model_hello_world_app");
    ///<summary>netdaemon_hass_model_light_on_movement</summary>
    public InputBooleanEntity NetdaemonHassModelLightOnMovement => new(_haContext, "input_boolean.netdaemon_hass_model_light_on_movement");
    ///<summary>Office Override</summary>
    public InputBooleanEntity OfficeOverride => new(_haContext, "input_boolean.office_override");
}

public partial class InputButtonEntities
{
    private readonly IHaContext _haContext;
    public InputButtonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close Garage</summary>
    public InputButtonEntity CloseGarage => new(_haContext, "input_button.close_garage");
    ///<summary>custom_message_send</summary>
    public InputButtonEntity CustomMessageSend => new(_haContext, "input_button.custom_message_send");
    ///<summary>Find Phone Test</summary>
    public InputButtonEntity FindPhoneTest => new(_haContext, "input_button.find_phone_test");
}

public partial class InputSelectEntities
{
    private readonly IHaContext _haContext;
    public InputSelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>custom_message_delivery_locations</summary>
    public InputSelectEntity CustomMessageDeliveryLocations => new(_haContext, "input_select.custom_message_delivery_locations");
}

public partial class InputTextEntities
{
    private readonly IHaContext _haContext;
    public InputTextEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>custom_message</summary>
    public InputTextEntity CustomMessage => new(_haContext, "input_text.custom_message");
}

public partial class LockEntities
{
    private readonly IHaContext _haContext;
    public LockEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aqara Smart Lock U100</summary>
    public LockEntity AqaraSmartLockU100 => new(_haContext, "lock.aqara_smart_lock_u100");
}

public partial class NumberEntities
{
    private readonly IHaContext _haContext;
    public NumberEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Back Flood Indicator value</summary>
    public NumberEntity BackFloodIndicatorValue => new(_haContext, "number.back_flood_indicator_value");
    ///<summary>Back Hall Light Indicator value</summary>
    public NumberEntity BackHallLightIndicatorValue => new(_haContext, "number.back_hall_light_indicator_value");
    ///<summary>Back Porch Light Indicator value</summary>
    public NumberEntity BackPorchLightIndicatorValue => new(_haContext, "number.back_porch_light_indicator_value");
    ///<summary>Basic</summary>
    public NumberEntity BasementMotionBasic => new(_haContext, "number.basement_motion_basic");
    ///<summary>Basement Stair Indicator value</summary>
    public NumberEntity BasementStairIndicatorValue => new(_haContext, "number.basement_stair_indicator_value");
    ///<summary>Dining Room Indicator value</summary>
    public NumberEntity DiningRoomIndicatorValue => new(_haContext, "number.dining_room_indicator_value");
    ///<summary>Main Bedroom 4 in 1 Indicator value</summary>
    public NumberEntity MainBedroom4In1IndicatorValue => new(_haContext, "number.main_bedroom_4_in_1_indicator_value");
    ///<summary>Main Bedroom Light 1 Effect speed</summary>
    public NumberEntity MainBedroomLight1EffectSpeed => new(_haContext, "number.main_bedroom_light_1_effect_speed");
    ///<summary>Main Bedroom Light 2 Effect speed</summary>
    public NumberEntity MainBedroomLight2EffectSpeed => new(_haContext, "number.main_bedroom_light_2_effect_speed");
    ///<summary>Office LED On/Off transition time</summary>
    public NumberEntity OfficeLedOnOffTransitionTime => new(_haContext, "number.office_led_on_off_transition_time");
    ///<summary>Office LED Start-up color temperature</summary>
    public NumberEntity OfficeLedStartUpColorTemperature => new(_haContext, "number.office_led_start_up_color_temperature");
    ///<summary>Office LED Start-up current level</summary>
    public NumberEntity OfficeLedStartUpCurrentLevel => new(_haContext, "number.office_led_start_up_current_level");
    ///<summary>Peacock Lamp Indicator value</summary>
    public NumberEntity PeacockLampIndicatorValue => new(_haContext, "number.peacock_lamp_indicator_value");
    ///<summary>WiZ RGBW Tunable 79A59C Effect speed</summary>
    public NumberEntity WizRgbwTunable79a59cEffectSpeed => new(_haContext, "number.wiz_rgbw_tunable_79a59c_effect_speed");
    ///<summary>WiZ RGBW Tunable 79AAB4 Effect speed</summary>
    public NumberEntity WizRgbwTunable79aab4EffectSpeed => new(_haContext, "number.wiz_rgbw_tunable_79aab4_effect_speed");
    ///<summary>WiZ RGBW Tunable 8D7D54 Effect speed</summary>
    public NumberEntity WizRgbwTunable8d7d54EffectSpeed => new(_haContext, "number.wiz_rgbw_tunable_8d7d54_effect_speed");
}

public partial class PersonEntities
{
    private readonly IHaContext _haContext;
    public PersonEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Leonard</summary>
    public PersonEntity Leonard => new(_haContext, "person.leonard");
    ///<summary>Rachel</summary>
    public PersonEntity Rachel => new(_haContext, "person.rachel");
}

public partial class RemoteEntities
{
    private readonly IHaContext _haContext;
    public RemoteEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Roku Ultra</summary>
    public RemoteEntity RokuUltra => new(_haContext, "remote.roku_ultra");
    ///<summary>Samsung QN90AA 65 TV</summary>
    public RemoteEntity SamsungQn90aa65Tv => new(_haContext, "remote.samsung_qn90aa_65_tv");
}

public partial class ScriptEntities
{
    private readonly IHaContext _haContext;
    public ScriptEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Close Garage 1</summary>
    public ScriptEntity CloseGarage1 => new(_haContext, "script.close_garage_1");
    ///<summary>Close Garage 2</summary>
    public ScriptEntity CloseGarage2 => new(_haContext, "script.close_garage_2");
    ///<summary>Dim Basement Lights</summary>
    public ScriptEntity DimBasementLights => new(_haContext, "script.dim_basement_lights");
    ///<summary>Show Front Porch</summary>
    public ScriptEntity ShowFrontPorch => new(_haContext, "script.show_front_porch");
    ///<summary>Test Script</summary>
    public ScriptEntity TestScript => new(_haContext, "script.test_script");
}

public partial class SelectEntities
{
    private readonly IHaContext _haContext;
    public SelectEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Dining Room LED Indicator (Button 1)</summary>
    public SelectEntity DiningRoomLedIndicatorButton1 => new(_haContext, "select.dining_room_led_indicator_button_1");
    ///<summary>Dining Room LED Indicator (Button 2)</summary>
    public SelectEntity DiningRoomLedIndicatorButton2 => new(_haContext, "select.dining_room_led_indicator_button_2");
    ///<summary>Dining Room LED Indicator (Button 3)</summary>
    public SelectEntity DiningRoomLedIndicatorButton3 => new(_haContext, "select.dining_room_led_indicator_button_3");
    ///<summary>Dining Room LED Indicator (Button 4)</summary>
    public SelectEntity DiningRoomLedIndicatorButton4 => new(_haContext, "select.dining_room_led_indicator_button_4");
    ///<summary>Dining Room LED Indicator Color (Button 4)</summary>
    public SelectEntity DiningRoomLedIndicatorColorButton4 => new(_haContext, "select.dining_room_led_indicator_color_button_4");
    ///<summary>Dining Room LED Indicator (Relay)</summary>
    public SelectEntity DiningRoomLedIndicatorRelay => new(_haContext, "select.dining_room_led_indicator_relay");
    ///<summary>Dining Room Relay Control</summary>
    public SelectEntity DiningRoomRelayControl => new(_haContext, "select.dining_room_relay_control");
    ///<summary>Dining Room Send Report and Toggle LED on Button Press If Relay Disabled</summary>
    public SelectEntity DiningRoomSendReportAndToggleLedOnButtonPressIfRelayDisabled => new(_haContext, "select.dining_room_send_report_and_toggle_led_on_button_press_if_relay_disabled");
    ///<summary>ESP32 S3 Box Lite Assist pipeline</summary>
    public SelectEntity First32AssistPipeline => new(_haContext, "select.first32_assist_pipeline");
    ///<summary>ESP32 S3 Box Lite Finished speaking detection</summary>
    public SelectEntity First32FinishedSpeakingDetection => new(_haContext, "select.first32_finished_speaking_detection");
    ///<summary>Office LED Start-up behavior</summary>
    public SelectEntity OfficeLedStartUpBehavior => new(_haContext, "select.office_led_start_up_behavior");
    ///<summary>RT149699 Convertable Drawer Mode</summary>
    public SelectEntity Rt149699ConvertableDrawerMode => new(_haContext, "select.rt149699_convertable_drawer_mode");
    ///<summary>yi_hack_a_0f0641_select_cruise</summary>
    public SelectEntity YiHackA0f0641SelectCruise => new(_haContext, "select.yi_hack_a_0f0641_select_cruise");
    ///<summary>yi_hack_a_0f0641_select_sensitivity</summary>
    public SelectEntity YiHackA0f0641SelectSensitivity => new(_haContext, "select.yi_hack_a_0f0641_select_sensitivity");
    ///<summary>yi_hack_a_0f0641_select_sound_sensitivity</summary>
    public SelectEntity YiHackA0f0641SelectSoundSensitivity => new(_haContext, "select.yi_hack_a_0f0641_select_sound_sensitivity");
}

public partial class SensorEntities
{
    private readonly IHaContext _haContext;
    public SensorEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>800 Series Long Range GPIO Module Status</summary>
    public SensorEntity _800SeriesLongRangeGpioModuleStatus => new(_haContext, "sensor.800_series_long_range_gpio_module_status");
    ///<summary>Asher next Alarm</summary>
    public SensorEntity AsherNextAlarm => new(_haContext, "sensor.asher_next_alarm");
    ///<summary>Asher next Reminder</summary>
    public SensorEntity AsherNextReminder => new(_haContext, "sensor.asher_next_reminder");
    ///<summary>Asher next Timer</summary>
    public SensorEntity AsherNextTimer => new(_haContext, "sensor.asher_next_timer");
    ///<summary>Astroweather 10m Wind Direction</summary>
    public SensorEntity Astroweather10mWindDirection => new(_haContext, "sensor.astroweather_10m_wind_direction");
    ///<summary>Astroweather 10m Wind Speed Plain</summary>
    public SensorEntity Astroweather10mWindSpeedPlain => new(_haContext, "sensor.astroweather_10m_wind_speed_plain");
    ///<summary>Astroweather Clouds Plain</summary>
    public SensorEntity AstroweatherCloudsPlain => new(_haContext, "sensor.astroweather_clouds_plain");
    ///<summary>Astroweather Deepsky Forecast Today Description</summary>
    public SensorEntity AstroweatherDeepskyForecastTodayDescription => new(_haContext, "sensor.astroweather_deepsky_forecast_today_description");
    ///<summary>Astroweather Deepsky Forecast Today Plain</summary>
    public SensorEntity AstroweatherDeepskyForecastTodayPlain => new(_haContext, "sensor.astroweather_deepsky_forecast_today_plain");
    ///<summary>Astroweather Deepsky Forecast Tomorrow Description</summary>
    public SensorEntity AstroweatherDeepskyForecastTomorrowDescription => new(_haContext, "sensor.astroweather_deepsky_forecast_tomorrow_description");
    ///<summary>Astroweather Deepsky Forecast Tomorrow Plain</summary>
    public SensorEntity AstroweatherDeepskyForecastTomorrowPlain => new(_haContext, "sensor.astroweather_deepsky_forecast_tomorrow_plain");
    ///<summary>Astroweather Lifted Index Plain</summary>
    public SensorEntity AstroweatherLiftedIndexPlain => new(_haContext, "sensor.astroweather_lifted_index_plain");
    ///<summary>Astroweather Moon Next New Moon</summary>
    public SensorEntity AstroweatherMoonNextNewMoon => new(_haContext, "sensor.astroweather_moon_next_new_moon");
    ///<summary>Astroweather Moon Next Rising</summary>
    public SensorEntity AstroweatherMoonNextRising => new(_haContext, "sensor.astroweather_moon_next_rising");
    ///<summary>Astroweather Moon Next Setting</summary>
    public SensorEntity AstroweatherMoonNextSetting => new(_haContext, "sensor.astroweather_moon_next_setting");
    ///<summary>Astroweather Precipitation Type</summary>
    public SensorEntity AstroweatherPrecipitationType => new(_haContext, "sensor.astroweather_precipitation_type");
    ///<summary>Astroweather Seeing Plain</summary>
    public SensorEntity AstroweatherSeeingPlain => new(_haContext, "sensor.astroweather_seeing_plain");
    ///<summary>Astroweather Sun Next Rising</summary>
    public SensorEntity AstroweatherSunNextRising => new(_haContext, "sensor.astroweather_sun_next_rising");
    ///<summary>Astroweather Sun Next Rising Astronomical</summary>
    public SensorEntity AstroweatherSunNextRisingAstronomical => new(_haContext, "sensor.astroweather_sun_next_rising_astronomical");
    ///<summary>Astroweather Sun Next Rising Nautical</summary>
    public SensorEntity AstroweatherSunNextRisingNautical => new(_haContext, "sensor.astroweather_sun_next_rising_nautical");
    ///<summary>Astroweather Sun Next Setting</summary>
    public SensorEntity AstroweatherSunNextSetting => new(_haContext, "sensor.astroweather_sun_next_setting");
    ///<summary>Astroweather Sun Next Setting Astronomical</summary>
    public SensorEntity AstroweatherSunNextSettingAstronomical => new(_haContext, "sensor.astroweather_sun_next_setting_astronomical");
    ///<summary>Astroweather Sun Next Setting Nautical</summary>
    public SensorEntity AstroweatherSunNextSettingNautical => new(_haContext, "sensor.astroweather_sun_next_setting_nautical");
    ///<summary>Astroweather Timestamp</summary>
    public SensorEntity AstroweatherTimestamp => new(_haContext, "sensor.astroweather_timestamp");
    ///<summary>Astroweather Transparency Plain</summary>
    public SensorEntity AstroweatherTransparencyPlain => new(_haContext, "sensor.astroweather_transparency_plain");
    ///<summary>AV339078N Laundry Cycle</summary>
    public SensorEntity Av339078nLaundryCycle => new(_haContext, "sensor.av339078n_laundry_cycle");
    ///<summary>AV339078N Laundry Delay Time Remaining</summary>
    public SensorEntity Av339078nLaundryDelayTimeRemaining => new(_haContext, "sensor.av339078n_laundry_delay_time_remaining");
    ///<summary>AV339078N Laundry Machine State</summary>
    public SensorEntity Av339078nLaundryMachineState => new(_haContext, "sensor.av339078n_laundry_machine_state");
    ///<summary>AV339078N Laundry Sub Cycle</summary>
    public SensorEntity Av339078nLaundrySubCycle => new(_haContext, "sensor.av339078n_laundry_sub_cycle");
    ///<summary>AV339078N Laundry Time Remaining</summary>
    public SensorEntity Av339078nLaundryTimeRemaining => new(_haContext, "sensor.av339078n_laundry_time_remaining");
    ///<summary>AV339078N Laundry Washer Rinse Option</summary>
    public SensorEntity Av339078nLaundryWasherRinseOption => new(_haContext, "sensor.av339078n_laundry_washer_rinse_option");
    ///<summary>AV339078N Laundry Washer Smart Dispense Tank Status</summary>
    public SensorEntity Av339078nLaundryWasherSmartDispenseTankStatus => new(_haContext, "sensor.av339078n_laundry_washer_smart_dispense_tank_status");
    ///<summary>AV339078N Laundry Washer Soil Level</summary>
    public SensorEntity Av339078nLaundryWasherSoilLevel => new(_haContext, "sensor.av339078n_laundry_washer_soil_level");
    ///<summary>AV339078N Laundry Washer Spintime Level</summary>
    public SensorEntity Av339078nLaundryWasherSpintimeLevel => new(_haContext, "sensor.av339078n_laundry_washer_spintime_level");
    ///<summary>AV339078N Laundry Washer Washtemp Level</summary>
    public SensorEntity Av339078nLaundryWasherWashtempLevel => new(_haContext, "sensor.av339078n_laundry_washer_washtemp_level");
    ///<summary>Back Porch Light Node status</summary>
    public SensorEntity BackPorchLightNodeStatus => new(_haContext, "sensor.back_porch_light_node_status");
    ///<summary>Backup State</summary>
    public SensorEntity BackupState => new(_haContext, "sensor.backup_state");
    ///<summary>Basement Stair Node status</summary>
    public SensorEntity BasementStairNodeStatus => new(_haContext, "sensor.basement_stair_node_status");
    ///<summary>Brother MFC-L8900CDW series</summary>
    public SensorEntity BrotherMfcL8900cdwSeries => new(_haContext, "sensor.brother_mfc_l8900cdw_series");
    ///<summary>Dad&apos;s Surface next Alarm</summary>
    public SensorEntity DadSSurfaceNextAlarm => new(_haContext, "sensor.dad_s_surface_next_alarm");
    ///<summary>Dad&apos;s Surface next Reminder</summary>
    public SensorEntity DadSSurfaceNextReminder => new(_haContext, "sensor.dad_s_surface_next_reminder");
    ///<summary>Dad&apos;s Surface next Timer</summary>
    public SensorEntity DadSSurfaceNextTimer => new(_haContext, "sensor.dad_s_surface_next_timer");
    ///<summary>Date</summary>
    public SensorEntity Date => new(_haContext, "sensor.date");
    ///<summary>Date &amp; Time</summary>
    public SensorEntity DateTime => new(_haContext, "sensor.date_time");
    ///<summary>Date &amp; Time (ISO)</summary>
    public SensorEntity DateTimeIso => new(_haContext, "sensor.date_time_iso");
    ///<summary>Date &amp; Time (UTC)</summary>
    public SensorEntity DateTimeUtc => new(_haContext, "sensor.date_time_utc");
    ///<summary>asher</summary>
    public SensorEntity DoubleTakeAsher => new(_haContext, "sensor.double_take_asher");
    ///<summary>double_take_first_cam</summary>
    public SensorEntity DoubleTakeFirstCam => new(_haContext, "sensor.double_take_first_cam");
    ///<summary>double_take_leonard</summary>
    public SensorEntity DoubleTakeLeonard => new(_haContext, "sensor.double_take_leonard");
    ///<summary>lyra</summary>
    public SensorEntity DoubleTakeLyra => new(_haContext, "sensor.double_take_lyra");
    ///<summary>rachel</summary>
    public SensorEntity DoubleTakeRachel => new(_haContext, "sensor.double_take_rachel");
    ///<summary>double_take_unknown</summary>
    public SensorEntity DoubleTakeUnknown => new(_haContext, "sensor.double_take_unknown");
    ///<summary>double_take_yi_cam1</summary>
    public SensorEntity DoubleTakeYiCam1 => new(_haContext, "sensor.double_take_yi_cam1");
    ///<summary>DV102683G Laundry Cycle</summary>
    public SensorEntity Dv102683gLaundryCycle => new(_haContext, "sensor.dv102683g_laundry_cycle");
    ///<summary>DV102683G Laundry Delay Time Remaining</summary>
    public SensorEntity Dv102683gLaundryDelayTimeRemaining => new(_haContext, "sensor.dv102683g_laundry_delay_time_remaining");
    ///<summary>DV102683G Laundry Dryer Drynessnew Level</summary>
    public SensorEntity Dv102683gLaundryDryerDrynessnewLevel => new(_haContext, "sensor.dv102683g_laundry_dryer_drynessnew_level");
    ///<summary>DV102683G Laundry Dryer Ecodry Status</summary>
    public SensorEntity Dv102683gLaundryDryerEcodryStatus => new(_haContext, "sensor.dv102683g_laundry_dryer_ecodry_status");
    ///<summary>DV102683G Laundry Dryer Sheet Usage Configuration</summary>
    public SensorEntity Dv102683gLaundryDryerSheetUsageConfiguration => new(_haContext, "sensor.dv102683g_laundry_dryer_sheet_usage_configuration");
    ///<summary>DV102683G Laundry Dryer Temperaturenew Option</summary>
    public SensorEntity Dv102683gLaundryDryerTemperaturenewOption => new(_haContext, "sensor.dv102683g_laundry_dryer_temperaturenew_option");
    ///<summary>DV102683G Laundry Dryer Tumblenew Status</summary>
    public SensorEntity Dv102683gLaundryDryerTumblenewStatus => new(_haContext, "sensor.dv102683g_laundry_dryer_tumblenew_status");
    ///<summary>DV102683G Laundry Machine State</summary>
    public SensorEntity Dv102683gLaundryMachineState => new(_haContext, "sensor.dv102683g_laundry_machine_state");
    ///<summary>DV102683G Laundry Sub Cycle</summary>
    public SensorEntity Dv102683gLaundrySubCycle => new(_haContext, "sensor.dv102683g_laundry_sub_cycle");
    ///<summary>DV102683G Laundry Time Remaining</summary>
    public SensorEntity Dv102683gLaundryTimeRemaining => new(_haContext, "sensor.dv102683g_laundry_time_remaining");
    ///<summary>Garage Door Opener Node status</summary>
    public SensorEntity GarageDoorOpenerNodeStatus => new(_haContext, "sensor.garage_door_opener_node_status");
    ///<summary>Kitchen next Alarm</summary>
    public SensorEntity KitchenNextAlarm => new(_haContext, "sensor.kitchen_next_alarm");
    ///<summary>Kitchen next Reminder</summary>
    public SensorEntity KitchenNextReminder => new(_haContext, "sensor.kitchen_next_reminder");
    ///<summary>Kitchen next Timer</summary>
    public SensorEntity KitchenNextTimer => new(_haContext, "sensor.kitchen_next_timer");
    ///<summary>Kitchen Tablet next Alarm</summary>
    public SensorEntity KitchenTabletNextAlarm => new(_haContext, "sensor.kitchen_tablet_next_alarm");
    ///<summary>Kitchen Tablet next Reminder</summary>
    public SensorEntity KitchenTabletNextReminder => new(_haContext, "sensor.kitchen_tablet_next_reminder");
    ///<summary>Kitchen Tablet next Timer</summary>
    public SensorEntity KitchenTabletNextTimer => new(_haContext, "sensor.kitchen_tablet_next_timer");
    ///<summary>Leonard&apos;s 5th Fire next Alarm</summary>
    public SensorEntity LeonardS5thFireNextAlarm => new(_haContext, "sensor.leonard_s_5th_fire_next_alarm");
    ///<summary>Leonard&apos;s 5th Fire next Reminder</summary>
    public SensorEntity LeonardS5thFireNextReminder => new(_haContext, "sensor.leonard_s_5th_fire_next_reminder");
    ///<summary>Leonard&apos;s 5th Fire next Timer</summary>
    public SensorEntity LeonardS5thFireNextTimer => new(_haContext, "sensor.leonard_s_5th_fire_next_timer");
    ///<summary>LeonardPhone Battery state</summary>
    public SensorEntity LeonardphoneBatteryState => new(_haContext, "sensor.leonardphone_battery_state");
    ///<summary>LeonardPhone Charger type</summary>
    public SensorEntity LeonardphoneChargerType => new(_haContext, "sensor.leonardphone_charger_type");
    ///<summary>Living Room next Alarm</summary>
    public SensorEntity LivingRoomNextAlarm => new(_haContext, "sensor.living_room_next_alarm");
    ///<summary>Living Room next Reminder</summary>
    public SensorEntity LivingRoomNextReminder => new(_haContext, "sensor.living_room_next_reminder");
    ///<summary>Living Room next Timer</summary>
    public SensorEntity LivingRoomNextTimer => new(_haContext, "sensor.living_room_next_timer");
    ///<summary>Logan next Alarm</summary>
    public SensorEntity LoganNextAlarm => new(_haContext, "sensor.logan_next_alarm");
    ///<summary>Logan next Reminder</summary>
    public SensorEntity LoganNextReminder => new(_haContext, "sensor.logan_next_reminder");
    ///<summary>Logan next Timer</summary>
    public SensorEntity LoganNextTimer => new(_haContext, "sensor.logan_next_timer");
    ///<summary>Lyra FireTVStick next Alarm</summary>
    public SensorEntity LyraFiretvstickNextAlarm => new(_haContext, "sensor.lyra_firetvstick_next_alarm");
    ///<summary>Lyra FireTVStick next Reminder</summary>
    public SensorEntity LyraFiretvstickNextReminder => new(_haContext, "sensor.lyra_firetvstick_next_reminder");
    ///<summary>Lyra FireTVStick next Timer</summary>
    public SensorEntity LyraFiretvstickNextTimer => new(_haContext, "sensor.lyra_firetvstick_next_timer");
    ///<summary>Lyra next Alarm</summary>
    public SensorEntity LyraNextAlarm => new(_haContext, "sensor.lyra_next_alarm");
    ///<summary>Lyra next Reminder</summary>
    public SensorEntity LyraNextReminder => new(_haContext, "sensor.lyra_next_reminder");
    ///<summary>Lyra next Timer</summary>
    public SensorEntity LyraNextTimer => new(_haContext, "sensor.lyra_next_timer");
    ///<summary>Main Bedroom next Alarm</summary>
    public SensorEntity MainBedroomNextAlarm => new(_haContext, "sensor.main_bedroom_next_alarm");
    ///<summary>Main Bedroom next Reminder</summary>
    public SensorEntity MainBedroomNextReminder => new(_haContext, "sensor.main_bedroom_next_reminder");
    ///<summary>Main Bedroom next Timer</summary>
    public SensorEntity MainBedroomNextTimer => new(_haContext, "sensor.main_bedroom_next_timer");
    ///<summary>MFC-L8900CDW Status</summary>
    public SensorEntity MfcL8900cdwStatus => new(_haContext, "sensor.mfc_l8900cdw_status");
    ///<summary>Moon Phase</summary>
    public SensorEntity MoonPhase => new(_haContext, "sensor.moon_phase");
    ///<summary>My First Cam Gesture</summary>
    public SensorEntity MyFirstCamGesture => new(_haContext, "sensor.my_first_cam_gesture");
    ///<summary>Kitchen Lights Node status</summary>
    public SensorEntity Node10NodeStatus => new(_haContext, "sensor.node_10_node_status");
    ///<summary>Back Flood Node status</summary>
    public SensorEntity Node11NodeStatus => new(_haContext, "sensor.node_11_node_status");
    ///<summary>Upstairs Hall Node status</summary>
    public SensorEntity Node12NodeStatus => new(_haContext, "sensor.node_12_node_status");
    ///<summary>Craft Room Node status</summary>
    public SensorEntity Node14NodeStatus => new(_haContext, "sensor.node_14_node_status");
    ///<summary>Main Bedroom 4 in 1 Node status</summary>
    public SensorEntity Node15NodeStatus => new(_haContext, "sensor.node_15_node_status");
    ///<summary>Basement 1 Node status</summary>
    public SensorEntity Node16NodeStatus => new(_haContext, "sensor.node_16_node_status");
    ///<summary>Basement 2 Node status</summary>
    public SensorEntity Node17NodeStatus => new(_haContext, "sensor.node_17_node_status");
    ///<summary>Basement Work Node status</summary>
    public SensorEntity Node18NodeStatus => new(_haContext, "sensor.node_18_node_status");
    ///<summary>Dining Room Node status</summary>
    public SensorEntity Node19NodeStatus => new(_haContext, "sensor.node_19_node_status");
    ///<summary>Office Lights Node status</summary>
    public SensorEntity Node2NodeStatus => new(_haContext, "sensor.node_2_node_status");
    ///<summary>Living Room Buttons Node status</summary>
    public SensorEntity Node20NodeStatus => new(_haContext, "sensor.node_20_node_status");
    ///<summary>Living Room Buttons Timed out responses</summary>
    public SensorEntity Node20TimedOutResponses => new(_haContext, "sensor.node_20_timed_out_responses");
    ///<summary>Front Porch Node status</summary>
    public SensorEntity Node21NodeStatus => new(_haContext, "sensor.node_21_node_status");
    ///<summary>Garage Door 1 Tilt Node status</summary>
    public SensorEntity Node22NodeStatus => new(_haContext, "sensor.node_22_node_status");
    ///<summary>Garage Door 2 Tilt Node status</summary>
    public SensorEntity Node23NodeStatus => new(_haContext, "sensor.node_23_node_status");
    ///<summary>Back Hall Light Node status</summary>
    public SensorEntity Node24NodeStatus => new(_haContext, "sensor.node_24_node_status");
    ///<summary>Basement Motion Node status</summary>
    public SensorEntity Node26NodeStatus => new(_haContext, "sensor.node_26_node_status");
    ///<summary>Lounge Buttons Node status</summary>
    public SensorEntity Node27NodeStatus => new(_haContext, "sensor.node_27_node_status");
    ///<summary>Peacock Lamp Node status</summary>
    public SensorEntity Node28NodeStatus => new(_haContext, "sensor.node_28_node_status");
    ///<summary>Entry Light Node status</summary>
    public SensorEntity Node4NodeStatus => new(_haContext, "sensor.node_4_node_status");
    ///<summary>Front Room Node status</summary>
    public SensorEntity Node5NodeStatus => new(_haContext, "sensor.node_5_node_status");
    ///<summary>Office next Alarm</summary>
    public SensorEntity OfficeNextAlarm => new(_haContext, "sensor.office_next_alarm");
    ///<summary>Office next Reminder</summary>
    public SensorEntity OfficeNextReminder => new(_haContext, "sensor.office_next_reminder");
    ///<summary>Office next Timer</summary>
    public SensorEntity OfficeNextTimer => new(_haContext, "sensor.office_next_timer");
    ///<summary>RBR850 (Gateway) External IP</summary>
    public SensorEntity Rbr850GatewayExternalIp => new(_haContext, "sensor.rbr850_gateway_external_ip");
    ///<summary>Roku Ultra Active app</summary>
    public SensorEntity RokuUltraActiveApp => new(_haContext, "sensor.roku_ultra_active_app");
    ///<summary>Roku Ultra Active app ID</summary>
    public SensorEntity RokuUltraActiveAppId => new(_haContext, "sensor.roku_ultra_active_app_id");
    ///<summary>RT149699 Door Status</summary>
    public SensorEntity Rt149699DoorStatus => new(_haContext, "sensor.rt149699_door_status");
    ///<summary>RT149699 Fridge Model Info</summary>
    public SensorEntity Rt149699FridgeModelInfo => new(_haContext, "sensor.rt149699_fridge_model_info");
    ///<summary>RT149699 Ice Maker Bucket Status</summary>
    public SensorEntity Rt149699IceMakerBucketStatus => new(_haContext, "sensor.rt149699_ice_maker_bucket_status");
    ///<summary>RT149699 Ice Maker Bucket Status State Full Fridge</summary>
    public SensorEntity Rt149699IceMakerBucketStatusStateFullFridge => new(_haContext, "sensor.rt149699_ice_maker_bucket_status_state_full_fridge");
    ///<summary>RT149699 Water Filter Status</summary>
    public SensorEntity Rt149699WaterFilterStatus => new(_haContext, "sensor.rt149699_water_filter_status");
    ///<summary>RT7 TITAN 5G Battery state</summary>
    public SensorEntity Rt7Titan5gBatteryState2 => new(_haContext, "sensor.rt7_titan_5g_battery_state_2");
    ///<summary>RT7 TITAN 5G Charger type</summary>
    public SensorEntity Rt7Titan5gChargerType2 => new(_haContext, "sensor.rt7_titan_5g_charger_type_2");
    ///<summary>RT7 TITAN 5G fam Battery state</summary>
    public SensorEntity Rt7Titan5gFamBatteryState => new(_haContext, "sensor.rt7_titan_5g_fam_battery_state");
    ///<summary>RT7 TITAN 5G fam Charger type</summary>
    public SensorEntity Rt7Titan5gFamChargerType => new(_haContext, "sensor.rt7_titan_5g_fam_charger_type");
    ///<summary>Rachel Phone Battery state</summary>
    public SensorEntity SmF721uBatteryState => new(_haContext, "sensor.sm_f721u_battery_state");
    ///<summary>Rachel Phone Charger type</summary>
    public SensorEntity SmF721uChargerType => new(_haContext, "sensor.sm_f721u_charger_type");
    ///<summary>Sun Next dawn</summary>
    public SensorEntity SunNextDawn => new(_haContext, "sensor.sun_next_dawn");
    ///<summary>Sun Next dusk</summary>
    public SensorEntity SunNextDusk => new(_haContext, "sensor.sun_next_dusk");
    ///<summary>Sun Next midnight</summary>
    public SensorEntity SunNextMidnight => new(_haContext, "sensor.sun_next_midnight");
    ///<summary>Sun Next noon</summary>
    public SensorEntity SunNextNoon => new(_haContext, "sensor.sun_next_noon");
    ///<summary>Sun Next rising</summary>
    public SensorEntity SunNextRising => new(_haContext, "sensor.sun_next_rising");
    ///<summary>Sun Next setting</summary>
    public SensorEntity SunNextSetting => new(_haContext, "sensor.sun_next_setting");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm => new(_haContext, "sensor.this_device_next_alarm");
    ///<summary>This Device next Alarm</summary>
    public SensorEntity ThisDeviceNextAlarm2 => new(_haContext, "sensor.this_device_next_alarm_2");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder => new(_haContext, "sensor.this_device_next_reminder");
    ///<summary>This Device next Reminder</summary>
    public SensorEntity ThisDeviceNextReminder2 => new(_haContext, "sensor.this_device_next_reminder_2");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer => new(_haContext, "sensor.this_device_next_timer");
    ///<summary>This Device next Timer</summary>
    public SensorEntity ThisDeviceNextTimer2 => new(_haContext, "sensor.this_device_next_timer_2");
    ///<summary>Time</summary>
    public SensorEntity Time => new(_haContext, "sensor.time");
    ///<summary>Time &amp; Date</summary>
    public SensorEntity TimeDate => new(_haContext, "sensor.time_date");
    ///<summary>time_test</summary>
    public SensorEntity TimeTest => new(_haContext, "sensor.time_test");
    ///<summary>Time (UTC)</summary>
    public SensorEntity TimeUtc => new(_haContext, "sensor.time_utc");
    ///<summary>TV next Alarm</summary>
    public SensorEntity TvNextAlarm => new(_haContext, "sensor.tv_next_alarm");
    ///<summary>TV next Reminder</summary>
    public SensorEntity TvNextReminder => new(_haContext, "sensor.tv_next_reminder");
    ///<summary>TV next Timer</summary>
    public SensorEntity TvNextTimer => new(_haContext, "sensor.tv_next_timer");
    ///<summary>watchman_last_updated</summary>
    public SensorEntity WatchmanLastUpdated => new(_haContext, "sensor.watchman_last_updated");
    ///<summary>Aqara Smart Lock U100 Battery</summary>
    public NumericSensorEntity AqaraSmartLockU100Battery => new(_haContext, "sensor.aqara_smart_lock_u100_battery");
    ///<summary>Astroweather 10m Wind Speed</summary>
    public NumericSensorEntity Astroweather10mWindSpeed => new(_haContext, "sensor.astroweather_10m_wind_speed");
    ///<summary>Astroweather 2m Dewpoint</summary>
    public NumericSensorEntity Astroweather2mDewpoint => new(_haContext, "sensor.astroweather_2m_dewpoint");
    ///<summary>Astroweather 2m Relative Humidity</summary>
    public NumericSensorEntity Astroweather2mRelativeHumidity => new(_haContext, "sensor.astroweather_2m_relative_humidity");
    ///<summary>Astroweather 2m Temperature</summary>
    public NumericSensorEntity Astroweather2mTemperature => new(_haContext, "sensor.astroweather_2m_temperature");
    ///<summary>Astroweather Astronomical Night Duration</summary>
    public NumericSensorEntity AstroweatherAstronomicalNightDuration => new(_haContext, "sensor.astroweather_astronomical_night_duration");
    ///<summary>Astroweather Cloud Cover</summary>
    public NumericSensorEntity AstroweatherCloudCover => new(_haContext, "sensor.astroweather_cloud_cover");
    ///<summary>Astroweather Cloudless</summary>
    public NumericSensorEntity AstroweatherCloudless => new(_haContext, "sensor.astroweather_cloudless");
    ///<summary>Astroweather Clouds Area</summary>
    public NumericSensorEntity AstroweatherCloudsArea => new(_haContext, "sensor.astroweather_clouds_area");
    ///<summary>Astroweather Clouds Area High</summary>
    public NumericSensorEntity AstroweatherCloudsAreaHigh => new(_haContext, "sensor.astroweather_clouds_area_high");
    ///<summary>Astroweather Clouds Area Low</summary>
    public NumericSensorEntity AstroweatherCloudsAreaLow => new(_haContext, "sensor.astroweather_clouds_area_low");
    ///<summary>Astroweather Clouds Area Medium</summary>
    public NumericSensorEntity AstroweatherCloudsAreaMedium => new(_haContext, "sensor.astroweather_clouds_area_medium");
    ///<summary>Astroweather Condition</summary>
    public NumericSensorEntity AstroweatherCondition => new(_haContext, "sensor.astroweather_condition");
    ///<summary>Astroweather Deep Sky Darkness</summary>
    public NumericSensorEntity AstroweatherDeepSkyDarkness => new(_haContext, "sensor.astroweather_deep_sky_darkness");
    ///<summary>Astroweather Deepsky Forecast Today</summary>
    public NumericSensorEntity AstroweatherDeepskyForecastToday => new(_haContext, "sensor.astroweather_deepsky_forecast_today");
    ///<summary>Astroweather Deepsky Forecast Tomorrow</summary>
    public NumericSensorEntity AstroweatherDeepskyForecastTomorrow => new(_haContext, "sensor.astroweather_deepsky_forecast_tomorrow");
    ///<summary>Astroweather Elevation</summary>
    public NumericSensorEntity AstroweatherElevation => new(_haContext, "sensor.astroweather_elevation");
    ///<summary>Astroweather Fog Area</summary>
    public NumericSensorEntity AstroweatherFogArea => new(_haContext, "sensor.astroweather_fog_area");
    ///<summary>Astroweather Forecast Length</summary>
    public NumericSensorEntity AstroweatherForecastLength => new(_haContext, "sensor.astroweather_forecast_length");
    ///<summary>Astroweather Latitude</summary>
    public NumericSensorEntity AstroweatherLatitude => new(_haContext, "sensor.astroweather_latitude");
    ///<summary>Astroweather Lifted Index</summary>
    public NumericSensorEntity AstroweatherLiftedIndex => new(_haContext, "sensor.astroweather_lifted_index");
    ///<summary>Astroweather Longitude</summary>
    public NumericSensorEntity AstroweatherLongitude => new(_haContext, "sensor.astroweather_longitude");
    ///<summary>Astroweather Moon Altitude</summary>
    public NumericSensorEntity AstroweatherMoonAltitude => new(_haContext, "sensor.astroweather_moon_altitude");
    ///<summary>Astroweather Moon Azimuth</summary>
    public NumericSensorEntity AstroweatherMoonAzimuth => new(_haContext, "sensor.astroweather_moon_azimuth");
    ///<summary>Astroweather Moon Phase</summary>
    public NumericSensorEntity AstroweatherMoonPhase => new(_haContext, "sensor.astroweather_moon_phase");
    ///<summary>Astroweather Precipitation Amount</summary>
    public NumericSensorEntity AstroweatherPrecipitationAmount => new(_haContext, "sensor.astroweather_precipitation_amount");
    ///<summary>Astroweather Seeing</summary>
    public NumericSensorEntity AstroweatherSeeing => new(_haContext, "sensor.astroweather_seeing");
    ///<summary>Astroweather Sun Altitude</summary>
    public NumericSensorEntity AstroweatherSunAltitude => new(_haContext, "sensor.astroweather_sun_altitude");
    ///<summary>Astroweather Sun Azimuth</summary>
    public NumericSensorEntity AstroweatherSunAzimuth => new(_haContext, "sensor.astroweather_sun_azimuth");
    ///<summary>Astroweather Transparency</summary>
    public NumericSensorEntity AstroweatherTransparency => new(_haContext, "sensor.astroweather_transparency");
    ///<summary>AV339078N Laundry Washer Smart Dispense Loads Left</summary>
    public NumericSensorEntity Av339078nLaundryWasherSmartDispenseLoadsLeft => new(_haContext, "sensor.av339078n_laundry_washer_smart_dispense_loads_left");
    ///<summary>Back Door Contact Battery</summary>
    public NumericSensorEntity BackDoorContactBattery => new(_haContext, "sensor.back_door_contact_battery");
    ///<summary>Basement Average Brightness</summary>
    public NumericSensorEntity BasementAverageBrightness => new(_haContext, "sensor.basement_average_brightness");
    ///<summary>Basement Motion Battery level</summary>
    public NumericSensorEntity BasementMotionBatteryLevel => new(_haContext, "sensor.basement_motion_battery_level");
    ///<summary>Brother MFC-L8900CDW series BK</summary>
    public NumericSensorEntity BrotherMfcL8900cdwSeriesBk => new(_haContext, "sensor.brother_mfc_l8900cdw_series_bk");
    ///<summary>Brother MFC-L8900CDW series C</summary>
    public NumericSensorEntity BrotherMfcL8900cdwSeriesC => new(_haContext, "sensor.brother_mfc_l8900cdw_series_c");
    ///<summary>Brother MFC-L8900CDW series M</summary>
    public NumericSensorEntity BrotherMfcL8900cdwSeriesM => new(_haContext, "sensor.brother_mfc_l8900cdw_series_m");
    ///<summary>Brother MFC-L8900CDW series Y</summary>
    public NumericSensorEntity BrotherMfcL8900cdwSeriesY => new(_haContext, "sensor.brother_mfc_l8900cdw_series_y");
    ///<summary>Dining Zone all count</summary>
    public NumericSensorEntity DiningZoneAllCount => new(_haContext, "sensor.dining_zone_all_count");
    ///<summary>Dining Zone person count</summary>
    public NumericSensorEntity DiningZonePersonCount => new(_haContext, "sensor.dining_zone_person_count");
    ///<summary>Disk use (percent) /</summary>
    public NumericSensorEntity DiskUsePercent => new(_haContext, "sensor.disk_use_percent");
    ///<summary>DV102683G Laundry Dryer Sheet Inventory</summary>
    public NumericSensorEntity Dv102683gLaundryDryerSheetInventory => new(_haContext, "sensor.dv102683g_laundry_dryer_sheet_inventory");
    ///<summary>First Cam all count</summary>
    public NumericSensorEntity FirstCamAllCount => new(_haContext, "sensor.first_cam_all_count");
    ///<summary>First Cam car count</summary>
    public NumericSensorEntity FirstCamCarCount => new(_haContext, "sensor.first_cam_car_count");
    ///<summary>First Cam horse count</summary>
    public NumericSensorEntity FirstCamHorseCount => new(_haContext, "sensor.first_cam_horse_count");
    ///<summary>First Cam person count</summary>
    public NumericSensorEntity FirstCamPersonCount => new(_haContext, "sensor.first_cam_person_count");
    ///<summary>Front Door Contact Battery</summary>
    public NumericSensorEntity FrontDoorContactBattery => new(_haContext, "sensor.front_door_contact_battery");
    ///<summary>Front Door Zone all count</summary>
    public NumericSensorEntity FrontDoorZoneAllCount => new(_haContext, "sensor.front_door_zone_all_count");
    ///<summary>Front Door Zone person count</summary>
    public NumericSensorEntity FrontDoorZonePersonCount => new(_haContext, "sensor.front_door_zone_person_count");
    ///<summary>Garage 1 Contact Battery</summary>
    public NumericSensorEntity Garage1ContactBattery => new(_haContext, "sensor.garage_1_contact_battery");
    ///<summary>Garage 2 Contact Battery</summary>
    public NumericSensorEntity Garage2ContactBattery => new(_haContext, "sensor.garage_2_contact_battery");
    ///<summary>Garage Door 1 Tilt Battery level</summary>
    public NumericSensorEntity GarageDoor1TiltBatteryLevel => new(_haContext, "sensor.garage_door_1_tilt_battery_level");
    ///<summary>Garage Door 2 Tilt Battery level</summary>
    public NumericSensorEntity GarageDoor2TiltBatteryLevel => new(_haContext, "sensor.garage_door_2_tilt_battery_level");
    ///<summary>hacs</summary>
    public NumericSensorEntity Hacs => new(_haContext, "sensor.hacs");
    ///<summary>Inside Garage Door Contact Battery</summary>
    public NumericSensorEntity InsideGarageDoorContactBattery => new(_haContext, "sensor.inside_garage_door_contact_battery");
    ///<summary>Kitchen Walkway Zone all count</summary>
    public NumericSensorEntity KitchenWalkwayZoneAllCount => new(_haContext, "sensor.kitchen_walkway_zone_all_count");
    ///<summary>Kitchen Walkway Zone person count</summary>
    public NumericSensorEntity KitchenWalkwayZonePersonCount => new(_haContext, "sensor.kitchen_walkway_zone_person_count");
    ///<summary>Kitchen Zone all count</summary>
    public NumericSensorEntity KitchenZoneAllCount => new(_haContext, "sensor.kitchen_zone_all_count");
    ///<summary>Kitchen Zone person count</summary>
    public NumericSensorEntity KitchenZonePersonCount => new(_haContext, "sensor.kitchen_zone_person_count");
    ///<summary>KTHV Barometric Pressure</summary>
    public NumericSensorEntity KthvBarometricPressure => new(_haContext, "sensor.kthv_barometric_pressure");
    ///<summary>KTHV Relative Humidity</summary>
    public NumericSensorEntity KthvRelativeHumidity => new(_haContext, "sensor.kthv_relative_humidity");
    ///<summary>LeonardPhone Battery level</summary>
    public NumericSensorEntity LeonardphoneBatteryLevel => new(_haContext, "sensor.leonardphone_battery_level");
    ///<summary>Living Room Buttons Battery level</summary>
    public NumericSensorEntity LivingRoomButtonsBatteryLevel => new(_haContext, "sensor.living_room_buttons_battery_level");
    ///<summary>Lounge Buttons Battery level</summary>
    public NumericSensorEntity LoungeButtonsBatteryLevel => new(_haContext, "sensor.lounge_buttons_battery_level");
    ///<summary>Office Motion Battery</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Battery => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_battery");
    ///<summary>Basement Stair Motion Battery</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Battery2 => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_battery_2");
    ///<summary>Front Porch Motion Battery</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Battery3 => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_battery_3");
    ///<summary>Office Motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2DeviceTemperature => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_device_temperature");
    ///<summary>Basement Stair Motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2DeviceTemperature2 => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_device_temperature_2");
    ///<summary>Front Porch Motion Device temperature</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2DeviceTemperature3 => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_device_temperature_3");
    ///<summary>Office Motion Illuminance</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Illuminance => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_illuminance");
    ///<summary>Basement Stair Motion Illuminance</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Illuminance2 => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_illuminance_2");
    ///<summary>Front Porch Motion Illuminance</summary>
    public NumericSensorEntity LumiLumiSensorMotionAq2Illuminance3 => new(_haContext, "sensor.lumi_lumi_sensor_motion_aq2_illuminance_3");
    ///<summary>Main Bedroom 4 in 1 Air temperature</summary>
    public NumericSensorEntity MainBedroom4In1AirTemperature => new(_haContext, "sensor.main_bedroom_4_in_1_air_temperature");
    ///<summary>Main Bedroom 4 in 1 Battery level</summary>
    public NumericSensorEntity MainBedroom4In1BatteryLevel => new(_haContext, "sensor.main_bedroom_4_in_1_battery_level");
    ///<summary>Main Bedroom 4 in 1 Humidity</summary>
    public NumericSensorEntity MainBedroom4In1Humidity => new(_haContext, "sensor.main_bedroom_4_in_1_humidity");
    ///<summary>Main Bedroom 4 in 1 Illuminance</summary>
    public NumericSensorEntity MainBedroom4In1Illuminance => new(_haContext, "sensor.main_bedroom_4_in_1_illuminance");
    ///<summary>Main Bedroom Light 1 Power</summary>
    public NumericSensorEntity MainBedroomLight1Power => new(_haContext, "sensor.main_bedroom_light_1_power");
    ///<summary>Main Bedroom Light 2 Power</summary>
    public NumericSensorEntity MainBedroomLight2Power => new(_haContext, "sensor.main_bedroom_light_2_power");
    ///<summary>measure_tv_backlight</summary>
    public NumericSensorEntity MeasureTvBacklight => new(_haContext, "sensor.measure_tv_backlight");
    ///<summary>Memory use (percent)</summary>
    public NumericSensorEntity MemoryUsePercent => new(_haContext, "sensor.memory_use_percent");
    ///<summary>MFC-L8900CDW B/W pages</summary>
    public NumericSensorEntity MfcL8900cdwBWPages => new(_haContext, "sensor.mfc_l8900cdw_b_w_pages");
    ///<summary>MFC-L8900CDW Belt unit remaining lifetime</summary>
    public NumericSensorEntity MfcL8900cdwBeltUnitRemainingLifetime => new(_haContext, "sensor.mfc_l8900cdw_belt_unit_remaining_lifetime");
    ///<summary>MFC-L8900CDW Black toner remaining</summary>
    public NumericSensorEntity MfcL8900cdwBlackTonerRemaining => new(_haContext, "sensor.mfc_l8900cdw_black_toner_remaining");
    ///<summary>MFC-L8900CDW Color pages</summary>
    public NumericSensorEntity MfcL8900cdwColorPages => new(_haContext, "sensor.mfc_l8900cdw_color_pages");
    ///<summary>MFC-L8900CDW Cyan toner remaining</summary>
    public NumericSensorEntity MfcL8900cdwCyanTonerRemaining => new(_haContext, "sensor.mfc_l8900cdw_cyan_toner_remaining");
    ///<summary>MFC-L8900CDW Drum page counter</summary>
    public NumericSensorEntity MfcL8900cdwDrumPageCounter => new(_haContext, "sensor.mfc_l8900cdw_drum_page_counter");
    ///<summary>MFC-L8900CDW Drum remaining lifetime</summary>
    public NumericSensorEntity MfcL8900cdwDrumRemainingLifetime => new(_haContext, "sensor.mfc_l8900cdw_drum_remaining_lifetime");
    ///<summary>MFC-L8900CDW Drum remaining pages</summary>
    public NumericSensorEntity MfcL8900cdwDrumRemainingPages => new(_haContext, "sensor.mfc_l8900cdw_drum_remaining_pages");
    ///<summary>MFC-L8900CDW Duplex unit page counter</summary>
    public NumericSensorEntity MfcL8900cdwDuplexUnitPageCounter => new(_haContext, "sensor.mfc_l8900cdw_duplex_unit_page_counter");
    ///<summary>MFC-L8900CDW Fuser remaining lifetime</summary>
    public NumericSensorEntity MfcL8900cdwFuserRemainingLifetime => new(_haContext, "sensor.mfc_l8900cdw_fuser_remaining_lifetime");
    ///<summary>MFC-L8900CDW Laser remaining lifetime</summary>
    public NumericSensorEntity MfcL8900cdwLaserRemainingLifetime => new(_haContext, "sensor.mfc_l8900cdw_laser_remaining_lifetime");
    ///<summary>MFC-L8900CDW Magenta toner remaining</summary>
    public NumericSensorEntity MfcL8900cdwMagentaTonerRemaining => new(_haContext, "sensor.mfc_l8900cdw_magenta_toner_remaining");
    ///<summary>MFC-L8900CDW Page counter</summary>
    public NumericSensorEntity MfcL8900cdwPageCounter => new(_haContext, "sensor.mfc_l8900cdw_page_counter");
    ///<summary>MFC-L8900CDW PF Kit 1 remaining lifetime</summary>
    public NumericSensorEntity MfcL8900cdwPfKit1RemainingLifetime => new(_haContext, "sensor.mfc_l8900cdw_pf_kit_1_remaining_lifetime");
    ///<summary>MFC-L8900CDW PF Kit MP remaining lifetime</summary>
    public NumericSensorEntity MfcL8900cdwPfKitMpRemainingLifetime => new(_haContext, "sensor.mfc_l8900cdw_pf_kit_mp_remaining_lifetime");
    ///<summary>MFC-L8900CDW Yellow toner remaining</summary>
    public NumericSensorEntity MfcL8900cdwYellowTonerRemaining => new(_haContext, "sensor.mfc_l8900cdw_yellow_toner_remaining");
    ///<summary>Living Room Buttons Round Trip Time</summary>
    public NumericSensorEntity Node20RoundTripTime => new(_haContext, "sensor.node_20_round_trip_time");
    ///<summary>Office door Battery</summary>
    public NumericSensorEntity OfficeDoorBattery => new(_haContext, "sensor.office_door_battery");
    ///<summary>Pressure Change 12 hr</summary>
    public NumericSensorEntity PressureChange12Hr => new(_haContext, "sensor.pressure_change_12_hr");
    ///<summary>Pressure Change 24 hr</summary>
    public NumericSensorEntity PressureChange24Hr => new(_haContext, "sensor.pressure_change_24_hr");
    ///<summary>Pressure Change 4 hr</summary>
    public NumericSensorEntity PressureChange4Hr => new(_haContext, "sensor.pressure_change_4_hr");
    ///<summary>Pressure Change 8 hr</summary>
    public NumericSensorEntity PressureChange8Hr => new(_haContext, "sensor.pressure_change_8_hr");
    ///<summary>Processor temperature</summary>
    public NumericSensorEntity ProcessorTemperature => new(_haContext, "sensor.processor_temperature");
    ///<summary>Processor use</summary>
    public NumericSensorEntity ProcessorUse => new(_haContext, "sensor.processor_use");
    ///<summary>RBR850 (Gateway) Download speed</summary>
    public NumericSensorEntity Rbr850GatewayDownloadSpeed => new(_haContext, "sensor.rbr850_gateway_download_speed");
    ///<summary>RBR850 (Gateway) Upload speed</summary>
    public NumericSensorEntity Rbr850GatewayUploadSpeed => new(_haContext, "sensor.rbr850_gateway_upload_speed");
    ///<summary>RT149699 Current Temperature Freezer</summary>
    public NumericSensorEntity Rt149699CurrentTemperatureFreezer => new(_haContext, "sensor.rt149699_current_temperature_freezer");
    ///<summary>RT149699 Current Temperature Fridge</summary>
    public NumericSensorEntity Rt149699CurrentTemperatureFridge => new(_haContext, "sensor.rt149699_current_temperature_fridge");
    ///<summary>RT7 TITAN 5G Battery level</summary>
    public NumericSensorEntity Rt7Titan5gBatteryLevel2 => new(_haContext, "sensor.rt7_titan_5g_battery_level_2");
    ///<summary>RT7 TITAN 5G fam Battery level</summary>
    public NumericSensorEntity Rt7Titan5gFamBatteryLevel => new(_haContext, "sensor.rt7_titan_5g_fam_battery_level");
    ///<summary>ESP32 S3 Box Lite Uptime Sensor</summary>
    public NumericSensorEntity Second32UptimeSensor => new(_haContext, "sensor.second32_uptime_sensor");
    ///<summary>ESP32 S3 Box Lite WiFi Sensor</summary>
    public NumericSensorEntity Second32WifiSensor => new(_haContext, "sensor.second32_wifi_sensor");
    ///<summary>Rachel Phone Battery level</summary>
    public NumericSensorEntity SmF721uBatteryLevel => new(_haContext, "sensor.sm_f721u_battery_level");
    ///<summary>solaredge Consumed energy</summary>
    public NumericSensorEntity SolaredgeConsumptionEnergy => new(_haContext, "sensor.solaredge_consumption_energy");
    ///<summary>solaredge Current power</summary>
    public NumericSensorEntity SolaredgeCurrentPower => new(_haContext, "sensor.solaredge_current_power");
    ///<summary>solaredge Exported energy</summary>
    public NumericSensorEntity SolaredgeExportedEnergy => new(_haContext, "sensor.solaredge_exported_energy");
    ///<summary>solaredge Grid power</summary>
    public NumericSensorEntity SolaredgeGridPower => new(_haContext, "sensor.solaredge_grid_power");
    ///<summary>solaredge Imported energy</summary>
    public NumericSensorEntity SolaredgeImportedEnergy => new(_haContext, "sensor.solaredge_imported_energy");
    ///<summary>solaredge Lifetime energy</summary>
    public NumericSensorEntity SolaredgeLifetimeEnergy => new(_haContext, "sensor.solaredge_lifetime_energy");
    ///<summary>solaredge Power consumption</summary>
    public NumericSensorEntity SolaredgePowerConsumption => new(_haContext, "sensor.solaredge_power_consumption");
    ///<summary>solaredge Produced energy</summary>
    public NumericSensorEntity SolaredgeProductionEnergy => new(_haContext, "sensor.solaredge_production_energy");
    ///<summary>solaredge Self-consumed energy</summary>
    public NumericSensorEntity SolaredgeSelfconsumptionEnergy => new(_haContext, "sensor.solaredge_selfconsumption_energy");
    ///<summary>solaredge Solar power</summary>
    public NumericSensorEntity SolaredgeSolarPower => new(_haContext, "sensor.solaredge_solar_power");
    ///<summary>Swap use (percent)</summary>
    public NumericSensorEntity SwapUsePercent => new(_haContext, "sensor.swap_use_percent");
    ///<summary>test</summary>
    public NumericSensorEntity Test => new(_haContext, "sensor.test");
    ///<summary>watchman_missing_entities</summary>
    public NumericSensorEntity WatchmanMissingEntities => new(_haContext, "sensor.watchman_missing_entities");
    ///<summary>watchman_missing_services</summary>
    public NumericSensorEntity WatchmanMissingServices => new(_haContext, "sensor.watchman_missing_services");
    ///<summary>WiZ RGBW Tunable 79A59C Power</summary>
    public NumericSensorEntity WizRgbwTunable79a59cPower => new(_haContext, "sensor.wiz_rgbw_tunable_79a59c_power");
    ///<summary>WiZ RGBW Tunable 79AAB4 Power</summary>
    public NumericSensorEntity WizRgbwTunable79aab4Power => new(_haContext, "sensor.wiz_rgbw_tunable_79aab4_power");
    ///<summary>WiZ RGBW Tunable 8D7D54 Power</summary>
    public NumericSensorEntity WizRgbwTunable8d7d54Power => new(_haContext, "sensor.wiz_rgbw_tunable_8d7d54_power");
    ///<summary>Yi Cam1 all count</summary>
    public NumericSensorEntity YiCam1AllCount => new(_haContext, "sensor.yi_cam1_all_count");
    ///<summary>car count</summary>
    public NumericSensorEntity YiCam1CarCount => new(_haContext, "sensor.yi_cam1_car_count");
    ///<summary>Yi Cam1 person count</summary>
    public NumericSensorEntity YiCam1PersonCount => new(_haContext, "sensor.yi_cam1_person_count");
}

public partial class SttEntities
{
    private readonly IHaContext _haContext;
    public SttEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>faster-whisper</summary>
    public SttEntity FasterWhisper => new(_haContext, "stt.faster_whisper");
}

public partial class SunEntities
{
    private readonly IHaContext _haContext;
    public SunEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sun</summary>
    public SunEntity Sun => new(_haContext, "sun.sun");
}

public partial class SwitchEntities
{
    private readonly IHaContext _haContext;
    public SwitchEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Asher do not disturb switch</summary>
    public SwitchEntity AsherDoNotDisturbSwitch => new(_haContext, "switch.asher_do_not_disturb_switch");
    ///<summary>Asher repeat switch</summary>
    public SwitchEntity AsherRepeatSwitch => new(_haContext, "switch.asher_repeat_switch");
    ///<summary>Asher shuffle switch</summary>
    public SwitchEntity AsherShuffleSwitch => new(_haContext, "switch.asher_shuffle_switch");
    ///<summary>Back Flood</summary>
    public SwitchEntity BackFlood => new(_haContext, "switch.back_flood");
    ///<summary>Back Hall Light</summary>
    public SwitchEntity BackHallLight => new(_haContext, "switch.back_hall_light");
    ///<summary>Back Porch Light</summary>
    public SwitchEntity BackPorchLight => new(_haContext, "switch.back_porch_light");
    ///<summary>Basement Stair</summary>
    public SwitchEntity BasementStair => new(_haContext, "switch.basement_stair");
    ///<summary>Basement Stair Button 1 indication - Binary</summary>
    public SwitchEntity BasementStairButton1IndicationBinary => new(_haContext, "switch.basement_stair_button_1_indication_binary");
    ///<summary>Basement Stair Button 2 indication - Binary</summary>
    public SwitchEntity BasementStairButton2IndicationBinary => new(_haContext, "switch.basement_stair_button_2_indication_binary");
    ///<summary>Basement Stair Button 3 indication - Binary</summary>
    public SwitchEntity BasementStairButton3IndicationBinary => new(_haContext, "switch.basement_stair_button_3_indication_binary");
    ///<summary>Basement Stair Button 4 indication - Binary</summary>
    public SwitchEntity BasementStairButton4IndicationBinary => new(_haContext, "switch.basement_stair_button_4_indication_binary");
    ///<summary>Basement Stair Button 5 indication - Binary</summary>
    public SwitchEntity BasementStairButton5IndicationBinary => new(_haContext, "switch.basement_stair_button_5_indication_binary");
    ///<summary>Bypass challenge - Binary</summary>
    public SwitchEntity BasementStairBypassChallengeBinary => new(_haContext, "switch.basement_stair_bypass_challenge_binary");
    ///<summary>Basement Stair Node Identify - Binary</summary>
    public SwitchEntity BasementStairNodeIdentifyBinary => new(_haContext, "switch.basement_stair_node_identify_binary");
    ///<summary>Dad&apos;s Surface do not disturb switch</summary>
    public SwitchEntity DadSSurfaceDoNotDisturbSwitch => new(_haContext, "switch.dad_s_surface_do_not_disturb_switch");
    ///<summary>Dad&apos;s Surface repeat switch</summary>
    public SwitchEntity DadSSurfaceRepeatSwitch => new(_haContext, "switch.dad_s_surface_repeat_switch");
    ///<summary>Dad&apos;s Surface shuffle switch</summary>
    public SwitchEntity DadSSurfaceShuffleSwitch => new(_haContext, "switch.dad_s_surface_shuffle_switch");
    ///<summary>Dining Room</summary>
    public SwitchEntity DiningRoom => new(_haContext, "switch.dining_room");
    ///<summary>Dining Room Node Identify - Binary</summary>
    public SwitchEntity DiningRoomNodeIdentifyBinary => new(_haContext, "switch.dining_room_node_identify_binary");
    ///<summary>ESP32 S3 Box Lite Use wake word</summary>
    public SwitchEntity Esp32S3BoxLiteUseWakeWord => new(_haContext, "switch.esp32_s3_box_lite_use_wake_word");
    ///<summary>Everywhere do not disturb switch</summary>
    public SwitchEntity EverywhereDoNotDisturbSwitch => new(_haContext, "switch.everywhere_do_not_disturb_switch");
    ///<summary>Everywhere repeat switch</summary>
    public SwitchEntity EverywhereRepeatSwitch => new(_haContext, "switch.everywhere_repeat_switch");
    ///<summary>Everywhere shuffle switch</summary>
    public SwitchEntity EverywhereShuffleSwitch => new(_haContext, "switch.everywhere_shuffle_switch");
    ///<summary>First Cam Detect</summary>
    public SwitchEntity FirstCamDetect => new(_haContext, "switch.first_cam_detect");
    ///<summary>First Cam Motion</summary>
    public SwitchEntity FirstCamMotion => new(_haContext, "switch.first_cam_motion");
    ///<summary>First Cam Recordings</summary>
    public SwitchEntity FirstCamRecordings => new(_haContext, "switch.first_cam_recordings");
    ///<summary>First Cam Snapshots</summary>
    public SwitchEntity FirstCamSnapshots => new(_haContext, "switch.first_cam_snapshots");
    ///<summary>Garage Door Opener</summary>
    public SwitchEntity GarageDoorOpener => new(_haContext, "switch.garage_door_opener");
    ///<summary>Garage Door Opener (2)</summary>
    public SwitchEntity GarageDoorOpener2 => new(_haContext, "switch.garage_door_opener_2");
    ///<summary>Garage Door Opener (3)</summary>
    public SwitchEntity GarageDoorOpener3 => new(_haContext, "switch.garage_door_opener_3");
    ///<summary>Kitchen do not disturb switch</summary>
    public SwitchEntity KitchenDoNotDisturbSwitch => new(_haContext, "switch.kitchen_do_not_disturb_switch");
    ///<summary>Kitchen repeat switch</summary>
    public SwitchEntity KitchenRepeatSwitch => new(_haContext, "switch.kitchen_repeat_switch");
    ///<summary>Kitchen shuffle switch</summary>
    public SwitchEntity KitchenShuffleSwitch => new(_haContext, "switch.kitchen_shuffle_switch");
    ///<summary>Kitchen Tablet do not disturb switch</summary>
    public SwitchEntity KitchenTabletDoNotDisturbSwitch => new(_haContext, "switch.kitchen_tablet_do_not_disturb_switch");
    ///<summary>Kitchen Tablet repeat switch</summary>
    public SwitchEntity KitchenTabletRepeatSwitch => new(_haContext, "switch.kitchen_tablet_repeat_switch");
    ///<summary>Kitchen Tablet shuffle switch</summary>
    public SwitchEntity KitchenTabletShuffleSwitch => new(_haContext, "switch.kitchen_tablet_shuffle_switch");
    ///<summary>Leonard&apos;s 5th Fire do not disturb switch</summary>
    public SwitchEntity LeonardS5thFireDoNotDisturbSwitch => new(_haContext, "switch.leonard_s_5th_fire_do_not_disturb_switch");
    ///<summary>Living Room do not disturb switch</summary>
    public SwitchEntity LivingRoomDoNotDisturbSwitch => new(_haContext, "switch.living_room_do_not_disturb_switch");
    ///<summary>Living Room repeat switch</summary>
    public SwitchEntity LivingRoomRepeatSwitch => new(_haContext, "switch.living_room_repeat_switch");
    ///<summary>Living Room shuffle switch</summary>
    public SwitchEntity LivingRoomShuffleSwitch => new(_haContext, "switch.living_room_shuffle_switch");
    ///<summary>Logan do not disturb switch</summary>
    public SwitchEntity LoganDoNotDisturbSwitch => new(_haContext, "switch.logan_do_not_disturb_switch");
    ///<summary>Logan repeat switch</summary>
    public SwitchEntity LoganRepeatSwitch => new(_haContext, "switch.logan_repeat_switch");
    ///<summary>Logan shuffle switch</summary>
    public SwitchEntity LoganShuffleSwitch => new(_haContext, "switch.logan_shuffle_switch");
    ///<summary>Lyra do not disturb switch</summary>
    public SwitchEntity LyraDoNotDisturbSwitch => new(_haContext, "switch.lyra_do_not_disturb_switch");
    ///<summary>Lyra FireTVStick do not disturb switch</summary>
    public SwitchEntity LyraFiretvstickDoNotDisturbSwitch => new(_haContext, "switch.lyra_firetvstick_do_not_disturb_switch");
    ///<summary>Lyra repeat switch</summary>
    public SwitchEntity LyraRepeatSwitch => new(_haContext, "switch.lyra_repeat_switch");
    ///<summary>Lyra shuffle switch</summary>
    public SwitchEntity LyraShuffleSwitch => new(_haContext, "switch.lyra_shuffle_switch");
    ///<summary>Main Bedroom do not disturb switch</summary>
    public SwitchEntity MainBedroomDoNotDisturbSwitch => new(_haContext, "switch.main_bedroom_do_not_disturb_switch");
    ///<summary>Main Bedroom repeat switch</summary>
    public SwitchEntity MainBedroomRepeatSwitch => new(_haContext, "switch.main_bedroom_repeat_switch");
    ///<summary>Main Bedroom shuffle switch</summary>
    public SwitchEntity MainBedroomShuffleSwitch => new(_haContext, "switch.main_bedroom_shuffle_switch");
    ///<summary>Office do not disturb switch</summary>
    public SwitchEntity OfficeDoNotDisturbSwitch => new(_haContext, "switch.office_do_not_disturb_switch");
    ///<summary>Office Fan Switch</summary>
    public SwitchEntity OfficeFanSwitch => new(_haContext, "switch.office_fan_switch");
    ///<summary>Office repeat switch</summary>
    public SwitchEntity OfficeRepeatSwitch => new(_haContext, "switch.office_repeat_switch");
    ///<summary>Office shuffle switch</summary>
    public SwitchEntity OfficeShuffleSwitch => new(_haContext, "switch.office_shuffle_switch");
    ///<summary>Peacock Lamp</summary>
    public SwitchEntity PeacockLamp => new(_haContext, "switch.peacock_lamp");
    ///<summary>RT149699 Proximity Light</summary>
    public SwitchEntity Rt149699ProximityLight => new(_haContext, "switch.rt149699_proximity_light");
    ///<summary>RT149699 Sabbath Mode</summary>
    public SwitchEntity Rt149699SabbathMode => new(_haContext, "switch.rt149699_sabbath_mode");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch => new(_haContext, "switch.this_device_do_not_disturb_switch");
    ///<summary>This Device do not disturb switch</summary>
    public SwitchEntity ThisDeviceDoNotDisturbSwitch2 => new(_haContext, "switch.this_device_do_not_disturb_switch_2");
    ///<summary>TV do not disturb switch</summary>
    public SwitchEntity TvDoNotDisturbSwitch => new(_haContext, "switch.tv_do_not_disturb_switch");
    ///<summary>TV repeat switch</summary>
    public SwitchEntity TvRepeatSwitch => new(_haContext, "switch.tv_repeat_switch");
    ///<summary>TV shuffle switch</summary>
    public SwitchEntity TvShuffleSwitch => new(_haContext, "switch.tv_shuffle_switch");
    ///<summary>Yi Cam1 Detect</summary>
    public SwitchEntity YiCam1Detect => new(_haContext, "switch.yi_cam1_detect");
    ///<summary>Yi Cam1 Motion</summary>
    public SwitchEntity YiCam1Motion => new(_haContext, "switch.yi_cam1_motion");
    ///<summary>Yi Cam1 Recordings</summary>
    public SwitchEntity YiCam1Recordings => new(_haContext, "switch.yi_cam1_recordings");
    ///<summary>Yi Cam1 Snapshots</summary>
    public SwitchEntity YiCam1Snapshots => new(_haContext, "switch.yi_cam1_snapshots");
    ///<summary>yi_hack_a_0f0641_switch_ai_animal_detection</summary>
    public SwitchEntity YiHackA0f0641SwitchAiAnimalDetection => new(_haContext, "switch.yi_hack_a_0f0641_switch_ai_animal_detection");
    ///<summary>yi_hack_a_0f0641_switch_ai_human_detection</summary>
    public SwitchEntity YiHackA0f0641SwitchAiHumanDetection => new(_haContext, "switch.yi_hack_a_0f0641_switch_ai_human_detection");
    ///<summary>yi_hack_a_0f0641_switch_ai_vehicle_detection</summary>
    public SwitchEntity YiHackA0f0641SwitchAiVehicleDetection => new(_haContext, "switch.yi_hack_a_0f0641_switch_ai_vehicle_detection");
    ///<summary>yi_hack_a_0f0641_switch_ir</summary>
    public SwitchEntity YiHackA0f0641SwitchIr => new(_haContext, "switch.yi_hack_a_0f0641_switch_ir");
    ///<summary>yi_hack_a_0f0641_switch_led</summary>
    public SwitchEntity YiHackA0f0641SwitchLed => new(_haContext, "switch.yi_hack_a_0f0641_switch_led");
    ///<summary>yi_hack_a_0f0641_switch_motion_detection</summary>
    public SwitchEntity YiHackA0f0641SwitchMotionDetection => new(_haContext, "switch.yi_hack_a_0f0641_switch_motion_detection");
    ///<summary>yi_hack_a_0f0641_switch_rotate</summary>
    public SwitchEntity YiHackA0f0641SwitchRotate => new(_haContext, "switch.yi_hack_a_0f0641_switch_rotate");
    ///<summary>yi_hack_a_0f0641_switch_save_video_on_motion</summary>
    public SwitchEntity YiHackA0f0641SwitchSaveVideoOnMotion => new(_haContext, "switch.yi_hack_a_0f0641_switch_save_video_on_motion");
    ///<summary>yi_hack_a_0f0641_switch_sound_detection</summary>
    public SwitchEntity YiHackA0f0641SwitchSoundDetection => new(_haContext, "switch.yi_hack_a_0f0641_switch_sound_detection");
    ///<summary>yi_hack_a_0f0641_switch_switch_on</summary>
    public SwitchEntity YiHackA0f0641SwitchSwitchOn => new(_haContext, "switch.yi_hack_a_0f0641_switch_switch_on");
}

public partial class TodoEntities
{
    private readonly IHaContext _haContext;
    public TodoEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shopping List</summary>
    public TodoEntity ShoppingList => new(_haContext, "todo.shopping_list");
}

public partial class TtsEntities
{
    private readonly IHaContext _haContext;
    public TtsEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Google en com</summary>
    public TtsEntity GoogleEnCom => new(_haContext, "tts.google_en_com");
    ///<summary>piper</summary>
    public TtsEntity Piper => new(_haContext, "tts.piper");
}

public partial class UpdateEntities
{
    private readonly IHaContext _haContext;
    public UpdateEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Main Bedroom 4 in 1 Firmware</summary>
    public UpdateEntity _4In1SensorFirmware => new(_haContext, "update.4_in_1_sensor_firmware");
    ///<summary>Advanced SSH &amp; Web Terminal Update</summary>
    public UpdateEntity AdvancedSshWebTerminalUpdate => new(_haContext, "update.advanced_ssh_web_terminal_update");
    ///<summary>Back Flood Firmware</summary>
    public UpdateEntity BackFloodFirmware => new(_haContext, "update.back_flood_firmware");
    ///<summary>Back Hall Light Firmware</summary>
    public UpdateEntity BackHallLightFirmware => new(_haContext, "update.back_hall_light_firmware");
    ///<summary>Back Porch Light Firmware</summary>
    public UpdateEntity BackPorchLightFirmware => new(_haContext, "update.back_porch_light_firmware");
    ///<summary>Basement 1 Firmware</summary>
    public UpdateEntity Basement1Firmware => new(_haContext, "update.basement_1_firmware");
    ///<summary>Basement 2 Firmware</summary>
    public UpdateEntity Basement2Firmware => new(_haContext, "update.basement_2_firmware");
    ///<summary>Basement Motion Firmware</summary>
    public UpdateEntity BasementMotionFirmware => new(_haContext, "update.basement_motion_firmware");
    ///<summary>Basement Stair Firmware</summary>
    public UpdateEntity BasementStairFirmware => new(_haContext, "update.basement_stair_firmware");
    ///<summary>Basement Work Firmware</summary>
    public UpdateEntity BasementWorkFirmware => new(_haContext, "update.basement_work_firmware");
    ///<summary>Craft Room Firmware</summary>
    public UpdateEntity CraftRoomFirmware => new(_haContext, "update.craft_room_firmware");
    ///<summary>Dining Room Firmware</summary>
    public UpdateEntity DiningRoomFirmware => new(_haContext, "update.dining_room_firmware");
    ///<summary>Entry Light Firmware</summary>
    public UpdateEntity EntryLightFirmware => new(_haContext, "update.entry_light_firmware");
    ///<summary>ESPHome (beta) Update</summary>
    public UpdateEntity EsphomeBetaUpdate => new(_haContext, "update.esphome_beta_update");
    ///<summary>File editor Update</summary>
    public UpdateEntity FileEditorUpdate => new(_haContext, "update.file_editor_update");
    ///<summary>Frigate Server</summary>
    public UpdateEntity FrigateServer => new(_haContext, "update.frigate_server");
    ///<summary>Front Porch Firmware</summary>
    public UpdateEntity FrontPorchFirmware => new(_haContext, "update.front_porch_firmware");
    ///<summary>Front Room Firmware</summary>
    public UpdateEntity FrontRoomFirmware2 => new(_haContext, "update.front_room_firmware_2");
    ///<summary>Garage Door Opener Firmware</summary>
    public UpdateEntity GarageDoorOpenerFirmware => new(_haContext, "update.garage_door_opener_firmware");
    ///<summary>Home Assistant Core Update</summary>
    public UpdateEntity HomeAssistantCoreUpdate => new(_haContext, "update.home_assistant_core_update");
    ///<summary>Home Assistant Google Drive Backup Update</summary>
    public UpdateEntity HomeAssistantGoogleDriveBackupUpdate => new(_haContext, "update.home_assistant_google_drive_backup_update");
    ///<summary>Home Assistant Operating System Update</summary>
    public UpdateEntity HomeAssistantOperatingSystemUpdate => new(_haContext, "update.home_assistant_operating_system_update");
    ///<summary>Home Assistant Supervisor Update</summary>
    public UpdateEntity HomeAssistantSupervisorUpdate => new(_haContext, "update.home_assistant_supervisor_update");
    ///<summary>Kitchen Lights Firmware</summary>
    public UpdateEntity KitchenLightsFirmware => new(_haContext, "update.kitchen_lights_firmware");
    ///<summary>Matter Server Update</summary>
    public UpdateEntity MatterServerUpdate => new(_haContext, "update.matter_server_update");
    ///<summary>Mosquitto broker Update</summary>
    public UpdateEntity MosquittoBrokerUpdate => new(_haContext, "update.mosquitto_broker_update");
    ///<summary>openWakeWord Update</summary>
    public UpdateEntity OpenwakewordUpdate => new(_haContext, "update.openwakeword_update");
    ///<summary>Peacock Lamp Firmware</summary>
    public UpdateEntity PeacockLampFirmware => new(_haContext, "update.peacock_lamp_firmware");
    ///<summary>Piper Update</summary>
    public UpdateEntity PiperUpdate => new(_haContext, "update.piper_update");
    ///<summary>Samba share Update</summary>
    public UpdateEntity SambaShareUpdate => new(_haContext, "update.samba_share_update");
    ///<summary>Studio Code Server Update</summary>
    public UpdateEntity StudioCodeServerUpdate => new(_haContext, "update.studio_code_server_update");
    ///<summary>Upstairs Hall Firmware</summary>
    public UpdateEntity UpstairsHallFirmware => new(_haContext, "update.upstairs_hall_firmware");
    ///<summary>Whisper Update</summary>
    public UpdateEntity WhisperUpdate => new(_haContext, "update.whisper_update");
    ///<summary>Z-Wave JS UI Update</summary>
    public UpdateEntity ZWaveJsUiUpdate => new(_haContext, "update.z_wave_js_ui_update");
    ///<summary>Office Lights Firmware</summary>
    public UpdateEntity ZWavePlusS2DimmerLightSwitchFirmware => new(_haContext, "update.z_wave_plus_s2_dimmer_light_switch_firmware");
}

public partial class WakeWordEntities
{
    private readonly IHaContext _haContext;
    public WakeWordEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>openwakeword</summary>
    public WakeWordEntity Openwakeword => new(_haContext, "wake_word.openwakeword");
}

public partial class WaterHeaterEntities
{
    private readonly IHaContext _haContext;
    public WaterHeaterEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>RT149699 Freezer</summary>
    public WaterHeaterEntity Rt149699Freezer => new(_haContext, "water_heater.rt149699_freezer");
    ///<summary>RT149699 Fridge</summary>
    public WaterHeaterEntity Rt149699Fridge => new(_haContext, "water_heater.rt149699_fridge");
}

public partial class WeatherEntities
{
    private readonly IHaContext _haContext;
    public WeatherEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Astroweather 40.025963113959705_-76.76963388919832</summary>
    public WeatherEntity Astroweather400259631139597057676963388919832 => new(_haContext, "weather.astroweather_40_025963113959705_76_76963388919832");
    ///<summary>Forecast Home</summary>
    public WeatherEntity ForecastHome => new(_haContext, "weather.forecast_home");
    ///<summary>KTHV Daynight</summary>
    public WeatherEntity KthvDaynight => new(_haContext, "weather.kthv_daynight");
}

public partial class ZoneEntities
{
    private readonly IHaContext _haContext;
    public ZoneEntities(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Home</summary>
    public ZoneEntity Home => new(_haContext, "zone.home");
    ///<summary>Manchester shopping area</summary>
    public ZoneEntity ManchesterGiant => new(_haContext, "zone.manchester_giant");
    ///<summary>Berwyn Office</summary>
    public ZoneEntity Work => new(_haContext, "zone.work");
}

public partial record LightEntity : Entity<LightEntity, EntityState<LightAttributes>, LightAttributes>, ILightEntityCore
{
    public LightEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LightEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LightAttributes
{
    [JsonPropertyName("supported_color_modes")]
    public IReadOnlyList<string>? SupportedColorModes { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("color_mode")]
    public string? ColorMode { get; init; }

    [JsonPropertyName("min_color_temp_kelvin")]
    public double? MinColorTempKelvin { get; init; }

    [JsonPropertyName("max_color_temp_kelvin")]
    public double? MaxColorTempKelvin { get; init; }

    [JsonPropertyName("min_mireds")]
    public double? MinMireds { get; init; }

    [JsonPropertyName("max_mireds")]
    public double? MaxMireds { get; init; }

    [JsonPropertyName("brightness")]
    public double? Brightness { get; init; }

    [JsonPropertyName("color_temp_kelvin")]
    public object? ColorTempKelvin { get; init; }

    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    [JsonPropertyName("entity_id")]
    public IReadOnlyList<string>? EntityId { get; init; }

    [JsonPropertyName("effect_list")]
    public IReadOnlyList<string>? EffectList { get; init; }

    [JsonPropertyName("color")]
    public object? Color { get; init; }

    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    [JsonPropertyName("effect")]
    public object? Effect { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("off_with_transition")]
    public bool? OffWithTransition { get; init; }

    [JsonPropertyName("off_brightness")]
    public double? OffBrightness { get; init; }

    [JsonPropertyName("http_enabled")]
    public bool? HttpEnabled { get; init; }

    [JsonPropertyName("ble_enabled")]
    public bool? BleEnabled { get; init; }

    [JsonPropertyName("lan_enabled")]
    public bool? LanEnabled { get; init; }

    [JsonPropertyName("update_status")]
    public string? UpdateStatus { get; init; }

    [JsonPropertyName("timeout_count")]
    public double? TimeoutCount { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record MediaPlayerEntity : Entity<MediaPlayerEntity, EntityState<MediaPlayerAttributes>, MediaPlayerAttributes>, IMediaPlayerEntityCore
{
    public MediaPlayerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public MediaPlayerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record MediaPlayerAttributes
{
    [JsonPropertyName("app_id")]
    public string? AppId { get; init; }

    [JsonPropertyName("app_name")]
    public string? AppName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("entity_picture_local")]
    public string? EntityPictureLocal { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }

    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    [JsonPropertyName("media_duration")]
    public double? MediaDuration { get; init; }

    [JsonPropertyName("media_position")]
    public double? MediaPosition { get; init; }

    [JsonPropertyName("media_position_updated_at")]
    public string? MediaPositionUpdatedAt { get; init; }

    [JsonPropertyName("media_title")]
    public string? MediaTitle { get; init; }

    [JsonPropertyName("media_album_name")]
    public string? MediaAlbumName { get; init; }

    [JsonPropertyName("media_image_url")]
    public string? MediaImageUrl { get; init; }

    [JsonPropertyName("media_artist")]
    public string? MediaArtist { get; init; }

    [JsonPropertyName("sound_mode_list")]
    public IReadOnlyList<string>? SoundModeList { get; init; }

    [JsonPropertyName("media_track")]
    public object? MediaTrack { get; init; }

    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }

    [JsonPropertyName("repeat")]
    public string? Repeat { get; init; }

    [JsonPropertyName("source_list")]
    public IReadOnlyList<string>? SourceList { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("adb_response")]
    public object? AdbResponse { get; init; }

    [JsonPropertyName("hdmi_input")]
    public object? HdmiInput { get; init; }

    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }

    [JsonPropertyName("sound_mode_raw")]
    public string? SoundModeRaw { get; init; }

    [JsonPropertyName("available")]
    public bool? Available { get; init; }

    [JsonPropertyName("last_called")]
    public object? LastCalled { get; init; }

    [JsonPropertyName("last_called_timestamp")]
    public object? LastCalledTimestamp { get; init; }

    [JsonPropertyName("last_called_summary")]
    public object? LastCalledSummary { get; init; }

    [JsonPropertyName("connected_bluetooth")]
    public object? ConnectedBluetooth { get; init; }

    [JsonPropertyName("bluetooth_list")]
    public IReadOnlyList<string>? BluetoothList { get; init; }
}

public partial record AutomationEntity : Entity<AutomationEntity, EntityState<AutomationAttributes>, AutomationAttributes>, IAutomationEntityCore
{
    public AutomationEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public AutomationEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record AutomationAttributes
{
    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record BinarySensorEntity : Entity<BinarySensorEntity, EntityState<BinarySensorAttributes>, BinarySensorAttributes>, IBinarySensorEntityCore
{
    public BinarySensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public BinarySensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record BinarySensorAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    [JsonPropertyName("hysteresis")]
    public double? Hysteresis { get; init; }

    [JsonPropertyName("lower")]
    public double? Lower { get; init; }

    [JsonPropertyName("position")]
    public string? Position { get; init; }

    [JsonPropertyName("sensor_value")]
    public double? SensorValue { get; init; }

    [JsonPropertyName("type")]
    public string? Type { get; init; }

    [JsonPropertyName("upper")]
    public object? Upper { get; init; }

    [JsonPropertyName("migrated_to_cache")]
    public bool? MigratedToCache { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ButtonEntity : Entity<ButtonEntity, EntityState<ButtonAttributes>, ButtonAttributes>, IButtonEntityCore
{
    public ButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ButtonAttributes
{
    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record CameraEntity : Entity<CameraEntity, EntityState<CameraAttributes>, CameraAttributes>, ICameraEntityCore
{
    public CameraEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public CameraEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record CameraAttributes
{
    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("access_token")]
    public string? AccessToken { get; init; }

    [JsonPropertyName("brand")]
    public string? Brand { get; init; }

    [JsonPropertyName("frontend_stream_type")]
    public string? FrontendStreamType { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("motion_detection")]
    public bool? MotionDetection { get; init; }

    [JsonPropertyName("restream_type")]
    public string? RestreamType { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }
}

public partial record DeviceTrackerEntity : Entity<DeviceTrackerEntity, EntityState<DeviceTrackerAttributes>, DeviceTrackerAttributes>, IDeviceTrackerEntityCore
{
    public DeviceTrackerEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public DeviceTrackerEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record DeviceTrackerAttributes
{
    [JsonPropertyName("source_type")]
    public string? SourceType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("altitude")]
    public double? Altitude { get; init; }

    [JsonPropertyName("course")]
    public double? Course { get; init; }

    [JsonPropertyName("speed")]
    public double? Speed { get; init; }

    [JsonPropertyName("vertical_accuracy")]
    public double? VerticalAccuracy { get; init; }
}

public partial record EventEntity : Entity<EventEntity, EntityState<EventAttributes>, EventAttributes>
{
    public EventEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public EventEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record EventAttributes
{
    [JsonPropertyName("event_types")]
    public IReadOnlyList<string>? EventTypes { get; init; }

    [JsonPropertyName("event_type")]
    public string? EventType { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial record InputBooleanEntity : Entity<InputBooleanEntity, EntityState<InputBooleanAttributes>, InputBooleanAttributes>, IInputBooleanEntityCore
{
    public InputBooleanEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputBooleanEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputBooleanAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputButtonEntity : Entity<InputButtonEntity, EntityState<InputButtonAttributes>, InputButtonAttributes>, IInputButtonEntityCore
{
    public InputButtonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputButtonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputButtonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputSelectEntity : Entity<InputSelectEntity, EntityState<InputSelectAttributes>, InputSelectAttributes>, IInputSelectEntityCore
{
    public InputSelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputSelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputSelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record InputTextEntity : Entity<InputTextEntity, EntityState<InputTextAttributes>, InputTextAttributes>, IInputTextEntityCore
{
    public InputTextEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public InputTextEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record InputTextAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("pattern")]
    public object? Pattern { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record LockEntity : Entity<LockEntity, EntityState<LockAttributes>, LockAttributes>, ILockEntityCore
{
    public LockEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public LockEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record LockAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record NumberEntity : NumericEntity<NumberEntity, NumericEntityState<NumberAttributes>, NumberAttributes>, INumberEntityCore
{
    public NumberEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumberEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumberAttributes
{
    [JsonPropertyName("min")]
    public double? Min { get; init; }

    [JsonPropertyName("max")]
    public double? Max { get; init; }

    [JsonPropertyName("step")]
    public double? Step { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record PersonEntity : Entity<PersonEntity, EntityState<PersonAttributes>, PersonAttributes>, IPersonEntityCore
{
    public PersonEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public PersonEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record PersonAttributes
{
    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("id")]
    public string? Id { get; init; }

    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("gps_accuracy")]
    public double? GpsAccuracy { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("user_id")]
    public string? UserId { get; init; }

    [JsonPropertyName("device_trackers")]
    public IReadOnlyList<string>? DeviceTrackers { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record RemoteEntity : Entity<RemoteEntity, EntityState<RemoteAttributes>, RemoteAttributes>, IRemoteEntityCore
{
    public RemoteEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public RemoteEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record RemoteAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record ScriptEntity : Entity<ScriptEntity, EntityState<ScriptAttributes>, ScriptAttributes>, IScriptEntityCore
{
    public ScriptEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ScriptEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ScriptAttributes
{
    [JsonPropertyName("last_triggered")]
    public string? LastTriggered { get; init; }

    [JsonPropertyName("mode")]
    public string? Mode { get; init; }

    [JsonPropertyName("current")]
    public double? Current { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SelectEntity : Entity<SelectEntity, EntityState<SelectAttributes>, SelectAttributes>, ISelectEntityCore
{
    public SelectEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SelectEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SelectAttributes
{
    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record SensorEntity : Entity<SensorEntity, EntityState<SensorAttributes>, SensorAttributes>, ISensorEntityCore
{
    public SensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SensorAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("options")]
    public IReadOnlyList<string>? Options { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("person")]
    public string? Person { get; init; }

    [JsonPropertyName("gesture")]
    public string? Gesture { get; init; }

    [JsonPropertyName("recurrence")]
    public object? Recurrence { get; init; }

    [JsonPropertyName("process_timestamp")]
    public string? ProcessTimestamp { get; init; }

    [JsonPropertyName("prior_value")]
    public object? PriorValue { get; init; }

    [JsonPropertyName("total_active")]
    public double? TotalActive { get; init; }

    [JsonPropertyName("total_all")]
    public double? TotalAll { get; init; }

    [JsonPropertyName("sorted_active")]
    public string? SortedActive { get; init; }

    [JsonPropertyName("sorted_all")]
    public string? SortedAll { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("dismissed")]
    public object? Dismissed { get; init; }

    [JsonPropertyName("reminder")]
    public object? Reminder { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("info")]
    public string? Info { get; init; }

    [JsonPropertyName("serial")]
    public object? Serial { get; init; }

    [JsonPropertyName("location")]
    public string? Location { get; init; }

    [JsonPropertyName("state_message")]
    public object? StateMessage { get; init; }

    [JsonPropertyName("state_reason")]
    public object? StateReason { get; init; }

    [JsonPropertyName("command_set")]
    public string? CommandSet { get; init; }

    [JsonPropertyName("uri_supported")]
    public string? UriSupported { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("last_backup")]
    public string? LastBackup { get; init; }

    [JsonPropertyName("next_backup")]
    public string? NextBackup { get; init; }

    [JsonPropertyName("last_uploaded")]
    public string? LastUploaded { get; init; }

    [JsonPropertyName("backups_in_google_drive")]
    public double? BackupsInGoogleDrive { get; init; }

    [JsonPropertyName("backups_in_home_assistant")]
    public double? BackupsInHomeAssistant { get; init; }

    [JsonPropertyName("size_in_google_drive")]
    public string? SizeInGoogleDrive { get; init; }

    [JsonPropertyName("size_in_home_assistant")]
    public string? SizeInHomeAssistant { get; init; }

    [JsonPropertyName("backups")]
    public IReadOnlyList<object>? Backups { get; init; }

    [JsonPropertyName("free_space_in_google_drive")]
    public string? FreeSpaceInGoogleDrive { get; init; }
}

public partial record NumericSensorEntity : NumericEntity<NumericSensorEntity, NumericEntityState<NumericSensorAttributes>, NumericSensorAttributes>, ISensorEntityCore
{
    public NumericSensorEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public NumericSensorEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record NumericSensorAttributes
{
    [JsonPropertyName("state_class")]
    public string? StateClass { get; init; }

    [JsonPropertyName("unit_of_measurement")]
    public string? UnitOfMeasurement { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("source")]
    public string? Source { get; init; }

    [JsonPropertyName("battery_size")]
    public string? BatterySize { get; init; }

    [JsonPropertyName("battery_quantity")]
    public double? BatteryQuantity { get; init; }

    [JsonPropertyName("battery_voltage")]
    public double? BatteryVoltage { get; init; }

    [JsonPropertyName("entities")]
    public IReadOnlyList<object>? Entities { get; init; }

    [JsonPropertyName("status")]
    public string? Status { get; init; }

    [JsonPropertyName("flow")]
    public string? Flow { get; init; }

    [JsonPropertyName("date")]
    public string? Date { get; init; }

    [JsonPropertyName("repositories")]
    public IReadOnlyList<object>? Repositories { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("marker_high_level")]
    public double? MarkerHighLevel { get; init; }

    [JsonPropertyName("marker_low_level")]
    public double? MarkerLowLevel { get; init; }

    [JsonPropertyName("marker_type")]
    public string? MarkerType { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record SttEntity : Entity<SttEntity, EntityState<SttAttributes>, SttAttributes>
{
    public SttEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SttEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SttAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SunEntity : Entity<SunEntity, EntityState<SunAttributes>, SunAttributes>, ISunEntityCore
{
    public SunEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SunEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SunAttributes
{
    [JsonPropertyName("next_dawn")]
    public string? NextDawn { get; init; }

    [JsonPropertyName("next_dusk")]
    public string? NextDusk { get; init; }

    [JsonPropertyName("next_midnight")]
    public string? NextMidnight { get; init; }

    [JsonPropertyName("next_noon")]
    public string? NextNoon { get; init; }

    [JsonPropertyName("next_rising")]
    public string? NextRising { get; init; }

    [JsonPropertyName("next_setting")]
    public string? NextSetting { get; init; }

    [JsonPropertyName("elevation")]
    public double? Elevation { get; init; }

    [JsonPropertyName("azimuth")]
    public double? Azimuth { get; init; }

    [JsonPropertyName("rising")]
    public bool? Rising { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record SwitchEntity : Entity<SwitchEntity, EntityState<SwitchAttributes>, SwitchAttributes>, ISwitchEntityCore
{
    public SwitchEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public SwitchEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record SwitchAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("restored")]
    public bool? Restored { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TodoEntity : Entity<TodoEntity, EntityState<TodoAttributes>, TodoAttributes>
{
    public TodoEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TodoEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TodoAttributes
{
    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record TtsEntity : Entity<TtsEntity, EntityState<TtsAttributes>, TtsAttributes>
{
    public TtsEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public TtsEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record TtsAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record UpdateEntity : Entity<UpdateEntity, EntityState<UpdateAttributes>, UpdateAttributes>, IUpdateEntityCore
{
    public UpdateEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public UpdateEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record UpdateAttributes
{
    [JsonPropertyName("auto_update")]
    public bool? AutoUpdate { get; init; }

    [JsonPropertyName("installed_version")]
    public string? InstalledVersion { get; init; }

    [JsonPropertyName("in_progress")]
    public bool? InProgress { get; init; }

    [JsonPropertyName("latest_version")]
    public string? LatestVersion { get; init; }

    [JsonPropertyName("release_summary")]
    public string? ReleaseSummary { get; init; }

    [JsonPropertyName("release_url")]
    public string? ReleaseUrl { get; init; }

    [JsonPropertyName("skipped_version")]
    public object? SkippedVersion { get; init; }

    [JsonPropertyName("title")]
    public string? Title { get; init; }

    [JsonPropertyName("entity_picture")]
    public string? EntityPicture { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("device_class")]
    public string? DeviceClass { get; init; }
}

public partial record WakeWordEntity : Entity<WakeWordEntity, EntityState<WakeWordAttributes>, WakeWordAttributes>
{
    public WakeWordEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WakeWordEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WakeWordAttributes
{
    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public partial record WaterHeaterEntity : Entity<WaterHeaterEntity, EntityState<WaterHeaterAttributes>, WaterHeaterAttributes>
{
    public WaterHeaterEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WaterHeaterEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WaterHeaterAttributes
{
    [JsonPropertyName("min_temp")]
    public double? MinTemp { get; init; }

    [JsonPropertyName("max_temp")]
    public double? MaxTemp { get; init; }

    [JsonPropertyName("operation_list")]
    public IReadOnlyList<string>? OperationList { get; init; }

    [JsonPropertyName("current_temperature")]
    public double? CurrentTemperature { get; init; }

    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("target_temp_high")]
    public object? TargetTempHigh { get; init; }

    [JsonPropertyName("target_temp_low")]
    public object? TargetTempLow { get; init; }

    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }

    [JsonPropertyName("right_door")]
    public string? RightDoor { get; init; }

    [JsonPropertyName("left_door")]
    public string? LeftDoor { get; init; }

    [JsonPropertyName("drawer")]
    public string? Drawer { get; init; }

    [JsonPropertyName("door_status")]
    public string? DoorStatus { get; init; }

    [JsonPropertyName("ice_bucket")]
    public string? IceBucket { get; init; }

    [JsonPropertyName("ice_maker")]
    public string? IceMaker { get; init; }

    [JsonPropertyName("water_filter_status")]
    public string? WaterFilterStatus { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }
}

public partial record WeatherEntity : Entity<WeatherEntity, EntityState<WeatherAttributes>, WeatherAttributes>, IWeatherEntityCore
{
    public WeatherEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public WeatherEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record WeatherAttributes
{
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    [JsonPropertyName("dew_point")]
    public double? DewPoint { get; init; }

    [JsonPropertyName("temperature_unit")]
    public string? TemperatureUnit { get; init; }

    [JsonPropertyName("humidity")]
    public double? Humidity { get; init; }

    [JsonPropertyName("cloud_coverage")]
    public double? CloudCoverage { get; init; }

    [JsonPropertyName("pressure")]
    public double? Pressure { get; init; }

    [JsonPropertyName("pressure_unit")]
    public string? PressureUnit { get; init; }

    [JsonPropertyName("wind_bearing")]
    public object? WindBearing { get; init; }

    [JsonPropertyName("wind_speed")]
    public double? WindSpeed { get; init; }

    [JsonPropertyName("wind_speed_unit")]
    public string? WindSpeedUnit { get; init; }

    [JsonPropertyName("visibility_unit")]
    public string? VisibilityUnit { get; init; }

    [JsonPropertyName("precipitation_unit")]
    public string? PrecipitationUnit { get; init; }

    [JsonPropertyName("forecast")]
    public IReadOnlyList<object>? Forecast { get; init; }

    [JsonPropertyName("attribution")]
    public string? Attribution { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }

    [JsonPropertyName("supported_features")]
    public double? SupportedFeatures { get; init; }

    [JsonPropertyName("timestamp")]
    public string? Timestamp { get; init; }

    [JsonPropertyName("cloudcover_percentage")]
    public double? CloudcoverPercentage { get; init; }

    [JsonPropertyName("cloudless_percentage")]
    public double? CloudlessPercentage { get; init; }

    [JsonPropertyName("cloud_area_fraction")]
    public double? CloudAreaFraction { get; init; }

    [JsonPropertyName("cloud_area_fraction_high")]
    public double? CloudAreaFractionHigh { get; init; }

    [JsonPropertyName("cloud_area_fraction_medium")]
    public double? CloudAreaFractionMedium { get; init; }

    [JsonPropertyName("cloud_area_fraction_low")]
    public double? CloudAreaFractionLow { get; init; }

    [JsonPropertyName("fog_area_fraction")]
    public double? FogAreaFraction { get; init; }

    [JsonPropertyName("seeing_percentage")]
    public double? SeeingPercentage { get; init; }

    [JsonPropertyName("transparency_percentage")]
    public double? TransparencyPercentage { get; init; }

    [JsonPropertyName("lifted_index")]
    public double? LiftedIndex { get; init; }

    [JsonPropertyName("condition_percentage")]
    public double? ConditionPercentage { get; init; }

    [JsonPropertyName("condition_plain")]
    public string? ConditionPlain { get; init; }

    [JsonPropertyName("precipitation_amount")]
    public double? PrecipitationAmount { get; init; }

    [JsonPropertyName("deepsky_forecast_today_dayname")]
    public string? DeepskyForecastTodayDayname { get; init; }

    [JsonPropertyName("deepsky_forecast_today_plain")]
    public string? DeepskyForecastTodayPlain { get; init; }

    [JsonPropertyName("deepsky_forecast_today_desc")]
    public string? DeepskyForecastTodayDesc { get; init; }

    [JsonPropertyName("deepsky_forecast_tomorrow_dayname")]
    public string? DeepskyForecastTomorrowDayname { get; init; }

    [JsonPropertyName("deepsky_forecast_tomorrow_plain")]
    public string? DeepskyForecastTomorrowPlain { get; init; }

    [JsonPropertyName("deepsky_forecast_tomorrow_desc")]
    public string? DeepskyForecastTomorrowDesc { get; init; }

    [JsonPropertyName("sun_next_rising")]
    public string? SunNextRising { get; init; }

    [JsonPropertyName("sun_next_setting")]
    public string? SunNextSetting { get; init; }

    [JsonPropertyName("sun_next_rising_nautical")]
    public string? SunNextRisingNautical { get; init; }

    [JsonPropertyName("sun_next_setting_nautical")]
    public string? SunNextSettingNautical { get; init; }

    [JsonPropertyName("sun_next_rising_astro")]
    public string? SunNextRisingAstro { get; init; }

    [JsonPropertyName("sun_next_setting_astro")]
    public string? SunNextSettingAstro { get; init; }

    [JsonPropertyName("moon_next_rising")]
    public string? MoonNextRising { get; init; }

    [JsonPropertyName("moon_next_setting")]
    public string? MoonNextSetting { get; init; }

    [JsonPropertyName("moon_phase")]
    public double? MoonPhase { get; init; }

    [JsonPropertyName("moon_next_new_moon")]
    public string? MoonNextNewMoon { get; init; }

    [JsonPropertyName("deep_sky_darkness")]
    public double? DeepSkyDarkness { get; init; }

    [JsonPropertyName("visibility")]
    public double? Visibility { get; init; }
}

public partial record ZoneEntity : Entity<ZoneEntity, EntityState<ZoneAttributes>, ZoneAttributes>, IZoneEntityCore
{
    public ZoneEntity(IHaContext haContext, string entityId) : base(haContext, entityId)
    {
    }

    public ZoneEntity(IEntityCore entity) : base(entity)
    {
    }
}

public partial record ZoneAttributes
{
    [JsonPropertyName("latitude")]
    public double? Latitude { get; init; }

    [JsonPropertyName("longitude")]
    public double? Longitude { get; init; }

    [JsonPropertyName("radius")]
    public double? Radius { get; init; }

    [JsonPropertyName("passive")]
    public bool? Passive { get; init; }

    [JsonPropertyName("persons")]
    public IReadOnlyList<string>? Persons { get; init; }

    [JsonPropertyName("editable")]
    public bool? Editable { get; init; }

    [JsonPropertyName("icon")]
    public string? Icon { get; init; }

    [JsonPropertyName("friendly_name")]
    public string? FriendlyName { get; init; }
}

public interface IServices
{
    AlarmControlPanelServices AlarmControlPanel { get; }

    AlexaMediaServices AlexaMedia { get; }

    AutomationServices Automation { get; }

    ButtonServices Button { get; }

    CameraServices Camera { get; }

    CastServices Cast { get; }

    ClimateServices Climate { get; }

    CloudServices Cloud { get; }

    ConversationServices Conversation { get; }

    CounterServices Counter { get; }

    CoverServices Cover { get; }

    DeviceTrackerServices DeviceTracker { get; }

    FanServices Fan { get; }

    FfmpegServices Ffmpeg { get; }

    FrigateServices Frigate { get; }

    FrontendServices Frontend { get; }

    GeHomeServices GeHome { get; }

    GroupServices Group { get; }

    HassioServices Hassio { get; }

    HomeassistantServices Homeassistant { get; }

    HumidifierServices Humidifier { get; }

    InputBooleanServices InputBoolean { get; }

    InputButtonServices InputButton { get; }

    InputDatetimeServices InputDatetime { get; }

    InputNumberServices InputNumber { get; }

    InputSelectServices InputSelect { get; }

    InputTextServices InputText { get; }

    IntentScriptServices IntentScript { get; }

    LawnMowerServices LawnMower { get; }

    LightServices Light { get; }

    LockServices Lock { get; }

    LogbookServices Logbook { get; }

    LoggerServices Logger { get; }

    MatterServices Matter { get; }

    MediaPlayerServices MediaPlayer { get; }

    MqttServices Mqtt { get; }

    NetdaemonServices Netdaemon { get; }

    NotifyServices Notify { get; }

    NumberServices Number { get; }

    PersistentNotificationServices PersistentNotification { get; }

    PersonServices Person { get; }

    RecorderServices Recorder { get; }

    RemoteServices Remote { get; }

    RokuServices Roku { get; }

    SceneServices Scene { get; }

    ScheduleServices Schedule { get; }

    ScriptServices Script { get; }

    SelectServices Select { get; }

    ShoppingListServices ShoppingList { get; }

    SirenServices Siren { get; }

    SwitchServices Switch { get; }

    SystemLogServices SystemLog { get; }

    TemplateServices Template { get; }

    TextServices Text { get; }

    TimerServices Timer { get; }

    TodoServices Todo { get; }

    TtsServices Tts { get; }

    UpdateServices Update { get; }

    VacuumServices Vacuum { get; }

    WatchmanServices Watchman { get; }

    WaterHeaterServices WaterHeater { get; }

    WeatherServices Weather { get; }

    YiHackServices YiHack { get; }

    ZhaServices Zha { get; }

    ZoneServices Zone { get; }

    ZwaveJsServices ZwaveJs { get; }
}

public partial class Services : IServices
{
    private readonly IHaContext _haContext;
    public Services(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public AlarmControlPanelServices AlarmControlPanel => new(_haContext);
    public AlexaMediaServices AlexaMedia => new(_haContext);
    public AutomationServices Automation => new(_haContext);
    public ButtonServices Button => new(_haContext);
    public CameraServices Camera => new(_haContext);
    public CastServices Cast => new(_haContext);
    public ClimateServices Climate => new(_haContext);
    public CloudServices Cloud => new(_haContext);
    public ConversationServices Conversation => new(_haContext);
    public CounterServices Counter => new(_haContext);
    public CoverServices Cover => new(_haContext);
    public DeviceTrackerServices DeviceTracker => new(_haContext);
    public FanServices Fan => new(_haContext);
    public FfmpegServices Ffmpeg => new(_haContext);
    public FrigateServices Frigate => new(_haContext);
    public FrontendServices Frontend => new(_haContext);
    public GeHomeServices GeHome => new(_haContext);
    public GroupServices Group => new(_haContext);
    public HassioServices Hassio => new(_haContext);
    public HomeassistantServices Homeassistant => new(_haContext);
    public HumidifierServices Humidifier => new(_haContext);
    public InputBooleanServices InputBoolean => new(_haContext);
    public InputButtonServices InputButton => new(_haContext);
    public InputDatetimeServices InputDatetime => new(_haContext);
    public InputNumberServices InputNumber => new(_haContext);
    public InputSelectServices InputSelect => new(_haContext);
    public InputTextServices InputText => new(_haContext);
    public IntentScriptServices IntentScript => new(_haContext);
    public LawnMowerServices LawnMower => new(_haContext);
    public LightServices Light => new(_haContext);
    public LockServices Lock => new(_haContext);
    public LogbookServices Logbook => new(_haContext);
    public LoggerServices Logger => new(_haContext);
    public MatterServices Matter => new(_haContext);
    public MediaPlayerServices MediaPlayer => new(_haContext);
    public MqttServices Mqtt => new(_haContext);
    public NetdaemonServices Netdaemon => new(_haContext);
    public NotifyServices Notify => new(_haContext);
    public NumberServices Number => new(_haContext);
    public PersistentNotificationServices PersistentNotification => new(_haContext);
    public PersonServices Person => new(_haContext);
    public RecorderServices Recorder => new(_haContext);
    public RemoteServices Remote => new(_haContext);
    public RokuServices Roku => new(_haContext);
    public SceneServices Scene => new(_haContext);
    public ScheduleServices Schedule => new(_haContext);
    public ScriptServices Script => new(_haContext);
    public SelectServices Select => new(_haContext);
    public ShoppingListServices ShoppingList => new(_haContext);
    public SirenServices Siren => new(_haContext);
    public SwitchServices Switch => new(_haContext);
    public SystemLogServices SystemLog => new(_haContext);
    public TemplateServices Template => new(_haContext);
    public TextServices Text => new(_haContext);
    public TimerServices Timer => new(_haContext);
    public TodoServices Todo => new(_haContext);
    public TtsServices Tts => new(_haContext);
    public UpdateServices Update => new(_haContext);
    public VacuumServices Vacuum => new(_haContext);
    public WatchmanServices Watchman => new(_haContext);
    public WaterHeaterServices WaterHeater => new(_haContext);
    public WeatherServices Weather => new(_haContext);
    public YiHackServices YiHack => new(_haContext);
    public ZhaServices Zha => new(_haContext);
    public ZoneServices Zone => new(_haContext);
    public ZwaveJsServices ZwaveJs => new(_haContext);
}

public partial class AlarmControlPanelServices
{
    private readonly IHaContext _haContext;
    public AlarmControlPanelServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmAway(ServiceTarget target, AlarmControlPanelAlarmArmAwayParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, data);
    }

    ///<summary>Sets the alarm to: _armed, no one home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmAway(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_away", target, new AlarmControlPanelAlarmArmAwayParameters { Code = code });
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmCustomBypass(ServiceTarget target, AlarmControlPanelAlarmArmCustomBypassParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, data);
    }

    ///<summary>Arms the alarm while allowing to bypass a custom area.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmCustomBypass(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_custom_bypass", target, new AlarmControlPanelAlarmArmCustomBypassParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmHome(ServiceTarget target, AlarmControlPanelAlarmArmHomeParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, data);
    }

    ///<summary>Sets the alarm to: _armed, but someone is home_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmHome(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_home", target, new AlarmControlPanelAlarmArmHomeParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmNight(ServiceTarget target, AlarmControlPanelAlarmArmNightParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, data);
    }

    ///<summary>Sets the alarm to: _armed for the night_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmNight(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_night", target, new AlarmControlPanelAlarmArmNightParameters { Code = code });
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmArmVacation(ServiceTarget target, AlarmControlPanelAlarmArmVacationParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, data);
    }

    ///<summary>Sets the alarm to: _armed for vacation_.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmArmVacation(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_arm_vacation", target, new AlarmControlPanelAlarmArmVacationParameters { Code = code });
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmDisarm(ServiceTarget target, AlarmControlPanelAlarmDisarmParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, data);
    }

    ///<summary>Disarms the alarm.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to disarm the alarm. eg: 1234</param>
    public void AlarmDisarm(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_disarm", target, new AlarmControlPanelAlarmDisarmParameters { Code = code });
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    public void AlarmTrigger(ServiceTarget target, AlarmControlPanelAlarmTriggerParameters data)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, data);
    }

    ///<summary>Enables an external alarm trigger.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code to arm the alarm. eg: 1234</param>
    public void AlarmTrigger(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("alarm_control_panel", "alarm_trigger", target, new AlarmControlPanelAlarmTriggerParameters { Code = code });
    }
}

public partial record AlarmControlPanelAlarmArmAwayParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmCustomBypassParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmHomeParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmNightParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmArmVacationParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmDisarmParameters
{
    ///<summary>Code to disarm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record AlarmControlPanelAlarmTriggerParameters
{
    ///<summary>Code to arm the alarm. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class AlexaMediaServices
{
    private readonly IHaContext _haContext;
    public AlexaMediaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clear last entries from Alexa Voice history for each Alexa account.</summary>
    public void ClearHistory(AlexaMediaClearHistoryParameters data)
    {
        _haContext.CallService("alexa_media", "clear_history", null, data);
    }

    ///<summary>Clear last entries from Alexa Voice history for each Alexa account.</summary>
    ///<param name="email">Accounts to clear. Empty will clear all. eg: my_email@alexa.com</param>
    ///<param name="entries">Number of entries to clear from 1 to 50. If empty, clear 50. eg: 50</param>
    public void ClearHistory(object? email = null, object? entries = null)
    {
        _haContext.CallService("alexa_media", "clear_history", null, new AlexaMediaClearHistoryParameters { Email = email, Entries = entries });
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    public void ForceLogout(AlexaMediaForceLogoutParameters data)
    {
        _haContext.CallService("alexa_media", "force_logout", null, data);
    }

    ///<summary>Force account to logout. Used mainly for debugging.</summary>
    ///<param name="email">Accounts to clear. Empty will clear all. eg: my_email@alexa.com</param>
    public void ForceLogout(object? email = null)
    {
        _haContext.CallService("alexa_media", "force_logout", null, new AlexaMediaForceLogoutParameters { Email = email });
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    public void UpdateLastCalled(AlexaMediaUpdateLastCalledParameters data)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, data);
    }

    ///<summary>Forces update of last_called echo device for each Alexa account.</summary>
    ///<param name="email">List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</param>
    public void UpdateLastCalled(object? email = null)
    {
        _haContext.CallService("alexa_media", "update_last_called", null, new AlexaMediaUpdateLastCalledParameters { Email = email });
    }
}

public partial record AlexaMediaClearHistoryParameters
{
    ///<summary>Accounts to clear. Empty will clear all. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }

    ///<summary>Number of entries to clear from 1 to 50. If empty, clear 50. eg: 50</summary>
    [JsonPropertyName("entries")]
    public object? Entries { get; init; }
}

public partial record AlexaMediaForceLogoutParameters
{
    ///<summary>Accounts to clear. Empty will clear all. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial record AlexaMediaUpdateLastCalledParameters
{
    ///<summary>List of Alexa accounts to update. If empty, will update all known accounts. eg: my_email@alexa.com</summary>
    [JsonPropertyName("email")]
    public object? Email { get; init; }
}

public partial class AutomationServices
{
    private readonly IHaContext _haContext;
    public AutomationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the automation configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("automation", "reload", null);
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("automation", "toggle", target);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void Trigger(ServiceTarget target, AutomationTriggerParameters data)
    {
        _haContext.CallService("automation", "trigger", target, data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public void Trigger(ServiceTarget target, bool? skipCondition = null)
    {
        _haContext.CallService("automation", "trigger", target, new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, AutomationTurnOffParameters data)
    {
        _haContext.CallService("automation", "turn_off", target, data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public void TurnOff(ServiceTarget target, bool? stopActions = null)
    {
        _haContext.CallService("automation", "turn_off", target, new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("automation", "turn_on", target);
    }
}

public partial record AutomationTriggerParameters
{
    ///<summary>Defines whether or not the conditions will be skipped.</summary>
    [JsonPropertyName("skip_condition")]
    public bool? SkipCondition { get; init; }
}

public partial record AutomationTurnOffParameters
{
    ///<summary>Stops currently running actions.</summary>
    [JsonPropertyName("stop_actions")]
    public bool? StopActions { get; init; }
}

public partial class ButtonServices
{
    private readonly IHaContext _haContext;
    public ButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Press the button entity.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("button", "press", target);
    }
}

public partial class CameraServices
{
    private readonly IHaContext _haContext;
    public CameraServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Disables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "disable_motion_detection", target);
    }

    ///<summary>Enables the motion detection.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableMotionDetection(ServiceTarget target)
    {
        _haContext.CallService("camera", "enable_motion_detection", target);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayStream(ServiceTarget target, CameraPlayStreamParameters data)
    {
        _haContext.CallService("camera", "play_stream", target, data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public void PlayStream(ServiceTarget target, string mediaPlayer, object? format = null)
    {
        _haContext.CallService("camera", "play_stream", target, new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Record(ServiceTarget target, CameraRecordParameters data)
    {
        _haContext.CallService("camera", "record", target, data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public void Record(ServiceTarget target, string filename, long? duration = null, long? lookback = null)
    {
        _haContext.CallService("camera", "record", target, new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void Snapshot(ServiceTarget target, CameraSnapshotParameters data)
    {
        _haContext.CallService("camera", "snapshot", target, data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public void Snapshot(ServiceTarget target, string filename)
    {
        _haContext.CallService("camera", "snapshot", target, new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_off", target);
    }

    ///<summary>Turns on the camera.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("camera", "turn_on", target);
    }
}

public partial record CameraPlayStreamParameters
{
    ///<summary>Media players to stream to.</summary>
    [JsonPropertyName("media_player")]
    public string? MediaPlayer { get; init; }

    ///<summary>Stream format supported by the media player.</summary>
    [JsonPropertyName("format")]
    public object? Format { get; init; }
}

public partial record CameraRecordParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }

    ///<summary>Planned duration of the recording. The actual duration may vary.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</summary>
    [JsonPropertyName("lookback")]
    public long? Lookback { get; init; }
}

public partial record CameraSnapshotParameters
{
    ///<summary>Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</summary>
    [JsonPropertyName("filename")]
    public string? Filename { get; init; }
}

public partial class CastServices
{
    private readonly IHaContext _haContext;
    public CastServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    public void ShowLovelaceView(CastShowLovelaceViewParameters data)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, data);
    }

    ///<summary>Shows a dashboard view on a Chromecast device.</summary>
    ///<param name="entityId">Media player entity to show the dashboard view on.</param>
    ///<param name="dashboardPath">The URL path of the dashboard to show. eg: lovelace-cast</param>
    ///<param name="viewPath">The path of the dashboard view to show. eg: downstairs</param>
    public void ShowLovelaceView(string entityId, string dashboardPath, string? viewPath = null)
    {
        _haContext.CallService("cast", "show_lovelace_view", null, new CastShowLovelaceViewParameters { EntityId = entityId, DashboardPath = dashboardPath, ViewPath = viewPath });
    }
}

public partial record CastShowLovelaceViewParameters
{
    ///<summary>Media player entity to show the dashboard view on.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>The URL path of the dashboard to show. eg: lovelace-cast</summary>
    [JsonPropertyName("dashboard_path")]
    public string? DashboardPath { get; init; }

    ///<summary>The path of the dashboard view to show. eg: downstairs</summary>
    [JsonPropertyName("view_path")]
    public string? ViewPath { get; init; }
}

public partial class ClimateServices
{
    private readonly IHaContext _haContext;
    public ClimateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAuxHeat(ServiceTarget target, ClimateSetAuxHeatParameters data)
    {
        _haContext.CallService("climate", "set_aux_heat", target, data);
    }

    ///<summary>Turns auxiliary heater on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="auxHeat">New value of auxiliary heater.</param>
    public void SetAuxHeat(ServiceTarget target, bool auxHeat)
    {
        _haContext.CallService("climate", "set_aux_heat", target, new ClimateSetAuxHeatParameters { AuxHeat = auxHeat });
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanMode(ServiceTarget target, ClimateSetFanModeParameters data)
    {
        _haContext.CallService("climate", "set_fan_mode", target, data);
    }

    ///<summary>Sets fan operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanMode">Fan operation mode. eg: low</param>
    public void SetFanMode(ServiceTarget target, string fanMode)
    {
        _haContext.CallService("climate", "set_fan_mode", target, new ClimateSetFanModeParameters { FanMode = fanMode });
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, ClimateSetHumidityParameters data)
    {
        _haContext.CallService("climate", "set_humidity", target, data);
    }

    ///<summary>Sets target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("climate", "set_humidity", target, new ClimateSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHvacMode(ServiceTarget target, ClimateSetHvacModeParameters data)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, data);
    }

    ///<summary>Sets HVAC operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetHvacMode(ServiceTarget target, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_hvac_mode", target, new ClimateSetHvacModeParameters { HvacMode = hvacMode });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, ClimateSetPresetModeParameters data)
    {
        _haContext.CallService("climate", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: away</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("climate", "set_preset_mode", target, new ClimateSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetSwingMode(ServiceTarget target, ClimateSetSwingModeParameters data)
    {
        _haContext.CallService("climate", "set_swing_mode", target, data);
    }

    ///<summary>Sets swing operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="swingMode">Swing operation mode. eg: horizontal</param>
    public void SetSwingMode(ServiceTarget target, string swingMode)
    {
        _haContext.CallService("climate", "set_swing_mode", target, new ClimateSetSwingModeParameters { SwingMode = swingMode });
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, ClimateSetTemperatureParameters data)
    {
        _haContext.CallService("climate", "set_temperature", target, data);
    }

    ///<summary>Sets target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">Target temperature.</param>
    ///<param name="targetTempHigh">High target temperature.</param>
    ///<param name="targetTempLow">Low target temperature.</param>
    ///<param name="hvacMode">HVAC operation mode.</param>
    public void SetTemperature(ServiceTarget target, double? temperature = null, double? targetTempHigh = null, double? targetTempLow = null, object? hvacMode = null)
    {
        _haContext.CallService("climate", "set_temperature", target, new ClimateSetTemperatureParameters { Temperature = temperature, TargetTempHigh = targetTempHigh, TargetTempLow = targetTempLow, HvacMode = hvacMode });
    }

    ///<summary>Turns climate device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_off", target);
    }

    ///<summary>Turns climate device on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("climate", "turn_on", target);
    }
}

public partial record ClimateSetAuxHeatParameters
{
    ///<summary>New value of auxiliary heater.</summary>
    [JsonPropertyName("aux_heat")]
    public bool? AuxHeat { get; init; }
}

public partial record ClimateSetFanModeParameters
{
    ///<summary>Fan operation mode. eg: low</summary>
    [JsonPropertyName("fan_mode")]
    public string? FanMode { get; init; }
}

public partial record ClimateSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record ClimateSetHvacModeParameters
{
    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial record ClimateSetPresetModeParameters
{
    ///<summary>Preset mode. eg: away</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record ClimateSetSwingModeParameters
{
    ///<summary>Swing operation mode. eg: horizontal</summary>
    [JsonPropertyName("swing_mode")]
    public string? SwingMode { get; init; }
}

public partial record ClimateSetTemperatureParameters
{
    ///<summary>Target temperature.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>High target temperature.</summary>
    [JsonPropertyName("target_temp_high")]
    public double? TargetTempHigh { get; init; }

    ///<summary>Low target temperature.</summary>
    [JsonPropertyName("target_temp_low")]
    public double? TargetTempLow { get; init; }

    ///<summary>HVAC operation mode.</summary>
    [JsonPropertyName("hvac_mode")]
    public object? HvacMode { get; init; }
}

public partial class CloudServices
{
    private readonly IHaContext _haContext;
    public CloudServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Makes the instance UI accessible from outside of the local network by using Home Assistant Cloud.</summary>
    public void RemoteConnect()
    {
        _haContext.CallService("cloud", "remote_connect", null);
    }

    ///<summary>Disconnects the Home Assistant UI from the Home Assistant Cloud. You will no longer be able to access your Home Assistant instance from outside your local network.</summary>
    public void RemoteDisconnect()
    {
        _haContext.CallService("cloud", "remote_disconnect", null);
    }
}

public partial class ConversationServices
{
    private readonly IHaContext _haContext;
    public ConversationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    public void Process(ConversationProcessParameters data)
    {
        _haContext.CallService("conversation", "process", null, data);
    }

    ///<summary>Launches a conversation from a transcribed text.</summary>
    ///<param name="text">Transcribed text input. eg: Turn all lights on</param>
    ///<param name="language">Language of text. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</param>
    public void Process(string text, string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "process", null, new ConversationProcessParameters { Text = text, Language = language, AgentId = agentId });
    }

    ///<summary>Reloads the intent configuration.</summary>
    public void Reload(ConversationReloadParameters data)
    {
        _haContext.CallService("conversation", "reload", null, data);
    }

    ///<summary>Reloads the intent configuration.</summary>
    ///<param name="language">Language to clear cached intents for. Defaults to server language. eg: NL</param>
    ///<param name="agentId">Conversation agent to reload. eg: homeassistant</param>
    public void Reload(string? language = null, object? agentId = null)
    {
        _haContext.CallService("conversation", "reload", null, new ConversationReloadParameters { Language = language, AgentId = agentId });
    }
}

public partial record ConversationProcessParameters
{
    ///<summary>Transcribed text input. eg: Turn all lights on</summary>
    [JsonPropertyName("text")]
    public string? Text { get; init; }

    ///<summary>Language of text. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to process your request. The conversation agent is the brains of your assistant. It processes the incoming text commands. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial record ConversationReloadParameters
{
    ///<summary>Language to clear cached intents for. Defaults to server language. eg: NL</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>Conversation agent to reload. eg: homeassistant</summary>
    [JsonPropertyName("agent_id")]
    public object? AgentId { get; init; }
}

public partial class CounterServices
{
    private readonly IHaContext _haContext;
    public CounterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void Configure()
    {
        _haContext.CallService("counter", "configure", null);
    }

    ///<summary>Decrements a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("counter", "decrement", target);
    }

    ///<summary>Increments a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("counter", "increment", target);
    }

    ///<summary>Resets a counter.</summary>
    ///<param name="target">The target for this service call</param>
    public void Reset(ServiceTarget target)
    {
        _haContext.CallService("counter", "reset", target);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, CounterSetValueParameters data)
    {
        _haContext.CallService("counter", "set_value", target, data);
    }

    ///<summary>Sets the counter value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The new counter value the entity should be set to.</param>
    public void SetValue(ServiceTarget target, long value)
    {
        _haContext.CallService("counter", "set_value", target, new CounterSetValueParameters { Value = value });
    }
}

public partial record CounterSetValueParameters
{
    ///<summary>The new counter value the entity should be set to.</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial class CoverServices
{
    private readonly IHaContext _haContext;
    public CoverServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Closes a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover", target);
    }

    ///<summary>Tilts a cover to close.</summary>
    ///<param name="target">The target for this service call</param>
    public void CloseCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "close_cover_tilt", target);
    }

    ///<summary>Opens a cover.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover", target);
    }

    ///<summary>Tilts a cover open.</summary>
    ///<param name="target">The target for this service call</param>
    public void OpenCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "open_cover_tilt", target);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverPosition(ServiceTarget target, CoverSetCoverPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_position", target, data);
    }

    ///<summary>Moves a cover to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="position">Target position.</param>
    public void SetCoverPosition(ServiceTarget target, long position)
    {
        _haContext.CallService("cover", "set_cover_position", target, new CoverSetCoverPositionParameters { Position = position });
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetCoverTiltPosition(ServiceTarget target, CoverSetCoverTiltPositionParameters data)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, data);
    }

    ///<summary>Moves a cover tilt to a specific position.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tiltPosition">Target tilt positition.</param>
    public void SetCoverTiltPosition(ServiceTarget target, long tiltPosition)
    {
        _haContext.CallService("cover", "set_cover_tilt_position", target, new CoverSetCoverTiltPositionParameters { TiltPosition = tiltPosition });
    }

    ///<summary>Stops the cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCover(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover", target);
    }

    ///<summary>Stops a tilting cover movement.</summary>
    ///<param name="target">The target for this service call</param>
    public void StopCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "stop_cover_tilt", target);
    }

    ///<summary>Toggles a cover open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle", target);
    }

    ///<summary>Toggles a cover tilt open/closed.</summary>
    ///<param name="target">The target for this service call</param>
    public void ToggleCoverTilt(ServiceTarget target)
    {
        _haContext.CallService("cover", "toggle_cover_tilt", target);
    }
}

public partial record CoverSetCoverPositionParameters
{
    ///<summary>Target position.</summary>
    [JsonPropertyName("position")]
    public long? Position { get; init; }
}

public partial record CoverSetCoverTiltPositionParameters
{
    ///<summary>Target tilt positition.</summary>
    [JsonPropertyName("tilt_position")]
    public long? TiltPosition { get; init; }
}

public partial class DeviceTrackerServices
{
    private readonly IHaContext _haContext;
    public DeviceTrackerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Records a seen tracked device.</summary>
    public void See(DeviceTrackerSeeParameters data)
    {
        _haContext.CallService("device_tracker", "see", null, data);
    }

    ///<summary>Records a seen tracked device.</summary>
    ///<param name="mac">MAC address of the device. eg: FF:FF:FF:FF:FF:FF</param>
    ///<param name="devId">ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</param>
    ///<param name="hostName">Hostname of the device. eg: Dave</param>
    ///<param name="locationName">Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</param>
    ///<param name="gps">GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</param>
    ///<param name="gpsAccuracy">Accuracy of the GPS coordinates.</param>
    ///<param name="battery">Battery level of the device.</param>
    public void See(string? mac = null, string? devId = null, string? hostName = null, string? locationName = null, object? gps = null, long? gpsAccuracy = null, long? battery = null)
    {
        _haContext.CallService("device_tracker", "see", null, new DeviceTrackerSeeParameters { Mac = mac, DevId = devId, HostName = hostName, LocationName = locationName, Gps = gps, GpsAccuracy = gpsAccuracy, Battery = battery });
    }
}

public partial record DeviceTrackerSeeParameters
{
    ///<summary>MAC address of the device. eg: FF:FF:FF:FF:FF:FF</summary>
    [JsonPropertyName("mac")]
    public string? Mac { get; init; }

    ///<summary>ID of the device (find the ID in `known_devices.yaml`). eg: phonedave</summary>
    [JsonPropertyName("dev_id")]
    public string? DevId { get; init; }

    ///<summary>Hostname of the device. eg: Dave</summary>
    [JsonPropertyName("host_name")]
    public string? HostName { get; init; }

    ///<summary>Name of the location where the device is located. The options are: `home`, `not_home`, or the name of the zone. eg: home</summary>
    [JsonPropertyName("location_name")]
    public string? LocationName { get; init; }

    ///<summary>GPS coordinates where the device is located, specified by latitude and longitude (for example: [51.513845, -0.100539]). eg: [51.509802, -0.086692]</summary>
    [JsonPropertyName("gps")]
    public object? Gps { get; init; }

    ///<summary>Accuracy of the GPS coordinates.</summary>
    [JsonPropertyName("gps_accuracy")]
    public long? GpsAccuracy { get; init; }

    ///<summary>Battery level of the device.</summary>
    [JsonPropertyName("battery")]
    public long? Battery { get; init; }
}

public partial class FanServices
{
    private readonly IHaContext _haContext;
    public FanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void DecreaseSpeed(ServiceTarget target, FanDecreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "decrease_speed", target, data);
    }

    ///<summary>Decreases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Decreases the speed by a percentage step.</param>
    public void DecreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "decrease_speed", target, new FanDecreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void IncreaseSpeed(ServiceTarget target, FanIncreaseSpeedParameters data)
    {
        _haContext.CallService("fan", "increase_speed", target, data);
    }

    ///<summary>Increases the speed of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentageStep">Increases the speed by a percentage step.</param>
    public void IncreaseSpeed(ServiceTarget target, long? percentageStep = null)
    {
        _haContext.CallService("fan", "increase_speed", target, new FanIncreaseSpeedParameters { PercentageStep = percentageStep });
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    public void Oscillate(ServiceTarget target, FanOscillateParameters data)
    {
        _haContext.CallService("fan", "oscillate", target, data);
    }

    ///<summary>Controls oscillatation of the fan.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="oscillating">Turn on/off oscillation.</param>
    public void Oscillate(ServiceTarget target, bool oscillating)
    {
        _haContext.CallService("fan", "oscillate", target, new FanOscillateParameters { Oscillating = oscillating });
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDirection(ServiceTarget target, FanSetDirectionParameters data)
    {
        _haContext.CallService("fan", "set_direction", target, data);
    }

    ///<summary>Sets the fan rotation direction.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="direction">Direction to rotate.</param>
    public void SetDirection(ServiceTarget target, object direction)
    {
        _haContext.CallService("fan", "set_direction", target, new FanSetDirectionParameters { Direction = direction });
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPercentage(ServiceTarget target, FanSetPercentageParameters data)
    {
        _haContext.CallService("fan", "set_percentage", target, data);
    }

    ///<summary>Sets the fan speed.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    public void SetPercentage(ServiceTarget target, long percentage)
    {
        _haContext.CallService("fan", "set_percentage", target, new FanSetPercentageParameters { Percentage = percentage });
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetPresetMode(ServiceTarget target, FanSetPresetModeParameters data)
    {
        _haContext.CallService("fan", "set_preset_mode", target, data);
    }

    ///<summary>Sets preset mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void SetPresetMode(ServiceTarget target, string presetMode)
    {
        _haContext.CallService("fan", "set_preset_mode", target, new FanSetPresetModeParameters { PresetMode = presetMode });
    }

    ///<summary>Toggles the fan on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("fan", "toggle", target);
    }

    ///<summary>Turns fan off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("fan", "turn_off", target);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, FanTurnOnParameters data)
    {
        _haContext.CallService("fan", "turn_on", target, data);
    }

    ///<summary>Turns fan on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="percentage">Speed of the fan.</param>
    ///<param name="presetMode">Preset mode. eg: auto</param>
    public void TurnOn(ServiceTarget target, long? percentage = null, string? presetMode = null)
    {
        _haContext.CallService("fan", "turn_on", target, new FanTurnOnParameters { Percentage = percentage, PresetMode = presetMode });
    }
}

public partial record FanDecreaseSpeedParameters
{
    ///<summary>Decreases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanIncreaseSpeedParameters
{
    ///<summary>Increases the speed by a percentage step.</summary>
    [JsonPropertyName("percentage_step")]
    public long? PercentageStep { get; init; }
}

public partial record FanOscillateParameters
{
    ///<summary>Turn on/off oscillation.</summary>
    [JsonPropertyName("oscillating")]
    public bool? Oscillating { get; init; }
}

public partial record FanSetDirectionParameters
{
    ///<summary>Direction to rotate.</summary>
    [JsonPropertyName("direction")]
    public object? Direction { get; init; }
}

public partial record FanSetPercentageParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }
}

public partial record FanSetPresetModeParameters
{
    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial record FanTurnOnParameters
{
    ///<summary>Speed of the fan.</summary>
    [JsonPropertyName("percentage")]
    public long? Percentage { get; init; }

    ///<summary>Preset mode. eg: auto</summary>
    [JsonPropertyName("preset_mode")]
    public string? PresetMode { get; init; }
}

public partial class FfmpegServices
{
    private readonly IHaContext _haContext;
    public FfmpegServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    public void Restart(FfmpegRestartParameters data)
    {
        _haContext.CallService("ffmpeg", "restart", null, data);
    }

    ///<summary>Sends a restart command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will restart. Platform dependent.</param>
    public void Restart(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "restart", null, new FfmpegRestartParameters { EntityId = entityId });
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    public void Start(FfmpegStartParameters data)
    {
        _haContext.CallService("ffmpeg", "start", null, data);
    }

    ///<summary>Sends a start command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will start. Platform dependent.</param>
    public void Start(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "start", null, new FfmpegStartParameters { EntityId = entityId });
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    public void Stop(FfmpegStopParameters data)
    {
        _haContext.CallService("ffmpeg", "stop", null, data);
    }

    ///<summary>Sends a stop command to a ffmpeg based sensor.</summary>
    ///<param name="entityId">Name of entity that will stop. Platform dependent.</param>
    public void Stop(string? entityId = null)
    {
        _haContext.CallService("ffmpeg", "stop", null, new FfmpegStopParameters { EntityId = entityId });
    }
}

public partial record FfmpegRestartParameters
{
    ///<summary>Name of entity that will restart. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStartParameters
{
    ///<summary>Name of entity that will start. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial record FfmpegStopParameters
{
    ///<summary>Name of entity that will stop. Platform dependent.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }
}

public partial class FrigateServices
{
    private readonly IHaContext _haContext;
    public FrigateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Favorites or unfavorites an event. Favorited events are retained indefinitely. </summary>
    ///<param name="target">The target for this service call</param>
    public void FavoriteEvent(ServiceTarget target, FrigateFavoriteEventParameters data)
    {
        _haContext.CallService("frigate", "favorite_event", target, data);
    }

    ///<summary>Favorites or unfavorites an event. Favorited events are retained indefinitely. </summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="eventId">ID of the event to favorite or unfavorite. eg: 1656510950.19548-ihtjj7</param>
    ///<param name="favorite">If the event should be favorited or unfavorited. Enable to favorite, disable to unfavorite.  eg: True</param>
    public void FavoriteEvent(ServiceTarget target, string eventId, bool? favorite = null)
    {
        _haContext.CallService("frigate", "favorite_event", target, new FrigateFavoriteEventParameters { EventId = eventId, Favorite = favorite });
    }
}

public partial record FrigateFavoriteEventParameters
{
    ///<summary>ID of the event to favorite or unfavorite. eg: 1656510950.19548-ihtjj7</summary>
    [JsonPropertyName("event_id")]
    public string? EventId { get; init; }

    ///<summary>If the event should be favorited or unfavorited. Enable to favorite, disable to unfavorite.  eg: True</summary>
    [JsonPropertyName("favorite")]
    public bool? Favorite { get; init; }
}

public partial class FrontendServices
{
    private readonly IHaContext _haContext;
    public FrontendServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads themes from the YAML-configuration.</summary>
    public void ReloadThemes()
    {
        _haContext.CallService("frontend", "reload_themes", null);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    public void SetTheme(FrontendSetThemeParameters data)
    {
        _haContext.CallService("frontend", "set_theme", null, data);
    }

    ///<summary>Sets the default theme Home Assistant uses. Can be overridden by a user.</summary>
    ///<param name="name">Name of a theme. eg: default</param>
    ///<param name="mode">Theme mode.</param>
    public void SetTheme(object name, object? mode = null)
    {
        _haContext.CallService("frontend", "set_theme", null, new FrontendSetThemeParameters { Name = name, Mode = mode });
    }
}

public partial record FrontendSetThemeParameters
{
    ///<summary>Name of a theme. eg: default</summary>
    [JsonPropertyName("name")]
    public object? Name { get; init; }

    ///<summary>Theme mode.</summary>
    [JsonPropertyName("mode")]
    public object? Mode { get; init; }
}

public partial class GeHomeServices
{
    private readonly IHaContext _haContext;
    public GeHomeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a timer value (sets to zero)</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearTimer(ServiceTarget target)
    {
        _haContext.CallService("ge_home", "clear_timer", target);
    }

    ///<summary>Sets an integer value (also can be used with ERD enums)</summary>
    ///<param name="target">The target for this service call</param>
    public void SetIntValue(ServiceTarget target, GeHomeSetIntValueParameters data)
    {
        _haContext.CallService("ge_home", "set_int_value", target, data);
    }

    ///<summary>Sets an integer value (also can be used with ERD enums)</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The value to set</param>
    public void SetIntValue(ServiceTarget target, long value)
    {
        _haContext.CallService("ge_home", "set_int_value", target, new GeHomeSetIntValueParameters { Value = value });
    }

    ///<summary>Sets a timer value (timespan)</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTimer(ServiceTarget target, GeHomeSetTimerParameters data)
    {
        _haContext.CallService("ge_home", "set_timer", target, data);
    }

    ///<summary>Sets a timer value (timespan)</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration of the timer (minutes) eg: 90</param>
    public void SetTimer(ServiceTarget target, long duration)
    {
        _haContext.CallService("ge_home", "set_timer", target, new GeHomeSetTimerParameters { Duration = duration });
    }
}

public partial record GeHomeSetIntValueParameters
{
    ///<summary>The value to set</summary>
    [JsonPropertyName("value")]
    public long? Value { get; init; }
}

public partial record GeHomeSetTimerParameters
{
    ///<summary>Duration of the timer (minutes) eg: 90</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial class GroupServices
{
    private readonly IHaContext _haContext;
    public GroupServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads group configuration, entities, and notify services from YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("group", "reload", null);
    }

    ///<summary>Removes a group.</summary>
    public void Remove(GroupRemoveParameters data)
    {
        _haContext.CallService("group", "remove", null, data);
    }

    ///<summary>Removes a group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    public void Remove(object objectId)
    {
        _haContext.CallService("group", "remove", null, new GroupRemoveParameters { ObjectId = objectId });
    }

    ///<summary>Creates/Updates a user group.</summary>
    public void Set(GroupSetParameters data)
    {
        _haContext.CallService("group", "set", null, data);
    }

    ///<summary>Creates/Updates a user group.</summary>
    ///<param name="objectId">Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</param>
    ///<param name="name">Name of the group. eg: My test group</param>
    ///<param name="icon">Name of the icon for the group. eg: mdi:camera</param>
    ///<param name="entities">List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="addEntities">List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="removeEntities">List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</param>
    ///<param name="all">Enable this option if the group should only be used when all entities are in state `on`.</param>
    public void Set(string objectId, string? name = null, object? icon = null, IEnumerable<string>? entities = null, IEnumerable<string>? addEntities = null, IEnumerable<string>? removeEntities = null, bool? all = null)
    {
        _haContext.CallService("group", "set", null, new GroupSetParameters { ObjectId = objectId, Name = name, Icon = icon, Entities = entities, AddEntities = addEntities, RemoveEntities = removeEntities, All = all });
    }
}

public partial record GroupRemoveParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public object? ObjectId { get; init; }
}

public partial record GroupSetParameters
{
    ///<summary>Object ID of this group. This object ID is used as part of the entity ID. Entity ID format: [domain].[object_id]. eg: test_group</summary>
    [JsonPropertyName("object_id")]
    public string? ObjectId { get; init; }

    ///<summary>Name of the group. eg: My test group</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Name of the icon for the group. eg: mdi:camera</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>List of all members in the group. Cannot be used in combination with `Add entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("entities")]
    public IEnumerable<string>? Entities { get; init; }

    ///<summary>List of members to be added to the group. Cannot be used in combination with `Entities` or `Remove entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("add_entities")]
    public IEnumerable<string>? AddEntities { get; init; }

    ///<summary>List of members to be removed from a group. Cannot be used in combination with `Entities` or `Add entities`. eg: domain.entity_id1, domain.entity_id2</summary>
    [JsonPropertyName("remove_entities")]
    public IEnumerable<string>? RemoveEntities { get; init; }

    ///<summary>Enable this option if the group should only be used when all entities are in state `on`.</summary>
    [JsonPropertyName("all")]
    public bool? All { get; init; }
}

public partial class HassioServices
{
    private readonly IHaContext _haContext;
    public HassioServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Restarts an add-on.</summary>
    public void AddonRestart(HassioAddonRestartParameters data)
    {
        _haContext.CallService("hassio", "addon_restart", null, data);
    }

    ///<summary>Restarts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonRestart(object addon)
    {
        _haContext.CallService("hassio", "addon_restart", null, new HassioAddonRestartParameters { Addon = addon });
    }

    ///<summary>Starts an add-on.</summary>
    public void AddonStart(HassioAddonStartParameters data)
    {
        _haContext.CallService("hassio", "addon_start", null, data);
    }

    ///<summary>Starts an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStart(object addon)
    {
        _haContext.CallService("hassio", "addon_start", null, new HassioAddonStartParameters { Addon = addon });
    }

    ///<summary>Writes data to add-on stdin.</summary>
    public void AddonStdin(HassioAddonStdinParameters data)
    {
        _haContext.CallService("hassio", "addon_stdin", null, data);
    }

    ///<summary>Writes data to add-on stdin.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStdin(object addon)
    {
        _haContext.CallService("hassio", "addon_stdin", null, new HassioAddonStdinParameters { Addon = addon });
    }

    ///<summary>Stops an add-on.</summary>
    public void AddonStop(HassioAddonStopParameters data)
    {
        _haContext.CallService("hassio", "addon_stop", null, data);
    }

    ///<summary>Stops an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonStop(object addon)
    {
        _haContext.CallService("hassio", "addon_stop", null, new HassioAddonStopParameters { Addon = addon });
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    public void AddonUpdate(HassioAddonUpdateParameters data)
    {
        _haContext.CallService("hassio", "addon_update", null, data);
    }

    ///<summary>Updates an add-on. This service should be used with caution since add-on updates can contain breaking changes. It is highly recommended that you review release notes/change logs before updating an add-on.</summary>
    ///<param name="addon">The add-on slug. eg: core_ssh</param>
    public void AddonUpdate(object addon)
    {
        _haContext.CallService("hassio", "addon_update", null, new HassioAddonUpdateParameters { Addon = addon });
    }

    ///<summary>Creates a full backup.</summary>
    public void BackupFull(HassioBackupFullParameters data)
    {
        _haContext.CallService("hassio", "backup_full", null, data);
    }

    ///<summary>Creates a full backup.</summary>
    ///<param name="name">Optional (default = current date and time). eg: Backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    public void BackupFull(string? name = null, string? password = null, bool? compressed = null, object? location = null, bool? homeassistantExcludeDatabase = null)
    {
        _haContext.CallService("hassio", "backup_full", null, new HassioBackupFullParameters { Name = name, Password = password, Compressed = compressed, Location = location, HomeassistantExcludeDatabase = homeassistantExcludeDatabase });
    }

    ///<summary>Creates a partial backup.</summary>
    public void BackupPartial(HassioBackupPartialParameters data)
    {
        _haContext.CallService("hassio", "backup_partial", null, data);
    }

    ///<summary>Creates a partial backup.</summary>
    ///<param name="homeassistant">Includes Home Assistant settings in the backup.</param>
    ///<param name="homeassistantExcludeDatabase">Exclude the Home Assistant database file from backup</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="name">Optional (default = current date and time). eg: Partial backup 1</param>
    ///<param name="password">Password to protect the backup with. eg: password</param>
    ///<param name="compressed">Compresses the backup files.</param>
    ///<param name="location">Name of a backup network storage to host backups. eg: my_backup_mount</param>
    public void BackupPartial(bool? homeassistant = null, bool? homeassistantExcludeDatabase = null, object? addons = null, object? folders = null, string? name = null, string? password = null, bool? compressed = null, object? location = null)
    {
        _haContext.CallService("hassio", "backup_partial", null, new HassioBackupPartialParameters { Homeassistant = homeassistant, HomeassistantExcludeDatabase = homeassistantExcludeDatabase, Addons = addons, Folders = folders, Name = name, Password = password, Compressed = compressed, Location = location });
    }

    ///<summary>Reboots the host system.</summary>
    public void HostReboot()
    {
        _haContext.CallService("hassio", "host_reboot", null);
    }

    ///<summary>Powers off the host system.</summary>
    public void HostShutdown()
    {
        _haContext.CallService("hassio", "host_shutdown", null);
    }

    ///<summary>Restores from full backup.</summary>
    public void RestoreFull(HassioRestoreFullParameters data)
    {
        _haContext.CallService("hassio", "restore_full", null, data);
    }

    ///<summary>Restores from full backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestoreFull(string slug, string? password = null)
    {
        _haContext.CallService("hassio", "restore_full", null, new HassioRestoreFullParameters { Slug = slug, Password = password });
    }

    ///<summary>Restores from a partial backup.</summary>
    public void RestorePartial(HassioRestorePartialParameters data)
    {
        _haContext.CallService("hassio", "restore_partial", null, data);
    }

    ///<summary>Restores from a partial backup.</summary>
    ///<param name="slug">Slug of backup to restore from.</param>
    ///<param name="homeassistant">Restores Home Assistant.</param>
    ///<param name="folders">List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</param>
    ///<param name="addons">List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</param>
    ///<param name="password">Optional password. eg: password</param>
    public void RestorePartial(string slug, bool? homeassistant = null, object? folders = null, object? addons = null, string? password = null)
    {
        _haContext.CallService("hassio", "restore_partial", null, new HassioRestorePartialParameters { Slug = slug, Homeassistant = homeassistant, Folders = folders, Addons = addons, Password = password });
    }
}

public partial record HassioAddonRestartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStartParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStdinParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonStopParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioAddonUpdateParameters
{
    ///<summary>The add-on slug. eg: core_ssh</summary>
    [JsonPropertyName("addon")]
    public object? Addon { get; init; }
}

public partial record HassioBackupFullParameters
{
    ///<summary>Optional (default = current date and time). eg: Backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }
}

public partial record HassioBackupPartialParameters
{
    ///<summary>Includes Home Assistant settings in the backup.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>Exclude the Home Assistant database file from backup</summary>
    [JsonPropertyName("homeassistant_exclude_database")]
    public bool? HomeassistantExcludeDatabase { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>Optional (default = current date and time). eg: Partial backup 1</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Password to protect the backup with. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }

    ///<summary>Compresses the backup files.</summary>
    [JsonPropertyName("compressed")]
    public bool? Compressed { get; init; }

    ///<summary>Name of a backup network storage to host backups. eg: my_backup_mount</summary>
    [JsonPropertyName("location")]
    public object? Location { get; init; }
}

public partial record HassioRestoreFullParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial record HassioRestorePartialParameters
{
    ///<summary>Slug of backup to restore from.</summary>
    [JsonPropertyName("slug")]
    public string? Slug { get; init; }

    ///<summary>Restores Home Assistant.</summary>
    [JsonPropertyName("homeassistant")]
    public bool? Homeassistant { get; init; }

    ///<summary>List of directories to include in the backup. eg: [&quot;homeassistant&quot;,&quot;share&quot;]</summary>
    [JsonPropertyName("folders")]
    public object? Folders { get; init; }

    ///<summary>List of add-ons to include in the backup. Use the name slug of the add-on. eg: [&quot;core_ssh&quot;,&quot;core_samba&quot;,&quot;core_mosquitto&quot;]</summary>
    [JsonPropertyName("addons")]
    public object? Addons { get; init; }

    ///<summary>Optional password. eg: password</summary>
    [JsonPropertyName("password")]
    public string? Password { get; init; }
}

public partial class HomeassistantServices
{
    private readonly IHaContext _haContext;
    public HomeassistantServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Checks the Home Assistant YAML-configuration files for errors. Errors will be shown in the Home Assistant logs.</summary>
    public void CheckConfig()
    {
        _haContext.CallService("homeassistant", "check_config", null);
    }

    ///<summary>Reload all YAML configuration that can be reloaded without restarting Home Assistant.</summary>
    public void ReloadAll()
    {
        _haContext.CallService("homeassistant", "reload_all", null);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReloadConfigEntry(ServiceTarget target, HomeassistantReloadConfigEntryParameters data)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, data);
    }

    ///<summary>Reloads the specified config entry.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="entryId">The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</param>
    public void ReloadConfigEntry(ServiceTarget target, string? entryId = null)
    {
        _haContext.CallService("homeassistant", "reload_config_entry", target, new HomeassistantReloadConfigEntryParameters { EntryId = entryId });
    }

    ///<summary>Reloads the core configuration from the YAML-configuration.</summary>
    public void ReloadCoreConfig()
    {
        _haContext.CallService("homeassistant", "reload_core_config", null);
    }

    ///<summary>Reloads Jinja2 templates found in the `custom_templates` folder in your config. New values will be applied on the next render of the template.</summary>
    public void ReloadCustomTemplates()
    {
        _haContext.CallService("homeassistant", "reload_custom_templates", null);
    }

    ///<summary>Restarts Home Assistant.</summary>
    public void Restart()
    {
        _haContext.CallService("homeassistant", "restart", null);
    }

    ///<summary>Saves the persistent states immediately. Maintains the normal periodic saving interval.</summary>
    public void SavePersistentStates()
    {
        _haContext.CallService("homeassistant", "save_persistent_states", null);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    public void SetLocation(HomeassistantSetLocationParameters data)
    {
        _haContext.CallService("homeassistant", "set_location", null, data);
    }

    ///<summary>Updates the Home Assistant location.</summary>
    ///<param name="latitude">Latitude of your location. eg: 32.87336</param>
    ///<param name="longitude">Longitude of your location. eg: 117.22743</param>
    ///<param name="elevation">Elevation of your location. eg: 120</param>
    public void SetLocation(long latitude, long longitude, long? elevation = null)
    {
        _haContext.CallService("homeassistant", "set_location", null, new HomeassistantSetLocationParameters { Latitude = latitude, Longitude = longitude, Elevation = elevation });
    }

    ///<summary>Stops Home Assistant.</summary>
    public void Stop()
    {
        _haContext.CallService("homeassistant", "stop", null);
    }

    ///<summary>Generic service to toggle devices on/off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "toggle", target);
    }

    ///<summary>Generic service to turn devices off under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_off", target);
    }

    ///<summary>Generic service to turn devices on under any domain.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "turn_on", target);
    }

    ///<summary>Forces one or more entities to update its data.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateEntity(ServiceTarget target)
    {
        _haContext.CallService("homeassistant", "update_entity", target);
    }
}

public partial record HomeassistantReloadConfigEntryParameters
{
    ///<summary>The configuration entry ID of the entry to be reloaded. eg: 8955375327824e14ba89e4b29cc3ec9a</summary>
    [JsonPropertyName("entry_id")]
    public string? EntryId { get; init; }
}

public partial record HomeassistantSetLocationParameters
{
    ///<summary>Latitude of your location. eg: 32.87336</summary>
    [JsonPropertyName("latitude")]
    public long? Latitude { get; init; }

    ///<summary>Longitude of your location. eg: 117.22743</summary>
    [JsonPropertyName("longitude")]
    public long? Longitude { get; init; }

    ///<summary>Elevation of your location. eg: 120</summary>
    [JsonPropertyName("elevation")]
    public long? Elevation { get; init; }
}

public partial class HumidifierServices
{
    private readonly IHaContext _haContext;
    public HumidifierServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetHumidity(ServiceTarget target, HumidifierSetHumidityParameters data)
    {
        _haContext.CallService("humidifier", "set_humidity", target, data);
    }

    ///<summary>Sets the target humidity.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="humidity">Target humidity.</param>
    public void SetHumidity(ServiceTarget target, long humidity)
    {
        _haContext.CallService("humidifier", "set_humidity", target, new HumidifierSetHumidityParameters { Humidity = humidity });
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetMode(ServiceTarget target, HumidifierSetModeParameters data)
    {
        _haContext.CallService("humidifier", "set_mode", target, data);
    }

    ///<summary>Sets the humidifier operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mode">Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</param>
    public void SetMode(ServiceTarget target, string mode)
    {
        _haContext.CallService("humidifier", "set_mode", target, new HumidifierSetModeParameters { Mode = mode });
    }

    ///<summary>Toggles the humidifier on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "toggle", target);
    }

    ///<summary>Turns the humidifier off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_off", target);
    }

    ///<summary>Turns the humidifier on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("humidifier", "turn_on", target);
    }
}

public partial record HumidifierSetHumidityParameters
{
    ///<summary>Target humidity.</summary>
    [JsonPropertyName("humidity")]
    public long? Humidity { get; init; }
}

public partial record HumidifierSetModeParameters
{
    ///<summary>Operation mode. For example, _normal_, _eco_, or _away_. For a list of possible values, refer to the integration documentation. eg: away</summary>
    [JsonPropertyName("mode")]
    public string? Mode { get; init; }
}

public partial class InputBooleanServices
{
    private readonly IHaContext _haContext;
    public InputBooleanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_boolean", "reload", null);
    }

    ///<summary>Toggles the helper on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "toggle", target);
    }

    ///<summary>Turns off the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_off", target);
    }

    ///<summary>Turns on the helper.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("input_boolean", "turn_on", target);
    }
}

public partial class InputButtonServices
{
    private readonly IHaContext _haContext;
    public InputButtonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    ///<param name="target">The target for this service call</param>
    public void Press(ServiceTarget target)
    {
        _haContext.CallService("input_button", "press", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_button", "reload", null);
    }
}

public partial class InputDatetimeServices
{
    private readonly IHaContext _haContext;
    public InputDatetimeServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_datetime", "reload", null);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetDatetime(ServiceTarget target, InputDatetimeSetDatetimeParameters data)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, data);
    }

    ///<summary>Sets the date and/or time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="date">The target date. eg: &quot;2019-04-20&quot;</param>
    ///<param name="time">The target time. eg: &quot;05:04:20&quot;</param>
    ///<param name="datetime">The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</param>
    ///<param name="timestamp">The target date &amp; time, expressed by a UNIX timestamp.</param>
    public void SetDatetime(ServiceTarget target, string? date = null, DateTime? time = null, string? datetime = null, long? timestamp = null)
    {
        _haContext.CallService("input_datetime", "set_datetime", target, new InputDatetimeSetDatetimeParameters { Date = date, Time = time, Datetime = datetime, Timestamp = timestamp });
    }
}

public partial record InputDatetimeSetDatetimeParameters
{
    ///<summary>The target date. eg: &quot;2019-04-20&quot;</summary>
    [JsonPropertyName("date")]
    public string? Date { get; init; }

    ///<summary>The target time. eg: &quot;05:04:20&quot;</summary>
    [JsonPropertyName("time")]
    public DateTime? Time { get; init; }

    ///<summary>The target date &amp; time. eg: &quot;2019-04-20 05:04:20&quot;</summary>
    [JsonPropertyName("datetime")]
    public string? Datetime { get; init; }

    ///<summary>The target date &amp; time, expressed by a UNIX timestamp.</summary>
    [JsonPropertyName("timestamp")]
    public long? Timestamp { get; init; }
}

public partial class InputNumberServices
{
    private readonly IHaContext _haContext;
    public InputNumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Decrements the current value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Decrement(ServiceTarget target)
    {
        _haContext.CallService("input_number", "decrement", target);
    }

    ///<summary>Increments the value by 1 step.</summary>
    ///<param name="target">The target for this service call</param>
    public void Increment(ServiceTarget target)
    {
        _haContext.CallService("input_number", "increment", target);
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_number", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputNumberSetValueParameters data)
    {
        _haContext.CallService("input_number", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value.</param>
    public void SetValue(ServiceTarget target, double value)
    {
        _haContext.CallService("input_number", "set_value", target, new InputNumberSetValueParameters { Value = value });
    }
}

public partial record InputNumberSetValueParameters
{
    ///<summary>The target value.</summary>
    [JsonPropertyName("value")]
    public double? Value { get; init; }
}

public partial class InputSelectServices
{
    private readonly IHaContext _haContext;
    public InputSelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_select", "reload", null);
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("input_select", "select_last", target);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, InputSelectSelectNextParameters data)
    {
        _haContext.CallService("input_select", "select_next", target, data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_next", target, new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, InputSelectSelectOptionParameters data)
    {
        _haContext.CallService("input_select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("input_select", "select_option", target, new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, InputSelectSelectPreviousParameters data)
    {
        _haContext.CallService("input_select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("input_select", "select_previous", target, new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOptions(ServiceTarget target, InputSelectSetOptionsParameters data)
    {
        _haContext.CallService("input_select", "set_options", target, data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public void SetOptions(ServiceTarget target, object options)
    {
        _haContext.CallService("input_select", "set_options", target, new InputSelectSetOptionsParameters { Options = options });
    }
}

public partial record InputSelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record InputSelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the last to the first option on the list.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record InputSelectSetOptionsParameters
{
    ///<summary>List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class InputTextServices
{
    private readonly IHaContext _haContext;
    public InputTextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads helpers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("input_text", "reload", null);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, InputTextSetValueParameters data)
    {
        _haContext.CallService("input_text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("input_text", "set_value", target, new InputTextSetValueParameters { Value = value });
    }
}

public partial record InputTextSetValueParameters
{
    ///<summary>The target value. eg: This is an example text</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class IntentScriptServices
{
    private readonly IHaContext _haContext;
    public IntentScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads the intent script from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("intent_script", "reload", null);
    }
}

public partial class LawnMowerServices
{
    private readonly IHaContext _haContext;
    public LawnMowerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the mowing task and returns to the dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Dock(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "dock", target);
    }

    ///<summary>Pauses the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "pause", target);
    }

    ///<summary>Starts the mowing task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartMowing(ServiceTarget target)
    {
        _haContext.CallService("lawn_mower", "start_mowing", target);
    }
}

public partial class LightServices
{
    private readonly IHaContext _haContext;
    public LightServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target, LightToggleParameters data)
    {
        _haContext.CallService("light", "toggle", target, data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void Toggle(ServiceTarget target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "toggle", target, new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target, LightTurnOffParameters data)
    {
        _haContext.CallService("light", "turn_off", target, data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public void TurnOff(ServiceTarget target, long? transition = null, object? flash = null)
    {
        _haContext.CallService("light", "turn_off", target, new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, LightTurnOnParameters data)
    {
        _haContext.CallService("light", "turn_on", target, data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public void TurnOn(ServiceTarget target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        _haContext.CallService("light", "turn_on", target, new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public partial record LightToggleParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial record LightTurnOffParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }
}

public partial record LightTurnOnParameters
{
    ///<summary>Duration it takes to get to next state.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }

    ///<summary>The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</summary>
    [JsonPropertyName("rgb_color")]
    public object? RgbColor { get; init; }

    ///<summary>The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</summary>
    [JsonPropertyName("rgbw_color")]
    public object? RgbwColor { get; init; }

    ///<summary>The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</summary>
    [JsonPropertyName("rgbww_color")]
    public object? RgbwwColor { get; init; }

    ///<summary>A human-readable color name.</summary>
    [JsonPropertyName("color_name")]
    public object? ColorName { get; init; }

    ///<summary>Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</summary>
    [JsonPropertyName("hs_color")]
    public object? HsColor { get; init; }

    ///<summary>Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</summary>
    [JsonPropertyName("xy_color")]
    public object? XyColor { get; init; }

    ///<summary>Color temperature in mireds.</summary>
    [JsonPropertyName("color_temp")]
    public object? ColorTemp { get; init; }

    ///<summary>Color temperature in Kelvin.</summary>
    [JsonPropertyName("kelvin")]
    public long? Kelvin { get; init; }

    ///<summary>Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</summary>
    [JsonPropertyName("brightness")]
    public long? Brightness { get; init; }

    ///<summary>Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</summary>
    [JsonPropertyName("brightness_pct")]
    public long? BrightnessPct { get; init; }

    ///<summary>Change brightness by an amount.</summary>
    [JsonPropertyName("brightness_step")]
    public long? BrightnessStep { get; init; }

    ///<summary>Change brightness by a percentage.</summary>
    [JsonPropertyName("brightness_step_pct")]
    public long? BrightnessStepPct { get; init; }

    ///<summary>Set the light to white mode.</summary>
    [JsonPropertyName("white")]
    public object? White { get; init; }

    ///<summary>Name of a light profile to use. eg: relax</summary>
    [JsonPropertyName("profile")]
    public string? Profile { get; init; }

    ///<summary>Tell light to flash, can be either value short or long.</summary>
    [JsonPropertyName("flash")]
    public object? Flash { get; init; }

    ///<summary>Light effect.</summary>
    [JsonPropertyName("effect")]
    public string? Effect { get; init; }
}

public partial class LockServices
{
    private readonly IHaContext _haContext;
    public LockServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Lock(ServiceTarget target, LockLockParameters data)
    {
        _haContext.CallService("lock", "lock", target, data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public void Lock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "lock", target, new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Open(ServiceTarget target, LockOpenParameters data)
    {
        _haContext.CallService("lock", "open", target, data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public void Open(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "open", target, new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unlock(ServiceTarget target, LockUnlockParameters data)
    {
        _haContext.CallService("lock", "unlock", target, data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public void Unlock(ServiceTarget target, string? code = null)
    {
        _haContext.CallService("lock", "unlock", target, new LockUnlockParameters { Code = code });
    }
}

public partial record LockLockParameters
{
    ///<summary>Code used to lock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockOpenParameters
{
    ///<summary>Code used to open the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial record LockUnlockParameters
{
    ///<summary>Code used to unlock the lock. eg: 1234</summary>
    [JsonPropertyName("code")]
    public string? Code { get; init; }
}

public partial class LogbookServices
{
    private readonly IHaContext _haContext;
    public LogbookServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    public void Log(LogbookLogParameters data)
    {
        _haContext.CallService("logbook", "log", null, data);
    }

    ///<summary>Creates a custom entry in the logbook.</summary>
    ///<param name="name">Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</param>
    ///<param name="message">Message of the logbook entry. eg: is being used</param>
    ///<param name="entityId">Entity to reference in the logbook entry.</param>
    ///<param name="domain">Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</param>
    public void Log(string name, string message, string? entityId = null, string? domain = null)
    {
        _haContext.CallService("logbook", "log", null, new LogbookLogParameters { Name = name, Message = message, EntityId = entityId, Domain = domain });
    }
}

public partial record LogbookLogParameters
{
    ///<summary>Custom name for an entity, can be referenced using an `entity_id`. eg: Kitchen</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }

    ///<summary>Message of the logbook entry. eg: is being used</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Entity to reference in the logbook entry.</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Determines which icon is used in the logbook entry. The icon illustrates the integration domain related to this logbook entry. eg: light</summary>
    [JsonPropertyName("domain")]
    public string? Domain { get; init; }
}

public partial class LoggerServices
{
    private readonly IHaContext _haContext;
    public LoggerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the default log level for integrations.</summary>
    public void SetDefaultLevel(LoggerSetDefaultLevelParameters data)
    {
        _haContext.CallService("logger", "set_default_level", null, data);
    }

    ///<summary>Sets the default log level for integrations.</summary>
    ///<param name="level">Default severity level for all integrations.</param>
    public void SetDefaultLevel(object? level = null)
    {
        _haContext.CallService("logger", "set_default_level", null, new LoggerSetDefaultLevelParameters { Level = level });
    }

    ///<summary>Sets the log level for one or more integrations.</summary>
    public void SetLevel()
    {
        _haContext.CallService("logger", "set_level", null);
    }
}

public partial record LoggerSetDefaultLevelParameters
{
    ///<summary>Default severity level for all integrations.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }
}

public partial class MatterServices
{
    private readonly IHaContext _haContext;
    public MatterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Allows adding one of your devices to another Matter network by opening the commissioning window for this Matter device for 60 seconds.</summary>
    public void OpenCommissioningWindow(MatterOpenCommissioningWindowParameters data)
    {
        _haContext.CallService("matter", "open_commissioning_window", null, data);
    }

    ///<summary>Allows adding one of your devices to another Matter network by opening the commissioning window for this Matter device for 60 seconds.</summary>
    ///<param name="deviceId">The Matter device to add to the other Matter network.</param>
    public void OpenCommissioningWindow(string deviceId)
    {
        _haContext.CallService("matter", "open_commissioning_window", null, new MatterOpenCommissioningWindowParameters { DeviceId = deviceId });
    }
}

public partial record MatterOpenCommissioningWindowParameters
{
    ///<summary>The Matter device to add to the other Matter network.</summary>
    [JsonPropertyName("device_id")]
    public string? DeviceId { get; init; }
}

public partial class MediaPlayerServices
{
    private readonly IHaContext _haContext;
    public MediaPlayerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears the playlist.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearPlaylist(ServiceTarget target)
    {
        _haContext.CallService("media_player", "clear_playlist", target);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    public void Join(ServiceTarget target, MediaPlayerJoinParameters data)
    {
        _haContext.CallService("media_player", "join", target, data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public void Join(ServiceTarget target, IEnumerable<string> groupMembers)
    {
        _haContext.CallService("media_player", "join", target, new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaNextTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_next_track", target);
    }

    ///<summary>Pauses.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_pause", target);
    }

    ///<summary>Starts playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlay(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play", target);
    }

    ///<summary>Toggles play/pause.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPlayPause(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_play_pause", target);
    }

    ///<summary>Selects the previous track.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaPreviousTrack(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_previous_track", target);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaSeek(ServiceTarget target, MediaPlayerMediaSeekParameters data)
    {
        _haContext.CallService("media_player", "media_seek", target, data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public void MediaSeek(ServiceTarget target, double seekPosition)
    {
        _haContext.CallService("media_player", "media_seek", target, new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MediaStop(ServiceTarget target)
    {
        _haContext.CallService("media_player", "media_stop", target);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    public void PlayMedia(ServiceTarget target, MediaPlayerPlayMediaParameters data)
    {
        _haContext.CallService("media_player", "play_media", target, data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public void PlayMedia(ServiceTarget target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        _haContext.CallService("media_player", "play_media", target, new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    public void RepeatSet(ServiceTarget target, MediaPlayerRepeatSetParameters data)
    {
        _haContext.CallService("media_player", "repeat_set", target, data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public void RepeatSet(ServiceTarget target, object repeat)
    {
        _haContext.CallService("media_player", "repeat_set", target, new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSoundMode(ServiceTarget target, MediaPlayerSelectSoundModeParameters data)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public void SelectSoundMode(ServiceTarget target, string? soundMode = null)
    {
        _haContext.CallService("media_player", "select_sound_mode", target, new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectSource(ServiceTarget target, MediaPlayerSelectSourceParameters data)
    {
        _haContext.CallService("media_player", "select_source", target, data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public void SelectSource(ServiceTarget target, string source)
    {
        _haContext.CallService("media_player", "select_source", target, new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    public void ShuffleSet(ServiceTarget target, MediaPlayerShuffleSetParameters data)
    {
        _haContext.CallService("media_player", "shuffle_set", target, data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public void ShuffleSet(ServiceTarget target, bool shuffle)
    {
        _haContext.CallService("media_player", "shuffle_set", target, new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("media_player", "toggle", target);
    }

    ///<summary>Turns off the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_off", target);
    }

    ///<summary>Turns on the power of the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("media_player", "turn_on", target);
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    ///<param name="target">The target for this service call</param>
    public void Unjoin(ServiceTarget target)
    {
        _haContext.CallService("media_player", "unjoin", target);
    }

    ///<summary>Turns down the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeDown(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_down", target);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeMute(ServiceTarget target, MediaPlayerVolumeMuteParameters data)
    {
        _haContext.CallService("media_player", "volume_mute", target, data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public void VolumeMute(ServiceTarget target, bool isVolumeMuted)
    {
        _haContext.CallService("media_player", "volume_mute", target, new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeSet(ServiceTarget target, MediaPlayerVolumeSetParameters data)
    {
        _haContext.CallService("media_player", "volume_set", target, data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public void VolumeSet(ServiceTarget target, double volumeLevel)
    {
        _haContext.CallService("media_player", "volume_set", target, new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    ///<param name="target">The target for this service call</param>
    public void VolumeUp(ServiceTarget target)
    {
        _haContext.CallService("media_player", "volume_up", target);
    }
}

public partial record MediaPlayerJoinParameters
{
    ///<summary>The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </summary>
    [JsonPropertyName("group_members")]
    public IEnumerable<string>? GroupMembers { get; init; }
}

public partial record MediaPlayerMediaSeekParameters
{
    ///<summary>Target position in the currently playing media. The format is platform dependent.</summary>
    [JsonPropertyName("seek_position")]
    public double? SeekPosition { get; init; }
}

public partial record MediaPlayerPlayMediaParameters
{
    ///<summary>The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</summary>
    [JsonPropertyName("media_content_id")]
    public string? MediaContentId { get; init; }

    ///<summary>The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</summary>
    [JsonPropertyName("media_content_type")]
    public string? MediaContentType { get; init; }

    ///<summary>If the content should be played now or be added to the queue.</summary>
    [JsonPropertyName("enqueue")]
    public object? Enqueue { get; init; }

    ///<summary>If the media should be played as an announcement. eg: true</summary>
    [JsonPropertyName("announce")]
    public bool? Announce { get; init; }
}

public partial record MediaPlayerRepeatSetParameters
{
    ///<summary>Repeat mode to set.</summary>
    [JsonPropertyName("repeat")]
    public object? Repeat { get; init; }
}

public partial record MediaPlayerSelectSoundModeParameters
{
    ///<summary>Name of the sound mode to switch to. eg: Music</summary>
    [JsonPropertyName("sound_mode")]
    public string? SoundMode { get; init; }
}

public partial record MediaPlayerSelectSourceParameters
{
    ///<summary>Name of the source to switch to. Platform dependent. eg: video1</summary>
    [JsonPropertyName("source")]
    public string? Source { get; init; }
}

public partial record MediaPlayerShuffleSetParameters
{
    ///<summary>Whether or not shuffle mode is enabled.</summary>
    [JsonPropertyName("shuffle")]
    public bool? Shuffle { get; init; }
}

public partial record MediaPlayerVolumeMuteParameters
{
    ///<summary>Defines whether or not it is muted.</summary>
    [JsonPropertyName("is_volume_muted")]
    public bool? IsVolumeMuted { get; init; }
}

public partial record MediaPlayerVolumeSetParameters
{
    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume.</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }
}

public partial class MqttServices
{
    private readonly IHaContext _haContext;
    public MqttServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    public void Dump(MqttDumpParameters data)
    {
        _haContext.CallService("mqtt", "dump", null, data);
    }

    ///<summary>Writes all messages on a specific topic into the `mqtt_dump.txt` file in your configuration folder.</summary>
    ///<param name="topic">Topic to listen to. eg: OpenZWave/#</param>
    ///<param name="duration">How long we should listen for messages in seconds.</param>
    public void Dump(string? topic = null, long? duration = null)
    {
        _haContext.CallService("mqtt", "dump", null, new MqttDumpParameters { Topic = topic, Duration = duration });
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    public void Publish(MqttPublishParameters data)
    {
        _haContext.CallService("mqtt", "publish", null, data);
    }

    ///<summary>Publishes a message to an MQTT topic.</summary>
    ///<param name="topic">Topic to publish to. eg: /homeassistant/hello</param>
    ///<param name="payload">The payload to publish. eg: This is great</param>
    ///<param name="payloadTemplate">Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</param>
    ///<param name="qos">Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</param>
    ///<param name="retain">If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</param>
    public void Publish(string topic, string? payload = null, object? payloadTemplate = null, object? qos = null, bool? retain = null)
    {
        _haContext.CallService("mqtt", "publish", null, new MqttPublishParameters { Topic = topic, Payload = payload, PayloadTemplate = payloadTemplate, Qos = qos, Retain = retain });
    }

    ///<summary>Reloads MQTT entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("mqtt", "reload", null);
    }
}

public partial record MqttDumpParameters
{
    ///<summary>Topic to listen to. eg: OpenZWave/#</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>How long we should listen for messages in seconds.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }
}

public partial record MqttPublishParameters
{
    ///<summary>Topic to publish to. eg: /homeassistant/hello</summary>
    [JsonPropertyName("topic")]
    public string? Topic { get; init; }

    ///<summary>The payload to publish. eg: This is great</summary>
    [JsonPropertyName("payload")]
    public string? Payload { get; init; }

    ///<summary>Template to render as a payload value. If a payload is provided, the template is ignored. eg: {{ states(&apos;sensor.temperature&apos;) }}</summary>
    [JsonPropertyName("payload_template")]
    public object? PayloadTemplate { get; init; }

    ///<summary>Quality of Service to use. 0: At most once. 1: At least once. 2: Exactly once.</summary>
    [JsonPropertyName("qos")]
    public object? Qos { get; init; }

    ///<summary>If the message should have the retain flag set. If set, the broker stores the most recent message on a topic.</summary>
    [JsonPropertyName("retain")]
    public bool? Retain { get; init; }
}

public partial class NetdaemonServices
{
    private readonly IHaContext _haContext;
    public NetdaemonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Create an entity</summary>
    public void EntityCreate(NetdaemonEntityCreateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_create", null, data);
    }

    ///<summary>Create an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityCreate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_create", null, new NetdaemonEntityCreateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Remove an entity</summary>
    public void EntityRemove(NetdaemonEntityRemoveParameters data)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, data);
    }

    ///<summary>Remove an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    public void EntityRemove(object? entityId = null)
    {
        _haContext.CallService("netdaemon", "entity_remove", null, new NetdaemonEntityRemoveParameters { EntityId = entityId });
    }

    ///<summary>Update an entity</summary>
    public void EntityUpdate(NetdaemonEntityUpdateParameters data)
    {
        _haContext.CallService("netdaemon", "entity_update", null, data);
    }

    ///<summary>Update an entity</summary>
    ///<param name="entityId">The entity ID of the entity eg: sensor.awesome</param>
    ///<param name="state">The state of the entity eg: Lorem ipsum</param>
    ///<param name="icon">The icon for the entity eg: mdi:rocket-launch-outline</param>
    ///<param name="unit">The unit of measurement for the entity</param>
    ///<param name="options">List of options for a select entity</param>
    ///<param name="attributes">The attributes of the entity</param>
    public void EntityUpdate(object? entityId = null, object? state = null, object? icon = null, object? unit = null, object? options = null, object? attributes = null)
    {
        _haContext.CallService("netdaemon", "entity_update", null, new NetdaemonEntityUpdateParameters { EntityId = entityId, State = state, Icon = icon, Unit = unit, Options = options, Attributes = attributes });
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    public void RegisterService(NetdaemonRegisterServiceParameters data)
    {
        _haContext.CallService("netdaemon", "register_service", null, data);
    }

    ///<summary>Register a new service for netdaemon, used by the daemon and not to be used by users</summary>
    ///<param name="service">The name of the service to register</param>
    ///<param name="class">The class that implements the service call</param>
    ///<param name="method">The method to call</param>
    public void RegisterService(object? service = null, object? @class = null, object? @method = null)
    {
        _haContext.CallService("netdaemon", "register_service", null, new NetdaemonRegisterServiceParameters { Service = service, Class = @class, Method = @method });
    }

    public void ReloadApps()
    {
        _haContext.CallService("netdaemon", "reload_apps", null);
    }
}

public partial record NetdaemonEntityCreateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonEntityRemoveParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }
}

public partial record NetdaemonEntityUpdateParameters
{
    ///<summary>The entity ID of the entity eg: sensor.awesome</summary>
    [JsonPropertyName("entity_id")]
    public object? EntityId { get; init; }

    ///<summary>The state of the entity eg: Lorem ipsum</summary>
    [JsonPropertyName("state")]
    public object? State { get; init; }

    ///<summary>The icon for the entity eg: mdi:rocket-launch-outline</summary>
    [JsonPropertyName("icon")]
    public object? Icon { get; init; }

    ///<summary>The unit of measurement for the entity</summary>
    [JsonPropertyName("unit")]
    public object? Unit { get; init; }

    ///<summary>List of options for a select entity</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The attributes of the entity</summary>
    [JsonPropertyName("attributes")]
    public object? Attributes { get; init; }
}

public partial record NetdaemonRegisterServiceParameters
{
    ///<summary>The name of the service to register</summary>
    [JsonPropertyName("service")]
    public object? Service { get; init; }

    ///<summary>The class that implements the service call</summary>
    [JsonPropertyName("class")]
    public object? Class { get; init; }

    ///<summary>The method to call</summary>
    [JsonPropertyName("method")]
    public object? Method { get; init; }
}

public partial class NotifyServices
{
    private readonly IHaContext _haContext;
    public NotifyServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    public void AlexaMedia(NotifyAlexaMediaParameters data)
    {
        _haContext.CallService("notify", "alexa_media", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMedia(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media", null, new NotifyAlexaMediaParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_asher integration.</summary>
    public void AlexaMediaAsher(NotifyAlexaMediaAsherParameters data)
    {
        _haContext.CallService("notify", "alexa_media_asher", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_asher integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaAsher(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_asher", null, new NotifyAlexaMediaAsherParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_dad_s_surface integration.</summary>
    public void AlexaMediaDadSSurface(NotifyAlexaMediaDadSSurfaceParameters data)
    {
        _haContext.CallService("notify", "alexa_media_dad_s_surface", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_dad_s_surface integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaDadSSurface(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_dad_s_surface", null, new NotifyAlexaMediaDadSSurfaceParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere integration.</summary>
    public void AlexaMediaEverywhere(NotifyAlexaMediaEverywhereParameters data)
    {
        _haContext.CallService("notify", "alexa_media_everywhere", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_everywhere integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaEverywhere(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_everywhere", null, new NotifyAlexaMediaEverywhereParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen integration.</summary>
    public void AlexaMediaKitchen(NotifyAlexaMediaKitchenParameters data)
    {
        _haContext.CallService("notify", "alexa_media_kitchen", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaKitchen(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_kitchen", null, new NotifyAlexaMediaKitchenParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen_tablet integration.</summary>
    public void AlexaMediaKitchenTablet(NotifyAlexaMediaKitchenTabletParameters data)
    {
        _haContext.CallService("notify", "alexa_media_kitchen_tablet", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_kitchen_tablet integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaKitchenTablet(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_kitchen_tablet", null, new NotifyAlexaMediaKitchenTabletParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_leonard_s_5th_fire integration.</summary>
    public void AlexaMediaLeonardS5thFire(NotifyAlexaMediaLeonardS5thFireParameters data)
    {
        _haContext.CallService("notify", "alexa_media_leonard_s_5th_fire", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_leonard_s_5th_fire integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLeonardS5thFire(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_leonard_s_5th_fire", null, new NotifyAlexaMediaLeonardS5thFireParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_living_room integration.</summary>
    public void AlexaMediaLivingRoom(NotifyAlexaMediaLivingRoomParameters data)
    {
        _haContext.CallService("notify", "alexa_media_living_room", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_living_room integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLivingRoom(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_living_room", null, new NotifyAlexaMediaLivingRoomParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_logan integration.</summary>
    public void AlexaMediaLogan(NotifyAlexaMediaLoganParameters data)
    {
        _haContext.CallService("notify", "alexa_media_logan", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_logan integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLogan(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_logan", null, new NotifyAlexaMediaLoganParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_lyra integration.</summary>
    public void AlexaMediaLyra(NotifyAlexaMediaLyraParameters data)
    {
        _haContext.CallService("notify", "alexa_media_lyra", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_lyra integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLyra(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_lyra", null, new NotifyAlexaMediaLyraParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_lyra_firetvstick integration.</summary>
    public void AlexaMediaLyraFiretvstick(NotifyAlexaMediaLyraFiretvstickParameters data)
    {
        _haContext.CallService("notify", "alexa_media_lyra_firetvstick", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_lyra_firetvstick integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaLyraFiretvstick(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_lyra_firetvstick", null, new NotifyAlexaMediaLyraFiretvstickParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_main_bedroom integration.</summary>
    public void AlexaMediaMainBedroom(NotifyAlexaMediaMainBedroomParameters data)
    {
        _haContext.CallService("notify", "alexa_media_main_bedroom", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_main_bedroom integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaMainBedroom(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_main_bedroom", null, new NotifyAlexaMediaMainBedroomParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_office integration.</summary>
    public void AlexaMediaOffice(NotifyAlexaMediaOfficeParameters data)
    {
        _haContext.CallService("notify", "alexa_media_office", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_office integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaOffice(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_office", null, new NotifyAlexaMediaOfficeParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    public void AlexaMediaThisDevice(NotifyAlexaMediaThisDeviceParameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaThisDevice(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device", null, new NotifyAlexaMediaThisDeviceParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_this_device_2 integration.</summary>
    public void AlexaMediaThisDevice2(NotifyAlexaMediaThisDevice2Parameters data)
    {
        _haContext.CallService("notify", "alexa_media_this_device_2", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_this_device_2 integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaThisDevice2(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_this_device_2", null, new NotifyAlexaMediaThisDevice2Parameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the alexa_media_tv integration.</summary>
    public void AlexaMediaTv(NotifyAlexaMediaTvParameters data)
    {
        _haContext.CallService("notify", "alexa_media_tv", null, data);
    }

    ///<summary>Sends a notification message using the alexa_media_tv integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void AlexaMediaTv(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "alexa_media_tv", null, new NotifyAlexaMediaTvParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_leonardphone integration.</summary>
    public void MobileAppLeonardphone(NotifyMobileAppLeonardphoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_leonardphone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_leonardphone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppLeonardphone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_leonardphone", null, new NotifyMobileAppLeonardphoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_rachel_phone integration.</summary>
    public void MobileAppRachelPhone(NotifyMobileAppRachelPhoneParameters data)
    {
        _haContext.CallService("notify", "mobile_app_rachel_phone", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_rachel_phone integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppRachelPhone(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_rachel_phone", null, new NotifyMobileAppRachelPhoneParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_rt7_titan_5g integration.</summary>
    public void MobileAppRt7Titan5g(NotifyMobileAppRt7Titan5gParameters data)
    {
        _haContext.CallService("notify", "mobile_app_rt7_titan_5g", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_rt7_titan_5g integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppRt7Titan5g(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_rt7_titan_5g", null, new NotifyMobileAppRt7Titan5gParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the mobile_app_rt7_titan_5g_fam integration.</summary>
    public void MobileAppRt7Titan5gFam(NotifyMobileAppRt7Titan5gFamParameters data)
    {
        _haContext.CallService("notify", "mobile_app_rt7_titan_5g_fam", null, data);
    }

    ///<summary>Sends a notification message using the mobile_app_rt7_titan_5g_fam integration.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MobileAppRt7Titan5gFam(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "mobile_app_rt7_titan_5g_fam", null, new NotifyMobileAppRt7Titan5gFamParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the my_notify_group service.</summary>
    public void MyNotifyGroup(NotifyMyNotifyGroupParameters data)
    {
        _haContext.CallService("notify", "my_notify_group", null, data);
    }

    ///<summary>Sends a notification message using the my_notify_group service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void MyNotifyGroup(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "my_notify_group", null, new NotifyMyNotifyGroupParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    public void Notify(NotifyNotifyParameters data)
    {
        _haContext.CallService("notify", "notify", null, data);
    }

    ///<summary>Sends a notification message using the notify service.</summary>
    ///<param name="message"> eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title"> eg: Your Garage Door Friend</param>
    ///<param name="target"> eg: platform specific</param>
    ///<param name="data"> eg: platform specific</param>
    public void Notify(string message, string? title = null, object? target = null, object? data = null)
    {
        _haContext.CallService("notify", "notify", null, new NotifyNotifyParameters { Message = message, Title = title, Target = target, Data = data });
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    public void PersistentNotification(NotifyPersistentNotificationParameters data)
    {
        _haContext.CallService("notify", "persistent_notification", null, data);
    }

    ///<summary>Sends a notification that is visible in the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: The garage door has been open for 10 minutes.</param>
    ///<param name="title">Title of the notification. eg: Your Garage Door Friend</param>
    ///<param name="data">Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</param>
    public void PersistentNotification(string message, string? title = null, object? data = null)
    {
        _haContext.CallService("notify", "persistent_notification", null, new NotifyPersistentNotificationParameters { Message = message, Title = title, Data = data });
    }
}

public partial record NotifyAlexaMediaParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaAsherParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaDadSSurfaceParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaEverywhereParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaKitchenParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaKitchenTabletParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLeonardS5thFireParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLivingRoomParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLoganParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLyraParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaLyraFiretvstickParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaMainBedroomParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaOfficeParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDeviceParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaThisDevice2Parameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyAlexaMediaTvParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppLeonardphoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppRachelPhoneParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppRt7Titan5gParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMobileAppRt7Titan5gFamParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyMyNotifyGroupParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyNotifyParameters
{
    ///<summary> eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary> eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("target")]
    public object? Target { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial record NotifyPersistentNotificationParameters
{
    ///<summary>Message body of the notification. eg: The garage door has been open for 10 minutes.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Title of the notification. eg: Your Garage Door Friend</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>Some integrations provide extended functionality. For information on how to use _data_, refer to the integration documentation.. eg: platform specific</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }
}

public partial class NumberServices
{
    private readonly IHaContext _haContext;
    public NumberServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, NumberSetValueParameters data)
    {
        _haContext.CallService("number", "set_value", target, data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public void SetValue(ServiceTarget target, string? value = null)
    {
        _haContext.CallService("number", "set_value", target, new NumberSetValueParameters { Value = value });
    }
}

public partial record NumberSetValueParameters
{
    ///<summary>The target value to set. eg: 42</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class PersistentNotificationServices
{
    private readonly IHaContext _haContext;
    public PersistentNotificationServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    public void Create(PersistentNotificationCreateParameters data)
    {
        _haContext.CallService("persistent_notification", "create", null, data);
    }

    ///<summary>Shows a notification on the **Notifications** panel.</summary>
    ///<param name="message">Message body of the notification. eg: Please check your configuration.yaml.</param>
    ///<param name="title">Optional title of the notification. eg: Test notification</param>
    ///<param name="notificationId">ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</param>
    public void Create(string message, string? title = null, string? notificationId = null)
    {
        _haContext.CallService("persistent_notification", "create", null, new PersistentNotificationCreateParameters { Message = message, Title = title, NotificationId = notificationId });
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    public void Dismiss(PersistentNotificationDismissParameters data)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, data);
    }

    ///<summary>Removes a notification from the **Notifications** panel.</summary>
    ///<param name="notificationId">ID of the notification to be removed. eg: 1234</param>
    public void Dismiss(string notificationId)
    {
        _haContext.CallService("persistent_notification", "dismiss", null, new PersistentNotificationDismissParameters { NotificationId = notificationId });
    }

    ///<summary>Removes all notifications from the **Notifications** panel.</summary>
    public void DismissAll()
    {
        _haContext.CallService("persistent_notification", "dismiss_all", null);
    }
}

public partial record PersistentNotificationCreateParameters
{
    ///<summary>Message body of the notification. eg: Please check your configuration.yaml.</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Optional title of the notification. eg: Test notification</summary>
    [JsonPropertyName("title")]
    public string? Title { get; init; }

    ///<summary>ID of the notification. This new notification will overwrite an existing notification with the same ID. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial record PersistentNotificationDismissParameters
{
    ///<summary>ID of the notification to be removed. eg: 1234</summary>
    [JsonPropertyName("notification_id")]
    public string? NotificationId { get; init; }
}

public partial class PersonServices
{
    private readonly IHaContext _haContext;
    public PersonServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads persons from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("person", "reload", null);
    }
}

public partial class RecorderServices
{
    private readonly IHaContext _haContext;
    public RecorderServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Stops the recording of events and state changes.</summary>
    public void Disable()
    {
        _haContext.CallService("recorder", "disable", null);
    }

    ///<summary>Starts the recording of events and state changes.</summary>
    public void Enable()
    {
        _haContext.CallService("recorder", "enable", null);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    public void Purge(RecorderPurgeParameters data)
    {
        _haContext.CallService("recorder", "purge", null, data);
    }

    ///<summary>Starts purge task - to clean up old data from your database.</summary>
    ///<param name="keepDays">Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</param>
    ///<param name="repack">Attempt to save disk space by rewriting the entire database file.</param>
    ///<param name="applyFilter">Applys `entity_id` and `event_type` filters in addition to time-based purge.</param>
    public void Purge(long? keepDays = null, bool? repack = null, bool? applyFilter = null)
    {
        _haContext.CallService("recorder", "purge", null, new RecorderPurgeParameters { KeepDays = keepDays, Repack = repack, ApplyFilter = applyFilter });
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    public void PurgeEntities(ServiceTarget target, RecorderPurgeEntitiesParameters data)
    {
        _haContext.CallService("recorder", "purge_entities", target, data);
    }

    ///<summary>Starts a purge task to remove the data related to specific entities from your database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="domains">List of domains for which the data needs to be removed from the recorder database. eg: sun</param>
    ///<param name="entityGlobs">List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</param>
    ///<param name="keepDays">Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</param>
    public void PurgeEntities(ServiceTarget target, object? domains = null, object? entityGlobs = null, long? keepDays = null)
    {
        _haContext.CallService("recorder", "purge_entities", target, new RecorderPurgeEntitiesParameters { Domains = domains, EntityGlobs = entityGlobs, KeepDays = keepDays });
    }
}

public partial record RecorderPurgeParameters
{
    ///<summary>Number of days to keep the data in the database. Starting today, counting backward. A value of `7` means that everything older than a week will be purged.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }

    ///<summary>Attempt to save disk space by rewriting the entire database file.</summary>
    [JsonPropertyName("repack")]
    public bool? Repack { get; init; }

    ///<summary>Applys `entity_id` and `event_type` filters in addition to time-based purge.</summary>
    [JsonPropertyName("apply_filter")]
    public bool? ApplyFilter { get; init; }
}

public partial record RecorderPurgeEntitiesParameters
{
    ///<summary>List of domains for which the data needs to be removed from the recorder database. eg: sun</summary>
    [JsonPropertyName("domains")]
    public object? Domains { get; init; }

    ///<summary>List of glob patterns used to select the entities for which the data is to be removed from the recorder database. eg: domain*.object_id*</summary>
    [JsonPropertyName("entity_globs")]
    public object? EntityGlobs { get; init; }

    ///<summary>Number of days to keep the data for rows matching the filter. Starting today, counting backward. A value of `7` means that everything older than a week will be purged. The default of 0 days will remove all matching rows immediately.</summary>
    [JsonPropertyName("keep_days")]
    public long? KeepDays { get; init; }
}

public partial class RemoteServices
{
    private readonly IHaContext _haContext;
    public RemoteServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    public void DeleteCommand(ServiceTarget target, RemoteDeleteCommandParameters data)
    {
        _haContext.CallService("remote", "delete_command", target, data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public void DeleteCommand(ServiceTarget target, object command, string? device = null)
    {
        _haContext.CallService("remote", "delete_command", target, new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void LearnCommand(ServiceTarget target, RemoteLearnCommandParameters data)
    {
        _haContext.CallService("remote", "learn_command", target, data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public void LearnCommand(ServiceTarget target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        _haContext.CallService("remote", "learn_command", target, new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, RemoteSendCommandParameters data)
    {
        _haContext.CallService("remote", "send_command", target, data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public void SendCommand(ServiceTarget target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        _haContext.CallService("remote", "send_command", target, new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("remote", "toggle", target);
    }

    ///<summary>Turns the device off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("remote", "turn_off", target);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, RemoteTurnOnParameters data)
    {
        _haContext.CallService("remote", "turn_on", target, data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public void TurnOn(ServiceTarget target, string? activity = null)
    {
        _haContext.CallService("remote", "turn_on", target, new RemoteTurnOnParameters { Activity = activity });
    }
}

public partial record RemoteDeleteCommandParameters
{
    ///<summary>Device from which commands will be deleted. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>The single command or the list of commands to be deleted. eg: Mute</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }
}

public partial record RemoteLearnCommandParameters
{
    ///<summary>Device ID to learn command from. eg: television</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to learn. eg: Turn on</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The type of command to be learned.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</summary>
    [JsonPropertyName("alternative")]
    public bool? Alternative { get; init; }

    ///<summary>Timeout for the command to be learned.</summary>
    [JsonPropertyName("timeout")]
    public long? Timeout { get; init; }
}

public partial record RemoteSendCommandParameters
{
    ///<summary>Device ID to send command to. eg: 32756745</summary>
    [JsonPropertyName("device")]
    public string? Device { get; init; }

    ///<summary>A single command or a list of commands to send. eg: Play</summary>
    [JsonPropertyName("command")]
    public object? Command { get; init; }

    ///<summary>The number of times you want to repeat the commands.</summary>
    [JsonPropertyName("num_repeats")]
    public long? NumRepeats { get; init; }

    ///<summary>The time you want to wait in between repeated commands.</summary>
    [JsonPropertyName("delay_secs")]
    public double? DelaySecs { get; init; }

    ///<summary>The time you want to have it held before the release is send.</summary>
    [JsonPropertyName("hold_secs")]
    public double? HoldSecs { get; init; }
}

public partial record RemoteTurnOnParameters
{
    ///<summary>Activity ID or activity name to be started. eg: BedroomTV</summary>
    [JsonPropertyName("activity")]
    public string? Activity { get; init; }
}

public partial class RokuServices
{
    private readonly IHaContext _haContext;
    public RokuServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Emulates opening the search screen and entering the search keyword.</summary>
    ///<param name="target">The target for this service call</param>
    public void Search(ServiceTarget target, RokuSearchParameters data)
    {
        _haContext.CallService("roku", "search", target, data);
    }

    ///<summary>Emulates opening the search screen and entering the search keyword.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="keyword">The keyword to search for. eg: Space Jam</param>
    public void Search(ServiceTarget target, string keyword)
    {
        _haContext.CallService("roku", "search", target, new RokuSearchParameters { Keyword = keyword });
    }
}

public partial record RokuSearchParameters
{
    ///<summary>The keyword to search for. eg: Space Jam</summary>
    [JsonPropertyName("keyword")]
    public string? Keyword { get; init; }
}

public partial class SceneServices
{
    private readonly IHaContext _haContext;
    public SceneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Activates a scene with configuration.</summary>
    public void Apply(SceneApplyParameters data)
    {
        _haContext.CallService("scene", "apply", null, data);
    }

    ///<summary>Activates a scene with configuration.</summary>
    ///<param name="entities">List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void Apply(object entities, long? transition = null)
    {
        _haContext.CallService("scene", "apply", null, new SceneApplyParameters { Entities = entities, Transition = transition });
    }

    ///<summary>Creates a new scene.</summary>
    public void Create(SceneCreateParameters data)
    {
        _haContext.CallService("scene", "create", null, data);
    }

    ///<summary>Creates a new scene.</summary>
    ///<param name="sceneId">The entity ID of the new scene. eg: all_lights</param>
    ///<param name="entities">List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </param>
    ///<param name="snapshotEntities">List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </param>
    public void Create(string sceneId, object? entities = null, IEnumerable<string>? snapshotEntities = null)
    {
        _haContext.CallService("scene", "create", null, new SceneCreateParameters { SceneId = sceneId, Entities = entities, SnapshotEntities = snapshotEntities });
    }

    ///<summary>Reloads the scenes from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("scene", "reload", null);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SceneTurnOnParameters data)
    {
        _haContext.CallService("scene", "turn_on", target, data);
    }

    ///<summary>Activates a scene.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="transition">Time it takes the devices to transition into the states defined in the scene.</param>
    public void TurnOn(ServiceTarget target, long? transition = null)
    {
        _haContext.CallService("scene", "turn_on", target, new SceneTurnOnParameters { Transition = transition });
    }
}

public partial record SceneApplyParameters
{
    ///<summary>List of entities and their target state. eg: light.kitchen: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 80 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial record SceneCreateParameters
{
    ///<summary>The entity ID of the new scene. eg: all_lights</summary>
    [JsonPropertyName("scene_id")]
    public string? SceneId { get; init; }

    ///<summary>List of entities and their target state. If your entities are already in the target state right now, use `snapshot_entities` instead. eg: light.tv_back_light: &quot;on&quot; light.ceiling:   state: &quot;on&quot;   brightness: 200 </summary>
    [JsonPropertyName("entities")]
    public object? Entities { get; init; }

    ///<summary>List of entities to be included in the snapshot. By taking a snapshot, you record the current state of those entities. If you do not want to use the current state of all your entities for this scene, you can combine the `snapshot_entities` with `entities`. eg: - light.ceiling - light.kitchen </summary>
    [JsonPropertyName("snapshot_entities")]
    public IEnumerable<string>? SnapshotEntities { get; init; }
}

public partial record SceneTurnOnParameters
{
    ///<summary>Time it takes the devices to transition into the states defined in the scene.</summary>
    [JsonPropertyName("transition")]
    public long? Transition { get; init; }
}

public partial class ScheduleServices
{
    private readonly IHaContext _haContext;
    public ScheduleServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads schedules from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("schedule", "reload", null);
    }
}

public partial class ScriptServices
{
    private readonly IHaContext _haContext;
    public ScriptServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    public void CloseGarage1()
    {
        _haContext.CallService("script", "close_garage_1", null);
    }

    public void CloseGarage2()
    {
        _haContext.CallService("script", "close_garage_2", null);
    }

    ///<summary>Reloads all the available scripts.</summary>
    public void Reload()
    {
        _haContext.CallService("script", "reload", null);
    }

    public void ShowFrontPorch()
    {
        _haContext.CallService("script", "show_front_porch", null);
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("script", "toggle", target);
    }

    ///<summary>Stops a running script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_off", target);
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("script", "turn_on", target);
    }
}

public partial class SelectServices
{
    private readonly IHaContext _haContext;
    public SelectServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Selects the first option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectFirst(ServiceTarget target)
    {
        _haContext.CallService("select", "select_first", target);
    }

    ///<summary>Selects the last option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectLast(ServiceTarget target)
    {
        _haContext.CallService("select", "select_last", target);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectNext(ServiceTarget target, SelectSelectNextParameters data)
    {
        _haContext.CallService("select", "select_next", target, data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public void SelectNext(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_next", target, new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectOption(ServiceTarget target, SelectSelectOptionParameters data)
    {
        _haContext.CallService("select", "select_option", target, data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public void SelectOption(ServiceTarget target, string option)
    {
        _haContext.CallService("select", "select_option", target, new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    public void SelectPrevious(ServiceTarget target, SelectSelectPreviousParameters data)
    {
        _haContext.CallService("select", "select_previous", target, data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public void SelectPrevious(ServiceTarget target, bool? cycle = null)
    {
        _haContext.CallService("select", "select_previous", target, new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public partial record SelectSelectNextParameters
{
    ///<summary>If the option should cycle from the last to the first.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial record SelectSelectOptionParameters
{
    ///<summary>Option to be selected. eg: &quot;Item A&quot;</summary>
    [JsonPropertyName("option")]
    public string? Option { get; init; }
}

public partial record SelectSelectPreviousParameters
{
    ///<summary>If the option should cycle from the first to the last.</summary>
    [JsonPropertyName("cycle")]
    public bool? Cycle { get; init; }
}

public partial class ShoppingListServices
{
    private readonly IHaContext _haContext;
    public ShoppingListServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Adds an item to the shopping list.</summary>
    public void AddItem(ShoppingListAddItemParameters data)
    {
        _haContext.CallService("shopping_list", "add_item", null, data);
    }

    ///<summary>Adds an item to the shopping list.</summary>
    ///<param name="name">The name of the item to add. eg: Beer</param>
    public void AddItem(string name)
    {
        _haContext.CallService("shopping_list", "add_item", null, new ShoppingListAddItemParameters { Name = name });
    }

    ///<summary>Clears completed items from the shopping list.</summary>
    public void ClearCompletedItems()
    {
        _haContext.CallService("shopping_list", "clear_completed_items", null);
    }

    ///<summary>Marks all items as completed in the shopping list (without removing them from the list).</summary>
    public void CompleteAll()
    {
        _haContext.CallService("shopping_list", "complete_all", null);
    }

    ///<summary>Marks the first item with matching name as completed in the shopping list.</summary>
    public void CompleteItem(ShoppingListCompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "complete_item", null, data);
    }

    ///<summary>Marks the first item with matching name as completed in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as completed (without removing). eg: Beer</param>
    public void CompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "complete_item", null, new ShoppingListCompleteItemParameters { Name = name });
    }

    ///<summary>Marks all items as incomplete in the shopping list.</summary>
    public void IncompleteAll()
    {
        _haContext.CallService("shopping_list", "incomplete_all", null);
    }

    ///<summary>Marks the first item with matching name as incomplete in the shopping list.</summary>
    public void IncompleteItem(ShoppingListIncompleteItemParameters data)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, data);
    }

    ///<summary>Marks the first item with matching name as incomplete in the shopping list.</summary>
    ///<param name="name">The name of the item to mark as incomplete. eg: Beer</param>
    public void IncompleteItem(string name)
    {
        _haContext.CallService("shopping_list", "incomplete_item", null, new ShoppingListIncompleteItemParameters { Name = name });
    }

    ///<summary>Removes the first item with matching name from the shopping list.</summary>
    public void RemoveItem(ShoppingListRemoveItemParameters data)
    {
        _haContext.CallService("shopping_list", "remove_item", null, data);
    }

    ///<summary>Removes the first item with matching name from the shopping list.</summary>
    ///<param name="name">The name of the item to remove. eg: Beer</param>
    public void RemoveItem(string name)
    {
        _haContext.CallService("shopping_list", "remove_item", null, new ShoppingListRemoveItemParameters { Name = name });
    }

    ///<summary>Sorts all items by name in the shopping list.</summary>
    public void Sort(ShoppingListSortParameters data)
    {
        _haContext.CallService("shopping_list", "sort", null, data);
    }

    ///<summary>Sorts all items by name in the shopping list.</summary>
    ///<param name="reverse">Whether to sort in reverse (descending) order.</param>
    public void Sort(bool? reverse = null)
    {
        _haContext.CallService("shopping_list", "sort", null, new ShoppingListSortParameters { Reverse = reverse });
    }
}

public partial record ShoppingListAddItemParameters
{
    ///<summary>The name of the item to add. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListCompleteItemParameters
{
    ///<summary>The name of the item to mark as completed (without removing). eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListIncompleteItemParameters
{
    ///<summary>The name of the item to mark as incomplete. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListRemoveItemParameters
{
    ///<summary>The name of the item to remove. eg: Beer</summary>
    [JsonPropertyName("name")]
    public string? Name { get; init; }
}

public partial record ShoppingListSortParameters
{
    ///<summary>Whether to sort in reverse (descending) order.</summary>
    [JsonPropertyName("reverse")]
    public bool? Reverse { get; init; }
}

public partial class SirenServices
{
    private readonly IHaContext _haContext;
    public SirenServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles the siren on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("siren", "toggle", target);
    }

    ///<summary>Turns the siren off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("siren", "turn_off", target);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target, SirenTurnOnParameters data)
    {
        _haContext.CallService("siren", "turn_on", target, data);
    }

    ///<summary>Turns the siren on.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="tone">The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</param>
    ///<param name="duration">Number of seconds the sound is played. Must be supported by the integration. eg: 15</param>
    public void TurnOn(ServiceTarget target, string? tone = null, double? volumeLevel = null, string? duration = null)
    {
        _haContext.CallService("siren", "turn_on", target, new SirenTurnOnParameters { Tone = tone, VolumeLevel = volumeLevel, Duration = duration });
    }
}

public partial record SirenTurnOnParameters
{
    ///<summary>The tone to emit. When `available_tones` property is a map, either the key or the value can be used. Must be supported by the integration. eg: fire</summary>
    [JsonPropertyName("tone")]
    public string? Tone { get; init; }

    ///<summary>The volume. 0 is inaudible, 1 is the maximum volume. Must be supported by the integration. eg: 0.5</summary>
    [JsonPropertyName("volume_level")]
    public double? VolumeLevel { get; init; }

    ///<summary>Number of seconds the sound is played. Must be supported by the integration. eg: 15</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class SwitchServices
{
    private readonly IHaContext _haContext;
    public SwitchServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Toggles a switch on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void Toggle(ServiceTarget target)
    {
        _haContext.CallService("switch", "toggle", target);
    }

    ///<summary>Turns a switch off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_off", target);
    }

    ///<summary>Turns a switch on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("switch", "turn_on", target);
    }
}

public partial class SystemLogServices
{
    private readonly IHaContext _haContext;
    public SystemLogServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears all log entries.</summary>
    public void Clear()
    {
        _haContext.CallService("system_log", "clear", null);
    }

    ///<summary>Write log entry.</summary>
    public void Write(SystemLogWriteParameters data)
    {
        _haContext.CallService("system_log", "write", null, data);
    }

    ///<summary>Write log entry.</summary>
    ///<param name="message">Message to log. eg: Something went wrong</param>
    ///<param name="level">Log level.</param>
    ///<param name="logger">Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</param>
    public void Write(string message, object? level = null, string? logger = null)
    {
        _haContext.CallService("system_log", "write", null, new SystemLogWriteParameters { Message = message, Level = level, Logger = logger });
    }
}

public partial record SystemLogWriteParameters
{
    ///<summary>Message to log. eg: Something went wrong</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Log level.</summary>
    [JsonPropertyName("level")]
    public object? Level { get; init; }

    ///<summary>Logger name under which to log the message. Defaults to `system_log.external`. eg: mycomponent.myplatform</summary>
    [JsonPropertyName("logger")]
    public string? Logger { get; init; }
}

public partial class TemplateServices
{
    private readonly IHaContext _haContext;
    public TemplateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads template entities from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("template", "reload", null);
    }
}

public partial class TextServices
{
    private readonly IHaContext _haContext;
    public TextServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, TextSetValueParameters data)
    {
        _haContext.CallService("text", "set_value", target, data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="value">Enter your text. eg: Hello world!</param>
    public void SetValue(ServiceTarget target, string value)
    {
        _haContext.CallService("text", "set_value", target, new TextSetValueParameters { Value = value });
    }
}

public partial record TextSetValueParameters
{
    ///<summary>Enter your text. eg: Hello world!</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial class TimerServices
{
    private readonly IHaContext _haContext;
    public TimerServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Cancels a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Cancel(ServiceTarget target)
    {
        _haContext.CallService("timer", "cancel", target);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Change(ServiceTarget target, TimerChangeParameters data)
    {
        _haContext.CallService("timer", "change", target, data);
    }

    ///<summary>Changes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</param>
    public void Change(ServiceTarget target, string duration)
    {
        _haContext.CallService("timer", "change", target, new TimerChangeParameters { Duration = duration });
    }

    ///<summary>Finishes a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Finish(ServiceTarget target)
    {
        _haContext.CallService("timer", "finish", target);
    }

    ///<summary>Pauses a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("timer", "pause", target);
    }

    ///<summary>Reloads timers from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("timer", "reload", null);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target, TimerStartParameters data)
    {
        _haContext.CallService("timer", "start", target, data);
    }

    ///<summary>Starts a timer.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="duration">Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</param>
    public void Start(ServiceTarget target, string? duration = null)
    {
        _haContext.CallService("timer", "start", target, new TimerStartParameters { Duration = duration });
    }
}

public partial record TimerChangeParameters
{
    ///<summary>Duration to add or subtract to the running timer. eg: 00:01:00, 60 or -60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial record TimerStartParameters
{
    ///<summary>Duration the timer requires to finish. [optional]. eg: 00:01:00 or 60</summary>
    [JsonPropertyName("duration")]
    public string? Duration { get; init; }
}

public partial class TodoServices
{
    private readonly IHaContext _haContext;
    public TodoServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    public void AddItem(ServiceTarget target, TodoAddItemParameters data)
    {
        _haContext.CallService("todo", "add_item", target, data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    public void AddItem(ServiceTarget target, string item)
    {
        _haContext.CallService("todo", "add_item", target, new TodoAddItemParameters { Item = item });
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void RemoveItem(ServiceTarget target, TodoRemoveItemParameters data)
    {
        _haContext.CallService("todo", "remove_item", target, data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name for the to-do list items.</param>
    public void RemoveItem(ServiceTarget target, string item)
    {
        _haContext.CallService("todo", "remove_item", target, new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    public void UpdateItem(ServiceTarget target, TodoUpdateItemParameters data)
    {
        _haContext.CallService("todo", "update_item", target, data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    public void UpdateItem(ServiceTarget target, string item, string? rename = null, object? status = null)
    {
        _haContext.CallService("todo", "update_item", target, new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status });
    }
}

public partial record TodoAddItemParameters
{
    ///<summary>The name that represents the to-do item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }
}

public partial record TodoRemoveItemParameters
{
    ///<summary>The name for the to-do list items.</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }
}

public partial record TodoUpdateItemParameters
{
    ///<summary>The name for the to-do list item. eg: Submit income tax return</summary>
    [JsonPropertyName("item")]
    public string? Item { get; init; }

    ///<summary>The new name of the to-do item eg: Something else</summary>
    [JsonPropertyName("rename")]
    public string? Rename { get; init; }

    ///<summary>A status or confirmation of the to-do item. eg: needs_action</summary>
    [JsonPropertyName("status")]
    public object? Status { get; init; }
}

public partial class TtsServices
{
    private readonly IHaContext _haContext;
    public TtsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes all cached text-to-speech files and purges the memory.</summary>
    public void ClearCache()
    {
        _haContext.CallService("tts", "clear_cache", null);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    public void CloudSay(TtsCloudSayParameters data)
    {
        _haContext.CallService("tts", "cloud_say", null, data);
    }

    ///<summary>Say something using text-to-speech on a media player with cloud.</summary>
    ///<param name="entityId"></param>
    ///<param name="message"> eg: My name is hanna</param>
    ///<param name="cache"></param>
    ///<param name="language"> eg: ru</param>
    ///<param name="options"> eg: platform specific</param>
    public void CloudSay(string entityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "cloud_say", null, new TtsCloudSayParameters { EntityId = entityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    public void Speak(ServiceTarget target, TtsSpeakParameters data)
    {
        _haContext.CallService("tts", "speak", target, data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public void Speak(ServiceTarget target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        _haContext.CallService("tts", "speak", target, new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public partial record TtsCloudSayParameters
{
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary> eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary> eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary> eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial record TtsSpeakParameters
{
    ///<summary>Media players to play the message.</summary>
    [JsonPropertyName("media_player_entity_id")]
    public string? MediaPlayerEntityId { get; init; }

    ///<summary>The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</summary>
    [JsonPropertyName("message")]
    public string? Message { get; init; }

    ///<summary>Stores this message locally so that when the text is requested again, the output can be produced more quickly.</summary>
    [JsonPropertyName("cache")]
    public bool? Cache { get; init; }

    ///<summary>Language to use for speech generation. eg: ru</summary>
    [JsonPropertyName("language")]
    public string? Language { get; init; }

    ///<summary>A dictionary containing integration-specific options. eg: platform specific</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }
}

public partial class UpdateServices
{
    private readonly IHaContext _haContext;
    public UpdateServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearSkipped(ServiceTarget target)
    {
        _haContext.CallService("update", "clear_skipped", target);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    public void Install(ServiceTarget target, UpdateInstallParameters data)
    {
        _haContext.CallService("update", "install", target, data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public void Install(ServiceTarget target, string? version = null, bool? backup = null)
    {
        _haContext.CallService("update", "install", target, new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    ///<param name="target">The target for this service call</param>
    public void Skip(ServiceTarget target)
    {
        _haContext.CallService("update", "skip", target);
    }
}

public partial record UpdateInstallParameters
{
    ///<summary>The version to install. If omitted, the latest version will be installed. eg: 1.0.0</summary>
    [JsonPropertyName("version")]
    public string? Version { get; init; }

    ///<summary>If supported by the integration, this creates a backup before starting the update .</summary>
    [JsonPropertyName("backup")]
    public bool? Backup { get; init; }
}

public partial class VacuumServices
{
    private readonly IHaContext _haContext;
    public VacuumServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Tells the vacuum cleaner to do a spot clean-up.</summary>
    ///<param name="target">The target for this service call</param>
    public void CleanSpot(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "clean_spot", target);
    }

    ///<summary>Locates the vacuum cleaner robot.</summary>
    ///<param name="target">The target for this service call</param>
    public void Locate(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "locate", target);
    }

    ///<summary>Pauses the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Pause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "pause", target);
    }

    ///<summary>Tells the vacuum cleaner to return to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ReturnToBase(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "return_to_base", target);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SendCommand(ServiceTarget target, VacuumSendCommandParameters data)
    {
        _haContext.CallService("vacuum", "send_command", target, data);
    }

    ///<summary>Sends a command to the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="command">Command to execute. The commands are integration-specific. eg: set_dnd_timer</param>
    ///<param name="params">Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</param>
    public void SendCommand(ServiceTarget target, string command, object? @params = null)
    {
        _haContext.CallService("vacuum", "send_command", target, new VacuumSendCommandParameters { Command = command, Params = @params });
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetFanSpeed(ServiceTarget target, VacuumSetFanSpeedParameters data)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, data);
    }

    ///<summary>Sets the fan speed of the vacuum cleaner.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="fanSpeed">Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</param>
    public void SetFanSpeed(ServiceTarget target, string fanSpeed)
    {
        _haContext.CallService("vacuum", "set_fan_speed", target, new VacuumSetFanSpeedParameters { FanSpeed = fanSpeed });
    }

    ///<summary>Starts or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Start(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start", target);
    }

    ///<summary>Starts, pauses, or resumes the cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void StartPause(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "start_pause", target);
    }

    ///<summary>Stops the current cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void Stop(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "stop", target);
    }

    public void Toggle()
    {
        _haContext.CallService("vacuum", "toggle", null);
    }

    ///<summary>Stops the current cleaning task and returns to its dock.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_off", target);
    }

    ///<summary>Starts a new cleaning task.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("vacuum", "turn_on", target);
    }
}

public partial record VacuumSendCommandParameters
{
    ///<summary>Command to execute. The commands are integration-specific. eg: set_dnd_timer</summary>
    [JsonPropertyName("command")]
    public string? Command { get; init; }

    ///<summary>Parameters for the command. The parameters are integration-specific. eg: { &quot;key&quot;: &quot;value&quot; }</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }
}

public partial record VacuumSetFanSpeedParameters
{
    ///<summary>Fan speed. The value depends on the integration. Some integrations have speed steps, like &apos;medium&apos;. Some use a percentage, between 0 and 100. eg: low</summary>
    [JsonPropertyName("fan_speed")]
    public string? FanSpeed { get; init; }
}

public partial class WatchmanServices
{
    private readonly IHaContext _haContext;
    public WatchmanServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Run watchman report</summary>
    public void Report(WatchmanReportParameters data)
    {
        _haContext.CallService("watchman", "report", null, data);
    }

    ///<summary>Run watchman report</summary>
    ///<param name="createFile">Whether report file should be created (optional, true by default) eg: True</param>
    ///<param name="sendNotification">Whether report should be sent via notification service (optional, false by default) eg: True</param>
    ///<param name="service">Notification service to send report via (optional). Overrides &quot;service&quot; setting from watchman configuration eg: notify.telegram</param>
    ///<param name="data">Additional data in form of key:value pairs for notification service (optional) eg: parse_mode: html</param>
    ///<param name="parseConfig">Parse configuration files before report is created. Usually this is done by watchman automatically, so this flag is not required. (optional, false by default) eg: True</param>
    ///<param name="chunkSize">Maximum message size in bytes. If report size exceeds chunk_size, the report will be sent in several subsequent notifications. (optional, default is 3500 or whatever specified in integration settings) eg: True</param>
    public void Report(bool? createFile = null, bool? sendNotification = null, string? service = null, object? data = null, bool? parseConfig = null, long? chunkSize = null)
    {
        _haContext.CallService("watchman", "report", null, new WatchmanReportParameters { CreateFile = createFile, SendNotification = sendNotification, Service = service, Data = data, ParseConfig = parseConfig, ChunkSize = chunkSize });
    }
}

public partial record WatchmanReportParameters
{
    ///<summary>Whether report file should be created (optional, true by default) eg: True</summary>
    [JsonPropertyName("create_file")]
    public bool? CreateFile { get; init; }

    ///<summary>Whether report should be sent via notification service (optional, false by default) eg: True</summary>
    [JsonPropertyName("send_notification")]
    public bool? SendNotification { get; init; }

    ///<summary>Notification service to send report via (optional). Overrides &quot;service&quot; setting from watchman configuration eg: notify.telegram</summary>
    [JsonPropertyName("service")]
    public string? Service { get; init; }

    ///<summary>Additional data in form of key:value pairs for notification service (optional) eg: parse_mode: html</summary>
    [JsonPropertyName("data")]
    public object? Data { get; init; }

    ///<summary>Parse configuration files before report is created. Usually this is done by watchman automatically, so this flag is not required. (optional, false by default) eg: True</summary>
    [JsonPropertyName("parse_config")]
    public bool? ParseConfig { get; init; }

    ///<summary>Maximum message size in bytes. If report size exceeds chunk_size, the report will be sent in several subsequent notifications. (optional, default is 3500 or whatever specified in integration settings) eg: True</summary>
    [JsonPropertyName("chunk_size")]
    public long? ChunkSize { get; init; }
}

public partial class WaterHeaterServices
{
    private readonly IHaContext _haContext;
    public WaterHeaterServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetAwayMode(ServiceTarget target, WaterHeaterSetAwayModeParameters data)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="awayMode">New value of away mode.</param>
    public void SetAwayMode(ServiceTarget target, bool awayMode)
    {
        _haContext.CallService("water_heater", "set_away_mode", target, new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetOperationMode(ServiceTarget target, WaterHeaterSetOperationModeParameters data)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetOperationMode(ServiceTarget target, string operationMode)
    {
        _haContext.CallService("water_heater", "set_operation_mode", target, new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetTemperature(ServiceTarget target, WaterHeaterSetTemperatureParameters data)
    {
        _haContext.CallService("water_heater", "set_temperature", target, data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public void SetTemperature(ServiceTarget target, double temperature, string? operationMode = null)
    {
        _haContext.CallService("water_heater", "set_temperature", target, new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOff(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_off", target);
    }

    ///<summary>Turns water heater on.</summary>
    ///<param name="target">The target for this service call</param>
    public void TurnOn(ServiceTarget target)
    {
        _haContext.CallService("water_heater", "turn_on", target);
    }
}

public partial record WaterHeaterSetAwayModeParameters
{
    ///<summary>New value of away mode.</summary>
    [JsonPropertyName("away_mode")]
    public bool? AwayMode { get; init; }
}

public partial record WaterHeaterSetOperationModeParameters
{
    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial record WaterHeaterSetTemperatureParameters
{
    ///<summary>New target temperature for the water heater.</summary>
    [JsonPropertyName("temperature")]
    public double? Temperature { get; init; }

    ///<summary>New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</summary>
    [JsonPropertyName("operation_mode")]
    public string? OperationMode { get; init; }
}

public partial class WeatherServices
{
    private readonly IHaContext _haContext;
    public WeatherServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    public void GetForecast(ServiceTarget target, WeatherGetForecastParameters data)
    {
        _haContext.CallService("weather", "get_forecast", target, data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public void GetForecast(ServiceTarget target, object @type)
    {
        _haContext.CallService("weather", "get_forecast", target, new WeatherGetForecastParameters { Type = @type });
    }
}

public partial record WeatherGetForecastParameters
{
    ///<summary>Forecast type: daily, hourly or twice daily.</summary>
    [JsonPropertyName("type")]
    public object? Type { get; init; }
}

public partial class YiHackServices
{
    private readonly IHaContext _haContext;
    public YiHackServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Aim camera at the defined preset</summary>
    public void MoveToPreset(YiHackMoveToPresetParameters data)
    {
        _haContext.CallService("yi_hack", "move_to_preset", null, data);
    }

    ///<summary>Aim camera at the defined preset</summary>
    ///<param name="entityId">Name of entity to move. eg: camera.living_room_camera</param>
    ///<param name="presetId">Id of the preset to go to eg: 0</param>
    public void MoveToPreset(string entityId, long presetId)
    {
        _haContext.CallService("yi_hack", "move_to_preset", null, new YiHackMoveToPresetParameters { EntityId = entityId, PresetId = presetId });
    }

    ///<summary>Pan/Tilt service for yi-hack camera.</summary>
    public void Ptz(YiHackPtzParameters data)
    {
        _haContext.CallService("yi_hack", "ptz", null, data);
    }

    ///<summary>Pan/Tilt service for yi-hack camera.</summary>
    ///<param name="entityId">Name of entity to move. eg: camera.living_room_camera</param>
    ///<param name="movement">Direction of the movement. Allowed values: up, down, left and right. eg: left</param>
    ///<param name="travelTime">(Optional) Travel time in seconds. Allowed values: float from 0.1 to 5.0. Default: 0.3 eg: 0.3</param>
    public void Ptz(string entityId, object movement, double? travelTime = null)
    {
        _haContext.CallService("yi_hack", "ptz", null, new YiHackPtzParameters { EntityId = entityId, Movement = movement, TravelTime = travelTime });
    }

    ///<summary>TTS service for yi-hack camera.</summary>
    public void Speak(YiHackSpeakParameters data)
    {
        _haContext.CallService("yi_hack", "speak", null, data);
    }

    ///<summary>TTS service for yi-hack camera.</summary>
    ///<param name="entityId">Name of entity to use. eg: camera.living_room_camera</param>
    ///<param name="language">Language of the TTS engine. Allowed values: de-DE, en-GB, en-US, es-ES, fr-FR, it-IT. Default: en-US eg: en-US</param>
    ///<param name="sentence">Sentence to pronounce. eg: Hello world!</param>
    public void Speak(string entityId, object language, string sentence)
    {
        _haContext.CallService("yi_hack", "speak", null, new YiHackSpeakParameters { EntityId = entityId, Language = language, Sentence = sentence });
    }
}

public partial record YiHackMoveToPresetParameters
{
    ///<summary>Name of entity to move. eg: camera.living_room_camera</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Id of the preset to go to eg: 0</summary>
    [JsonPropertyName("preset_id")]
    public long? PresetId { get; init; }
}

public partial record YiHackPtzParameters
{
    ///<summary>Name of entity to move. eg: camera.living_room_camera</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Direction of the movement. Allowed values: up, down, left and right. eg: left</summary>
    [JsonPropertyName("movement")]
    public object? Movement { get; init; }

    ///<summary>(Optional) Travel time in seconds. Allowed values: float from 0.1 to 5.0. Default: 0.3 eg: 0.3</summary>
    [JsonPropertyName("travel_time")]
    public double? TravelTime { get; init; }
}

public partial record YiHackSpeakParameters
{
    ///<summary>Name of entity to use. eg: camera.living_room_camera</summary>
    [JsonPropertyName("entity_id")]
    public string? EntityId { get; init; }

    ///<summary>Language of the TTS engine. Allowed values: de-DE, en-GB, en-US, es-ES, fr-FR, it-IT. Default: en-US eg: en-US</summary>
    [JsonPropertyName("language")]
    public object? Language { get; init; }

    ///<summary>Sentence to pronounce. eg: Hello world!</summary>
    [JsonPropertyName("sentence")]
    public string? Sentence { get; init; }
}

public partial class ZhaServices
{
    private readonly IHaContext _haContext;
    public ZhaServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void ClearLockUserCode(ServiceTarget target, ZhaClearLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public void ClearLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "clear_lock_user_code", target, new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void DisableLockUserCode(ServiceTarget target, ZhaDisableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public void DisableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "disable_lock_user_code", target, new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void EnableLockUserCode(ServiceTarget target, ZhaEnableLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public void EnableLockUserCode(ServiceTarget target, string codeSlot)
    {
        _haContext.CallService("zha", "enable_lock_user_code", target, new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    public void IssueZigbeeClusterCommand(ZhaIssueZigbeeClusterCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, data);
    }

    ///<summary>Issues a command on the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="commandType">Type of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="params">Parameters to pass to the command.</param>
    ///<param name="manufacturer">Manufacturer code. eg: 252</param>
    public void IssueZigbeeClusterCommand(string ieee, long endpointId, long clusterId, long command, object commandType, object? clusterType = null, object? args = null, object? @params = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_cluster_command", null, new ZhaIssueZigbeeClusterCommandParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Command = command, CommandType = commandType, Args = args, Params = @params, Manufacturer = manufacturer });
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    public void IssueZigbeeGroupCommand(ZhaIssueZigbeeGroupCommandParameters data)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, data);
    }

    ///<summary>Issue command on the specified cluster on the specified group.</summary>
    ///<param name="group">Hexadecimal address of the group. eg: 546</param>
    ///<param name="clusterId">ZCL cluster to send command to.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="command">ID of the command to execute.</param>
    ///<param name="args">Arguments to pass to the command. eg: [arg1, arg2, argN]</param>
    ///<param name="manufacturer">Manufacturer code. eg: 252</param>
    public void IssueZigbeeGroupCommand(string @group, long clusterId, long command, object? clusterType = null, object? args = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "issue_zigbee_group_command", null, new ZhaIssueZigbeeGroupCommandParameters { Group = @group, ClusterId = clusterId, ClusterType = clusterType, Command = command, Args = args, Manufacturer = manufacturer });
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    public void Permit(ZhaPermitParameters data)
    {
        _haContext.CallService("zha", "permit", null, data);
    }

    ///<summary>Allows nodes to join the Zigbee network.</summary>
    ///<param name="duration">Time to permit joins.</param>
    ///<param name="ieee">IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="sourceIeee">IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</param>
    ///<param name="installCode">Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</param>
    ///<param name="qrCode">Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</param>
    public void Permit(long? duration = null, string? ieee = null, string? sourceIeee = null, string? installCode = null, string? qrCode = null)
    {
        _haContext.CallService("zha", "permit", null, new ZhaPermitParameters { Duration = duration, Ieee = ieee, SourceIeee = sourceIeee, InstallCode = installCode, QrCode = qrCode });
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    public void Remove(ZhaRemoveParameters data)
    {
        _haContext.CallService("zha", "remove", null, data);
    }

    ///<summary>Removes a node from the Zigbee network.</summary>
    ///<param name="ieee">IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</param>
    public void Remove(string ieee)
    {
        _haContext.CallService("zha", "remove", null, new ZhaRemoveParameters { Ieee = ieee });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetLockUserCode(ServiceTarget target, ZhaSetLockUserCodeParameters data)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public void SetLockUserCode(ServiceTarget target, string codeSlot, string userCode)
    {
        _haContext.CallService("zha", "set_lock_user_code", target, new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    public void SetZigbeeClusterAttribute(ZhaSetZigbeeClusterAttributeParameters data)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, data);
    }

    ///<summary>Sets an attribute value for the specified cluster on the specified entity.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="endpointId">Endpoint ID for the cluster.</param>
    ///<param name="clusterId">ZCL cluster to retrieve attributes for.</param>
    ///<param name="clusterType">Type of the cluster.</param>
    ///<param name="attribute">ID of the attribute to set. eg: 0</param>
    ///<param name="value">Value to write to the attribute. eg: 1</param>
    ///<param name="manufacturer">Manufacturer code. eg: 252</param>
    public void SetZigbeeClusterAttribute(string ieee, long endpointId, long clusterId, long attribute, string value, object? clusterType = null, string? manufacturer = null)
    {
        _haContext.CallService("zha", "set_zigbee_cluster_attribute", null, new ZhaSetZigbeeClusterAttributeParameters { Ieee = ieee, EndpointId = endpointId, ClusterId = clusterId, ClusterType = clusterType, Attribute = attribute, Value = value, Manufacturer = manufacturer });
    }

    ///<summary>This service uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    public void WarningDeviceSquawk(ZhaWarningDeviceSquawkParameters data)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, data);
    }

    ///<summary>This service uses the WD capabilities to emit a quick audible/visible pulse called a &quot;squawk&quot;. The squawk command has no effect if the WD is currently active (warning in progress).</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</param>
    ///<param name="strobe">The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</param>
    ///<param name="level">The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</param>
    public void WarningDeviceSquawk(string ieee, long? mode = null, long? strobe = null, long? level = null)
    {
        _haContext.CallService("zha", "warning_device_squawk", null, new ZhaWarningDeviceSquawkParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level });
    }

    ///<summary>This service starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    public void WarningDeviceWarn(ZhaWarningDeviceWarnParameters data)
    {
        _haContext.CallService("zha", "warning_device_warn", null, data);
    }

    ///<summary>This service starts the operation of the warning device. The warning device alerts the surrounding area by audible (siren) and visual (strobe) signals.</summary>
    ///<param name="ieee">IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</param>
    ///<param name="mode">The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</param>
    ///<param name="strobe">The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</param>
    ///<param name="level">The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</param>
    ///<param name="duration">Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</param>
    ///<param name="dutyCycle">Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</param>
    ///<param name="intensity">Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</param>
    public void WarningDeviceWarn(string ieee, long? mode = null, long? strobe = null, long? level = null, long? duration = null, long? dutyCycle = null, long? intensity = null)
    {
        _haContext.CallService("zha", "warning_device_warn", null, new ZhaWarningDeviceWarnParameters { Ieee = ieee, Mode = mode, Strobe = strobe, Level = level, Duration = duration, DutyCycle = dutyCycle, Intensity = intensity });
    }
}

public partial record ZhaClearLockUserCodeParameters
{
    ///<summary>Code slot to clear code from. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaDisableLockUserCodeParameters
{
    ///<summary>Code slot to disable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaEnableLockUserCodeParameters
{
    ///<summary>Code slot to enable. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }
}

public partial record ZhaIssueZigbeeClusterCommandParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>Type of the command to execute.</summary>
    [JsonPropertyName("command_type")]
    public object? CommandType { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Parameters to pass to the command.</summary>
    [JsonPropertyName("params")]
    public object? Params { get; init; }

    ///<summary>Manufacturer code. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaIssueZigbeeGroupCommandParameters
{
    ///<summary>Hexadecimal address of the group. eg: 546</summary>
    [JsonPropertyName("group")]
    public string? Group { get; init; }

    ///<summary>ZCL cluster to send command to.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the command to execute.</summary>
    [JsonPropertyName("command")]
    public long? Command { get; init; }

    ///<summary>Arguments to pass to the command. eg: [arg1, arg2, argN]</summary>
    [JsonPropertyName("args")]
    public object? Args { get; init; }

    ///<summary>Manufacturer code. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaPermitParameters
{
    ///<summary>Time to permit joins.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>IEEE address of the node permitting new joins. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>IEEE address of the joining device (must be used with the install code). eg: 00:0a:bf:00:01:10:23:35</summary>
    [JsonPropertyName("source_ieee")]
    public string? SourceIeee { get; init; }

    ///<summary>Install code of the joining device (must be used with the source_ieee). eg: 1234-5678-1234-5678-AABB-CCDD-AABB-CCDD-EEFF</summary>
    [JsonPropertyName("install_code")]
    public string? InstallCode { get; init; }

    ///<summary>Value of the QR install code (different between vendors). eg: Z:000D6FFFFED4163B$I:52797BF4A5084DAA8E1712B61741CA024051</summary>
    [JsonPropertyName("qr_code")]
    public string? QrCode { get; init; }
}

public partial record ZhaRemoveParameters
{
    ///<summary>IEEE address of the node to remove. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }
}

public partial record ZhaSetLockUserCodeParameters
{
    ///<summary>Code slot to set the code in. eg: 1</summary>
    [JsonPropertyName("code_slot")]
    public string? CodeSlot { get; init; }

    ///<summary>Code to set. eg: 1234</summary>
    [JsonPropertyName("user_code")]
    public string? UserCode { get; init; }
}

public partial record ZhaSetZigbeeClusterAttributeParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>Endpoint ID for the cluster.</summary>
    [JsonPropertyName("endpoint_id")]
    public long? EndpointId { get; init; }

    ///<summary>ZCL cluster to retrieve attributes for.</summary>
    [JsonPropertyName("cluster_id")]
    public long? ClusterId { get; init; }

    ///<summary>Type of the cluster.</summary>
    [JsonPropertyName("cluster_type")]
    public object? ClusterType { get; init; }

    ///<summary>ID of the attribute to set. eg: 0</summary>
    [JsonPropertyName("attribute")]
    public long? Attribute { get; init; }

    ///<summary>Value to write to the attribute. eg: 1</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }

    ///<summary>Manufacturer code. eg: 252</summary>
    [JsonPropertyName("manufacturer")]
    public string? Manufacturer { get; init; }
}

public partial record ZhaWarningDeviceSquawkParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Squawk Mode field is used as a 4-bit enumeration, and can have one of the values shown in Table 8-24 of the ZCL spec - Squawk Mode Field. The exact operation of each mode (how the WD “squawks”) is implementation specific.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The strobe field is used as a Boolean, and determines if the visual indication is also required in addition to the audible squawk, as shown in Table 8-25 of the ZCL spec - Strobe Bit.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The squawk level field is used as a 2-bit enumeration, and determines the intensity of audible squawk sound as shown in Table 8-26 of the ZCL spec - Squawk Level Field Values.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }
}

public partial record ZhaWarningDeviceWarnParameters
{
    ///<summary>IEEE address for the device. eg: 00:0d:6f:00:05:7d:2d:34</summary>
    [JsonPropertyName("ieee")]
    public string? Ieee { get; init; }

    ///<summary>The Warning Mode field is used as a 4-bit enumeration, can have one of the values 0-6 defined below in table 8-20 of the ZCL spec. The exact behavior of the warning device in each mode is according to the relevant security standards.</summary>
    [JsonPropertyName("mode")]
    public long? Mode { get; init; }

    ///<summary>The Strobe field is used as a 2-bit enumeration, and determines if the visual indication is required in addition to the audible siren, as indicated in Table 8-21 of the ZCL spec. &quot;0&quot; means no strobe, &quot;1&quot; means strobe. If the strobe field is “1” and the Warning Mode is “0” (“Stop”), then only the strobe is activated.</summary>
    [JsonPropertyName("strobe")]
    public long? Strobe { get; init; }

    ///<summary>The Siren Level field is used as a 2-bit enumeration, and indicates the intensity of audible squawk sound as shown in Table 8-22 of the ZCL spec.</summary>
    [JsonPropertyName("level")]
    public long? Level { get; init; }

    ///<summary>Requested duration of warning, in seconds (16 bit). If both Strobe and Warning Mode are &quot;0&quot; this field is ignored.</summary>
    [JsonPropertyName("duration")]
    public long? Duration { get; init; }

    ///<summary>Indicates the length of the flash cycle. This allows you to vary the flash duration for different alarm types (e.g., fire, police, burglar). The valid range is 0-100 in increments of 10. All other values must be rounded to the nearest valid value. Strobe calculates a duty cycle over a duration of one second. The ON state must precede the OFF state. For example, if the Strobe Duty Cycle field specifies “40,”, then the strobe flashes ON for 4/10ths of a second and then turns OFF for 6/10ths of a second.</summary>
    [JsonPropertyName("duty_cycle")]
    public long? DutyCycle { get; init; }

    ///<summary>Indicates the intensity of the strobe as shown in Table 8-23 of the ZCL spec. This attribute is designed to vary the output of the strobe (i.e., brightness) and not its frequency, which is detailed in section 8.4.2.3.1.6 of the ZCL spec.</summary>
    [JsonPropertyName("intensity")]
    public long? Intensity { get; init; }
}

public partial class ZoneServices
{
    private readonly IHaContext _haContext;
    public ZoneServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Reloads zones from the YAML-configuration.</summary>
    public void Reload()
    {
        _haContext.CallService("zone", "reload", null);
    }
}

public partial class ZwaveJsServices
{
    private readonly IHaContext _haContext;
    public ZwaveJsServices(IHaContext haContext)
    {
        _haContext = haContext;
    }

    ///<summary>Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.</summary>
    ///<param name="target">The target for this service call</param>
    public void BulkSetPartialConfigParameters(ServiceTarget target, ZwaveJsBulkSetPartialConfigParametersParameters data)
    {
        _haContext.CallService("zwave_js", "bulk_set_partial_config_parameters", target, data);
    }

    ///<summary>Allows for bulk setting partial parameters. Useful when multiple partial parameters have to be set at the same time.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="endpoint">The configuration parameter&apos;s endpoint. eg: 1</param>
    ///<param name="parameter">The name (or ID) of the configuration parameter you want to configure. eg: 9</param>
    ///<param name="value">The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter. eg: &quot;0x1&quot;: 1 &quot;0x10&quot;: 1 &quot;0x20&quot;: 1 &quot;0x40&quot;: 1 </param>
    public void BulkSetPartialConfigParameters(ServiceTarget target, string parameter, object value, string? endpoint = null)
    {
        _haContext.CallService("zwave_js", "bulk_set_partial_config_parameters", target, new ZwaveJsBulkSetPartialConfigParametersParameters { Endpoint = endpoint, Parameter = parameter, Value = value });
    }

    ///<summary>Calls a Command Class API on a node. Some Command Classes can&apos;t be fully controlled via the `set_value` service and require direct calls to the Command Class API.</summary>
    ///<param name="target">The target for this service call</param>
    public void InvokeCcApi(ServiceTarget target, ZwaveJsInvokeCcApiParameters data)
    {
        _haContext.CallService("zwave_js", "invoke_cc_api", target, data);
    }

    ///<summary>Calls a Command Class API on a node. Some Command Classes can&apos;t be fully controlled via the `set_value` service and require direct calls to the Command Class API.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="commandClass">The ID of the command class that you want to issue a command to. eg: 132</param>
    ///<param name="endpoint">The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted. eg: 1</param>
    ///<param name="methodName">The name of the API method to call. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for available methods. eg: setInterval</param>
    ///<param name="parameters">A list of parameters to pass to the API method. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for parameters. eg: [1, 1]</param>
    public void InvokeCcApi(ServiceTarget target, string commandClass, string methodName, object parameters, string? endpoint = null)
    {
        _haContext.CallService("zwave_js", "invoke_cc_api", target, new ZwaveJsInvokeCcApiParameters { CommandClass = commandClass, Endpoint = endpoint, MethodName = methodName, Parameters = parameters });
    }

    ///<summary>Changes any value that Z-Wave JS recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This service has minimal validation so only use this service if you know what you are doing.</summary>
    ///<param name="target">The target for this service call</param>
    public void MulticastSetValue(ServiceTarget target, ZwaveJsMulticastSetValueParameters data)
    {
        _haContext.CallService("zwave_js", "multicast_set_value", target, data);
    }

    ///<summary>Changes any value that Z-Wave JS recognizes on multiple Z-Wave devices using multicast, so all devices receive the message simultaneously. This service has minimal validation so only use this service if you know what you are doing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="broadcast">Whether command should be broadcast to all devices on the network. eg: True</param>
    ///<param name="commandClass">The ID of the command class for the value. eg: 117</param>
    ///<param name="endpoint">The endpoint for the value. eg: 1</param>
    ///<param name="property">The ID of the property for the value. eg: currentValue</param>
    ///<param name="propertyKey">The ID of the property key for the value. eg: 1</param>
    ///<param name="options">Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.</param>
    ///<param name="value">The new value to set. eg: ffbb99</param>
    public void MulticastSetValue(ServiceTarget target, string commandClass, string @property, object value, bool? broadcast = null, string? endpoint = null, string? propertyKey = null, object? options = null)
    {
        _haContext.CallService("zwave_js", "multicast_set_value", target, new ZwaveJsMulticastSetValueParameters { Broadcast = broadcast, CommandClass = commandClass, Endpoint = endpoint, Property = @property, PropertyKey = propertyKey, Options = options, Value = value });
    }

    ///<summary>Forces Z-Wave JS to try to reach a node. This can be used to update the status of the node in Z-Wave JS when you think it doesn&apos;t accurately reflect reality, e.g. reviving a failed/dead node or marking the node as asleep.</summary>
    ///<param name="target">The target for this service call</param>
    public void Ping(ServiceTarget target)
    {
        _haContext.CallService("zwave_js", "ping", target);
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    public void RefreshValue(ZwaveJsRefreshValueParameters data)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, data);
    }

    ///<summary>Force updates the values of a Z-Wave entity.</summary>
    ///<param name="entityId">Entities to refresh. eg: - sensor.family_room_motion - switch.kitchen </param>
    ///<param name="refreshAllValues">Whether to refresh all values (true) or just the primary value (false).</param>
    public void RefreshValue(IEnumerable<string> entityId, bool? refreshAllValues = null)
    {
        _haContext.CallService("zwave_js", "refresh_value", null, new ZwaveJsRefreshValueParameters { EntityId = entityId, RefreshAllValues = refreshAllValues });
    }

    ///<summary>Resets the meters on a node.</summary>
    ///<param name="target">The target for this service call</param>
    public void ResetMeter(ServiceTarget target, ZwaveJsResetMeterParameters data)
    {
        _haContext.CallService("zwave_js", "reset_meter", target, data);
    }

    ///<summary>Resets the meters on a node.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="meterType">The type of meter to reset. Not all meters support the ability to pick a meter type to reset. eg: 1</param>
    ///<param name="value">The value that meters should be reset to. Not all meters support the ability to be reset to a specific value. eg: 5</param>
    public void ResetMeter(ServiceTarget target, string? meterType = null, string? value = null)
    {
        _haContext.CallService("zwave_js", "reset_meter", target, new ZwaveJsResetMeterParameters { MeterType = meterType, Value = value });
    }

    ///<summary>Changes the configuration parameters of your Z-Wave devices.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetConfigParameter(ServiceTarget target, ZwaveJsSetConfigParameterParameters data)
    {
        _haContext.CallService("zwave_js", "set_config_parameter", target, data);
    }

    ///<summary>Changes the configuration parameters of your Z-Wave devices.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="endpoint">The configuration parameter&apos;s endpoint. eg: 1</param>
    ///<param name="parameter">The name (or ID) of the configuration parameter you want to configure. eg: Minimum brightness level</param>
    ///<param name="bitmask">Target a specific bitmask (see the documentation for more information). Cannot be combined with value_size or value_format.</param>
    ///<param name="value">The new value to set for this configuration parameter. eg: 5</param>
    public void SetConfigParameter(ServiceTarget target, string parameter, string value, string? endpoint = null, string? bitmask = null)
    {
        _haContext.CallService("zwave_js", "set_config_parameter", target, new ZwaveJsSetConfigParameterParameters { Endpoint = endpoint, Parameter = parameter, Bitmask = bitmask, Value = value });
    }

    ///<summary>Changes any value that Z-Wave JS recognizes on a Z-Wave device. This service has minimal validation so only use this service if you know what you are doing.</summary>
    ///<param name="target">The target for this service call</param>
    public void SetValue(ServiceTarget target, ZwaveJsSetValueParameters data)
    {
        _haContext.CallService("zwave_js", "set_value", target, data);
    }

    ///<summary>Changes any value that Z-Wave JS recognizes on a Z-Wave device. This service has minimal validation so only use this service if you know what you are doing.</summary>
    ///<param name="target">The target for this service call</param>
    ///<param name="commandClass">The ID of the command class for the value. eg: 117</param>
    ///<param name="endpoint">The endpoint for the value. eg: 1</param>
    ///<param name="property">The ID of the property for the value. eg: currentValue</param>
    ///<param name="propertyKey">The ID of the property key for the value. eg: 1</param>
    ///<param name="value">The new value to set. eg: ffbb99</param>
    ///<param name="options">Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.</param>
    ///<param name="waitForResult">Whether or not to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If set to `true`, note that the service call can take a while if setting a value on an asleep battery device.</param>
    public void SetValue(ServiceTarget target, string commandClass, string @property, object value, string? endpoint = null, string? propertyKey = null, object? options = null, bool? waitForResult = null)
    {
        _haContext.CallService("zwave_js", "set_value", target, new ZwaveJsSetValueParameters { CommandClass = commandClass, Endpoint = endpoint, Property = @property, PropertyKey = propertyKey, Value = value, Options = options, WaitForResult = waitForResult });
    }
}

public partial record ZwaveJsBulkSetPartialConfigParametersParameters
{
    ///<summary>The configuration parameter&apos;s endpoint. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The name (or ID) of the configuration parameter you want to configure. eg: 9</summary>
    [JsonPropertyName("parameter")]
    public string? Parameter { get; init; }

    ///<summary>The new value(s) to set for this configuration parameter. Can either be a raw integer value to represent the bulk change or a mapping where the key is the bitmask (either in hex or integer form) and the value is the new value you want to set for that partial parameter. eg: &quot;0x1&quot;: 1 &quot;0x10&quot;: 1 &quot;0x20&quot;: 1 &quot;0x40&quot;: 1 </summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record ZwaveJsInvokeCcApiParameters
{
    ///<summary>The ID of the command class that you want to issue a command to. eg: 132</summary>
    [JsonPropertyName("command_class")]
    public string? CommandClass { get; init; }

    ///<summary>The endpoint to call the API on. If an endpoint is specified, that endpoint will be targeted for all nodes associated with the target areas, devices, and/or entities. If an endpoint is not specified, the root endpoint (0) will be targeted for nodes associated with target areas and devices, and the endpoint for the primary value of each entity will be targeted. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The name of the API method to call. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for available methods. eg: setInterval</summary>
    [JsonPropertyName("method_name")]
    public string? MethodName { get; init; }

    ///<summary>A list of parameters to pass to the API method. Refer to the Z-Wave JS Command Class API documentation (https://zwave-js.github.io/node-zwave-js/#/api/CCs/index) for parameters. eg: [1, 1]</summary>
    [JsonPropertyName("parameters")]
    public object? Parameters { get; init; }
}

public partial record ZwaveJsMulticastSetValueParameters
{
    ///<summary>Whether command should be broadcast to all devices on the network. eg: True</summary>
    [JsonPropertyName("broadcast")]
    public bool? Broadcast { get; init; }

    ///<summary>The ID of the command class for the value. eg: 117</summary>
    [JsonPropertyName("command_class")]
    public string? CommandClass { get; init; }

    ///<summary>The endpoint for the value. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The ID of the property for the value. eg: currentValue</summary>
    [JsonPropertyName("property")]
    public string? Property { get; init; }

    ///<summary>The ID of the property key for the value. eg: 1</summary>
    [JsonPropertyName("property_key")]
    public string? PropertyKey { get; init; }

    ///<summary>Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>The new value to set. eg: ffbb99</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }
}

public partial record ZwaveJsRefreshValueParameters
{
    ///<summary>Entities to refresh. eg: - sensor.family_room_motion - switch.kitchen </summary>
    [JsonPropertyName("entity_id")]
    public IEnumerable<string>? EntityId { get; init; }

    ///<summary>Whether to refresh all values (true) or just the primary value (false).</summary>
    [JsonPropertyName("refresh_all_values")]
    public bool? RefreshAllValues { get; init; }
}

public partial record ZwaveJsResetMeterParameters
{
    ///<summary>The type of meter to reset. Not all meters support the ability to pick a meter type to reset. eg: 1</summary>
    [JsonPropertyName("meter_type")]
    public string? MeterType { get; init; }

    ///<summary>The value that meters should be reset to. Not all meters support the ability to be reset to a specific value. eg: 5</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record ZwaveJsSetConfigParameterParameters
{
    ///<summary>The configuration parameter&apos;s endpoint. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The name (or ID) of the configuration parameter you want to configure. eg: Minimum brightness level</summary>
    [JsonPropertyName("parameter")]
    public string? Parameter { get; init; }

    ///<summary>Target a specific bitmask (see the documentation for more information). Cannot be combined with value_size or value_format.</summary>
    [JsonPropertyName("bitmask")]
    public string? Bitmask { get; init; }

    ///<summary>The new value to set for this configuration parameter. eg: 5</summary>
    [JsonPropertyName("value")]
    public string? Value { get; init; }
}

public partial record ZwaveJsSetValueParameters
{
    ///<summary>The ID of the command class for the value. eg: 117</summary>
    [JsonPropertyName("command_class")]
    public string? CommandClass { get; init; }

    ///<summary>The endpoint for the value. eg: 1</summary>
    [JsonPropertyName("endpoint")]
    public string? Endpoint { get; init; }

    ///<summary>The ID of the property for the value. eg: currentValue</summary>
    [JsonPropertyName("property")]
    public string? Property { get; init; }

    ///<summary>The ID of the property key for the value. eg: 1</summary>
    [JsonPropertyName("property_key")]
    public string? PropertyKey { get; init; }

    ///<summary>The new value to set. eg: ffbb99</summary>
    [JsonPropertyName("value")]
    public object? Value { get; init; }

    ///<summary>Set value options map. Refer to the Z-Wave JS documentation for more information on what options can be set.</summary>
    [JsonPropertyName("options")]
    public object? Options { get; init; }

    ///<summary>Whether or not to wait for a response from the node. If not included in the payload, the integration will decide whether to wait or not. If set to `true`, note that the service call can take a while if setting a value on an asleep battery device.</summary>
    [JsonPropertyName("wait_for_result")]
    public bool? WaitForResult { get; init; }
}

public static class AutomationEntityExtensionMethods
{
    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IAutomationEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles (enable / disable) an automation.</summary>
    public static void Toggle(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IAutomationEntityCore target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, AutomationTriggerParameters data)
    {
        target.CallService("trigger", data);
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IAutomationEntityCore target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Triggers the actions of an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="skipCondition">Defines whether or not the conditions will be skipped.</param>
    public static void Trigger(this IEnumerable<IAutomationEntityCore> target, bool? skipCondition = null)
    {
        target.CallService("trigger", new AutomationTriggerParameters { SkipCondition = skipCondition });
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IAutomationEntityCore target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, AutomationTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IAutomationEntityCore to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IAutomationEntityCore target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Disables an automation.</summary>
    ///<param name="target">The IEnumerable&lt;IAutomationEntityCore&gt; to call this service for</param>
    ///<param name="stopActions">Stops currently running actions.</param>
    public static void TurnOff(this IEnumerable<IAutomationEntityCore> target, bool? stopActions = null)
    {
        target.CallService("turn_off", new AutomationTurnOffParameters { StopActions = stopActions });
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IAutomationEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Enables an automation.</summary>
    public static void TurnOn(this IEnumerable<IAutomationEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class ButtonEntityExtensionMethods
{
    ///<summary>Press the button entity.</summary>
    public static void Press(this IButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Press the button entity.</summary>
    public static void Press(this IEnumerable<IButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class CameraEntityExtensionMethods
{
    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Disables the motion detection.</summary>
    public static void DisableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("disable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this ICameraEntityCore target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Enables the motion detection.</summary>
    public static void EnableMotionDetection(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("enable_motion_detection");
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this ICameraEntityCore target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, CameraPlayStreamParameters data)
    {
        target.CallService("play_stream", data);
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this ICameraEntityCore target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Plays the camera stream on a supported media player.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="mediaPlayer">Media players to stream to.</param>
    ///<param name="format">Stream format supported by the media player.</param>
    public static void PlayStream(this IEnumerable<ICameraEntityCore> target, string mediaPlayer, object? format = null)
    {
        target.CallService("play_stream", new CameraPlayStreamParameters { MediaPlayer = mediaPlayer, Format = format });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this ICameraEntityCore target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    public static void Record(this IEnumerable<ICameraEntityCore> target, CameraRecordParameters data)
    {
        target.CallService("record", data);
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this ICameraEntityCore target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Creates a recording of a live camera feed.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. Must be mp4. eg: /tmp/snapshot_{{ entity_id.name }}.mp4</param>
    ///<param name="duration">Planned duration of the recording. The actual duration may vary.</param>
    ///<param name="lookback">Planned lookback period to include in the recording (in addition to the duration). Only available if there is currently an active HLS stream. The actual length of the lookback period may vary.</param>
    public static void Record(this IEnumerable<ICameraEntityCore> target, string filename, long? duration = null, long? lookback = null)
    {
        target.CallService("record", new CameraRecordParameters { Filename = filename, Duration = duration, Lookback = lookback });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this ICameraEntityCore target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, CameraSnapshotParameters data)
    {
        target.CallService("snapshot", data);
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this ICameraEntityCore target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Takes a snapshot from a camera.</summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="filename">Template of a filename. Variable available is `entity_id`. eg: /tmp/snapshot_{{ entity_id.name }}.jpg</param>
    public static void Snapshot(this IEnumerable<ICameraEntityCore> target, string filename)
    {
        target.CallService("snapshot", new CameraSnapshotParameters { Filename = filename });
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this ICameraEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the camera.</summary>
    public static void TurnOff(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this ICameraEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the camera.</summary>
    public static void TurnOn(this IEnumerable<ICameraEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class FrigateEntityExtensionMethods
{
    ///<summary>Favorites or unfavorites an event. Favorited events are retained indefinitely. </summary>
    public static void FavoriteEvent(this ICameraEntityCore target, FrigateFavoriteEventParameters data)
    {
        target.CallService("favorite_event", data);
    }

    ///<summary>Favorites or unfavorites an event. Favorited events are retained indefinitely. </summary>
    public static void FavoriteEvent(this IEnumerable<ICameraEntityCore> target, FrigateFavoriteEventParameters data)
    {
        target.CallService("favorite_event", data);
    }

    ///<summary>Favorites or unfavorites an event. Favorited events are retained indefinitely. </summary>
    ///<param name="target">The ICameraEntityCore to call this service for</param>
    ///<param name="eventId">ID of the event to favorite or unfavorite. eg: 1656510950.19548-ihtjj7</param>
    ///<param name="favorite">If the event should be favorited or unfavorited. Enable to favorite, disable to unfavorite.  eg: True</param>
    public static void FavoriteEvent(this ICameraEntityCore target, string eventId, bool? favorite = null)
    {
        target.CallService("favorite_event", new FrigateFavoriteEventParameters { EventId = eventId, Favorite = favorite });
    }

    ///<summary>Favorites or unfavorites an event. Favorited events are retained indefinitely. </summary>
    ///<param name="target">The IEnumerable&lt;ICameraEntityCore&gt; to call this service for</param>
    ///<param name="eventId">ID of the event to favorite or unfavorite. eg: 1656510950.19548-ihtjj7</param>
    ///<param name="favorite">If the event should be favorited or unfavorited. Enable to favorite, disable to unfavorite.  eg: True</param>
    public static void FavoriteEvent(this IEnumerable<ICameraEntityCore> target, string eventId, bool? favorite = null)
    {
        target.CallService("favorite_event", new FrigateFavoriteEventParameters { EventId = eventId, Favorite = favorite });
    }
}

public static class GeHomeEntityExtensionMethods
{
    ///<summary>Clears a timer value (sets to zero)</summary>
    public static void ClearTimer(this ISensorEntityCore target)
    {
        target.CallService("clear_timer");
    }

    ///<summary>Clears a timer value (sets to zero)</summary>
    public static void ClearTimer(this IEnumerable<ISensorEntityCore> target)
    {
        target.CallService("clear_timer");
    }

    ///<summary>Sets an integer value (also can be used with ERD enums)</summary>
    public static void SetIntValue(this ISensorEntityCore target, GeHomeSetIntValueParameters data)
    {
        target.CallService("set_int_value", data);
    }

    ///<summary>Sets an integer value (also can be used with ERD enums)</summary>
    public static void SetIntValue(this IEnumerable<ISensorEntityCore> target, GeHomeSetIntValueParameters data)
    {
        target.CallService("set_int_value", data);
    }

    ///<summary>Sets an integer value (also can be used with ERD enums)</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="value">The value to set</param>
    public static void SetIntValue(this ISensorEntityCore target, long value)
    {
        target.CallService("set_int_value", new GeHomeSetIntValueParameters { Value = value });
    }

    ///<summary>Sets an integer value (also can be used with ERD enums)</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="value">The value to set</param>
    public static void SetIntValue(this IEnumerable<ISensorEntityCore> target, long value)
    {
        target.CallService("set_int_value", new GeHomeSetIntValueParameters { Value = value });
    }

    ///<summary>Sets a timer value (timespan)</summary>
    public static void SetTimer(this ISensorEntityCore target, GeHomeSetTimerParameters data)
    {
        target.CallService("set_timer", data);
    }

    ///<summary>Sets a timer value (timespan)</summary>
    public static void SetTimer(this IEnumerable<ISensorEntityCore> target, GeHomeSetTimerParameters data)
    {
        target.CallService("set_timer", data);
    }

    ///<summary>Sets a timer value (timespan)</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="duration">Duration of the timer (minutes) eg: 90</param>
    public static void SetTimer(this ISensorEntityCore target, long duration)
    {
        target.CallService("set_timer", new GeHomeSetTimerParameters { Duration = duration });
    }

    ///<summary>Sets a timer value (timespan)</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="duration">Duration of the timer (minutes) eg: 90</param>
    public static void SetTimer(this IEnumerable<ISensorEntityCore> target, long duration)
    {
        target.CallService("set_timer", new GeHomeSetTimerParameters { Duration = duration });
    }
}

public static class InputBooleanEntityExtensionMethods
{
    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IInputBooleanEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles the helper on/off.</summary>
    public static void Toggle(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the helper.</summary>
    public static void TurnOff(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IInputBooleanEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the helper.</summary>
    public static void TurnOn(this IEnumerable<IInputBooleanEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class InputButtonEntityExtensionMethods
{
    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IInputButtonEntityCore target)
    {
        target.CallService("press");
    }

    ///<summary>Mimics the physical button press on the device.</summary>
    public static void Press(this IEnumerable<IInputButtonEntityCore> target)
    {
        target.CallService("press");
    }
}

public static class InputSelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IInputSelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IInputSelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<IInputSelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IInputSelectEntityCore target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Select the next option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectNext(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new InputSelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IInputSelectEntityCore target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IInputSelectEntityCore target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<IInputSelectEntityCore> target, string option)
    {
        target.CallService("select_option", new InputSelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IInputSelectEntityCore target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, InputSelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IInputSelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first option on the list.</param>
    public static void SelectPrevious(this IEnumerable<IInputSelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new InputSelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IInputSelectEntityCore target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, InputSelectSetOptionsParameters data)
    {
        target.CallService("set_options", data);
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IInputSelectEntityCore to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IInputSelectEntityCore target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }

    ///<summary>Sets the options.</summary>
    ///<param name="target">The IEnumerable&lt;IInputSelectEntityCore&gt; to call this service for</param>
    ///<param name="options">List of options. eg: [&quot;Item A&quot;, &quot;Item B&quot;, &quot;Item C&quot;]</param>
    public static void SetOptions(this IEnumerable<IInputSelectEntityCore> target, object options)
    {
        target.CallService("set_options", new InputSelectSetOptionsParameters { Options = options });
    }
}

public static class InputTextEntityExtensionMethods
{
    ///<summary>Sets the value.</summary>
    public static void SetValue(this IInputTextEntityCore target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, InputTextSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IInputTextEntityCore to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IInputTextEntityCore target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }

    ///<summary>Sets the value.</summary>
    ///<param name="target">The IEnumerable&lt;IInputTextEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value. eg: This is an example text</param>
    public static void SetValue(this IEnumerable<IInputTextEntityCore> target, string value)
    {
        target.CallService("set_value", new InputTextSetValueParameters { Value = value });
    }
}

public static class LightEntityExtensionMethods
{
    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this ILightEntityCore target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, LightToggleParameters data)
    {
        target.CallService("toggle", data);
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Toggles one or more lights, from on to off, or, off to on, based on their current state.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue. eg: [255, 100, 100]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void Toggle(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("toggle", new LightToggleParameters { Transition = transition, RgbColor = rgbColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this ILightEntityCore target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, LightTurnOffParameters data)
    {
        target.CallService("turn_off", data);
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this ILightEntityCore target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn off one or more lights.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    public static void TurnOff(this IEnumerable<ILightEntityCore> target, long? transition = null, object? flash = null)
    {
        target.CallService("turn_off", new LightTurnOffParameters { Transition = transition, Flash = flash });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this ILightEntityCore target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, LightTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The ILightEntityCore to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this ILightEntityCore target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }

    ///<summary>Turn on one or more lights and adjust properties of the light, even when they are turned on already.</summary>
    ///<param name="target">The IEnumerable&lt;ILightEntityCore&gt; to call this service for</param>
    ///<param name="transition">Duration it takes to get to next state.</param>
    ///<param name="rgbColor">The color in RGB format. A list of three integers between 0 and 255 representing the values of red, green, and blue.</param>
    ///<param name="rgbwColor">The color in RGBW format. A list of four integers between 0 and 255 representing the values of red, green, blue, and white. eg: [255, 100, 100, 50]</param>
    ///<param name="rgbwwColor">The color in RGBWW format. A list of five integers between 0 and 255 representing the values of red, green, blue, cold white, and warm white. eg: [255, 100, 100, 50, 70]</param>
    ///<param name="colorName">A human-readable color name.</param>
    ///<param name="hsColor">Color in hue/sat format. A list of two integers. Hue is 0-360 and Sat is 0-100. eg: [300, 70]</param>
    ///<param name="xyColor">Color in XY-format. A list of two decimal numbers between 0 and 1. eg: [0.52, 0.43]</param>
    ///<param name="colorTemp">Color temperature in mireds.</param>
    ///<param name="kelvin">Color temperature in Kelvin.</param>
    ///<param name="brightness">Number indicating brightness, where 0 turns the light off, 1 is the minimum brightness, and 255 is the maximum brightness.</param>
    ///<param name="brightnessPct">Number indicating the percentage of full brightness, where 0 turns the light off, 1 is the minimum brightness, and 100 is the maximum brightness.</param>
    ///<param name="brightnessStep">Change brightness by an amount.</param>
    ///<param name="brightnessStepPct">Change brightness by a percentage.</param>
    ///<param name="white">Set the light to white mode.</param>
    ///<param name="profile">Name of a light profile to use. eg: relax</param>
    ///<param name="flash">Tell light to flash, can be either value short or long.</param>
    ///<param name="effect">Light effect.</param>
    public static void TurnOn(this IEnumerable<ILightEntityCore> target, long? transition = null, object? rgbColor = null, object? rgbwColor = null, object? rgbwwColor = null, object? colorName = null, object? hsColor = null, object? xyColor = null, object? colorTemp = null, long? kelvin = null, long? brightness = null, long? brightnessPct = null, long? brightnessStep = null, long? brightnessStepPct = null, object? white = null, string? profile = null, object? flash = null, string? effect = null)
    {
        target.CallService("turn_on", new LightTurnOnParameters { Transition = transition, RgbColor = rgbColor, RgbwColor = rgbwColor, RgbwwColor = rgbwwColor, ColorName = colorName, HsColor = hsColor, XyColor = xyColor, ColorTemp = colorTemp, Kelvin = kelvin, Brightness = brightness, BrightnessPct = brightnessPct, BrightnessStep = brightnessStep, BrightnessStepPct = brightnessStepPct, White = white, Profile = profile, Flash = flash, Effect = effect });
    }
}

public static class LockEntityExtensionMethods
{
    ///<summary>Locks a lock.</summary>
    public static void Lock(this ILockEntityCore target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    public static void Lock(this IEnumerable<ILockEntityCore> target, LockLockParameters data)
    {
        target.CallService("lock", data);
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Locks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to lock the lock. eg: 1234</param>
    public static void Lock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("lock", new LockLockParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this ILockEntityCore target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    public static void Open(this IEnumerable<ILockEntityCore> target, LockOpenParameters data)
    {
        target.CallService("open", data);
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this ILockEntityCore target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Opens a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to open the lock. eg: 1234</param>
    public static void Open(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("open", new LockOpenParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this ILockEntityCore target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, LockUnlockParameters data)
    {
        target.CallService("unlock", data);
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this ILockEntityCore target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }

    ///<summary>Unlocks a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="code">Code used to unlock the lock. eg: 1234</param>
    public static void Unlock(this IEnumerable<ILockEntityCore> target, string? code = null)
    {
        target.CallService("unlock", new LockUnlockParameters { Code = code });
    }
}

public static class MediaPlayerEntityExtensionMethods
{
    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IMediaPlayerEntityCore target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Clears the playlist.</summary>
    public static void ClearPlaylist(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("clear_playlist");
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IMediaPlayerEntityCore target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerJoinParameters data)
    {
        target.CallService("join", data);
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IMediaPlayerEntityCore target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Groups media players together for synchronous playback. Only works on supported multiroom audio systems.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="groupMembers">The players which will be synced with the playback specified in `target`. eg: - media_player.multiroom_player2 - media_player.multiroom_player3 </param>
    public static void Join(this IEnumerable<IMediaPlayerEntityCore> target, IEnumerable<string> groupMembers)
    {
        target.CallService("join", new MediaPlayerJoinParameters { GroupMembers = groupMembers });
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Selects the next track.</summary>
    public static void MediaNextTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_next_track");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Pauses.</summary>
    public static void MediaPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_pause");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play");
    }

    ///<summary>Starts playing.</summary>
    public static void MediaPlay(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Toggles play/pause.</summary>
    public static void MediaPlayPause(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_play_pause");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Selects the previous track.</summary>
    public static void MediaPreviousTrack(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_previous_track");
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IMediaPlayerEntityCore target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerMediaSeekParameters data)
    {
        target.CallService("media_seek", data);
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IMediaPlayerEntityCore target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Allows you to go to a different part of the media that is currently playing.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="seekPosition">Target position in the currently playing media. The format is platform dependent.</param>
    public static void MediaSeek(this IEnumerable<IMediaPlayerEntityCore> target, double seekPosition)
    {
        target.CallService("media_seek", new MediaPlayerMediaSeekParameters { SeekPosition = seekPosition });
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IMediaPlayerEntityCore target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Stops playing.</summary>
    public static void MediaStop(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("media_stop");
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IMediaPlayerEntityCore target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerPlayMediaParameters data)
    {
        target.CallService("play_media", data);
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IMediaPlayerEntityCore target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Starts playing specified media.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="mediaContentId">The ID of the content to play. Platform dependent. eg: https://home-assistant.io/images/cast/splash.png</param>
    ///<param name="mediaContentType">The type of the content to play. Such as image, music, tv show, video, episode, channel, or playlist. eg: music</param>
    ///<param name="enqueue">If the content should be played now or be added to the queue.</param>
    ///<param name="announce">If the media should be played as an announcement. eg: true</param>
    public static void PlayMedia(this IEnumerable<IMediaPlayerEntityCore> target, string mediaContentId, string mediaContentType, object? enqueue = null, bool? announce = null)
    {
        target.CallService("play_media", new MediaPlayerPlayMediaParameters { MediaContentId = mediaContentId, MediaContentType = mediaContentType, Enqueue = enqueue, Announce = announce });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IMediaPlayerEntityCore target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerRepeatSetParameters data)
    {
        target.CallService("repeat_set", data);
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IMediaPlayerEntityCore target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Playback mode that plays the media in a loop.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="repeat">Repeat mode to set.</param>
    public static void RepeatSet(this IEnumerable<IMediaPlayerEntityCore> target, object repeat)
    {
        target.CallService("repeat_set", new MediaPlayerRepeatSetParameters { Repeat = repeat });
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSoundModeParameters data)
    {
        target.CallService("select_sound_mode", data);
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IMediaPlayerEntityCore target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Selects a specific sound mode.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="soundMode">Name of the sound mode to switch to. eg: Music</param>
    public static void SelectSoundMode(this IEnumerable<IMediaPlayerEntityCore> target, string? soundMode = null)
    {
        target.CallService("select_sound_mode", new MediaPlayerSelectSoundModeParameters { SoundMode = soundMode });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IMediaPlayerEntityCore target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerSelectSourceParameters data)
    {
        target.CallService("select_source", data);
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IMediaPlayerEntityCore target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Sends the media player the command to change input source.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="source">Name of the source to switch to. Platform dependent. eg: video1</param>
    public static void SelectSource(this IEnumerable<IMediaPlayerEntityCore> target, string source)
    {
        target.CallService("select_source", new MediaPlayerSelectSourceParameters { Source = source });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerShuffleSetParameters data)
    {
        target.CallService("shuffle_set", data);
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IMediaPlayerEntityCore target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Playback mode that selects the media in randomized order.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="shuffle">Whether or not shuffle mode is enabled.</param>
    public static void ShuffleSet(this IEnumerable<IMediaPlayerEntityCore> target, bool shuffle)
    {
        target.CallService("shuffle_set", new MediaPlayerShuffleSetParameters { Shuffle = shuffle });
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IMediaPlayerEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a media player on/off.</summary>
    public static void Toggle(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns off the power of the media player.</summary>
    public static void TurnOff(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IMediaPlayerEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns on the power of the media player.</summary>
    public static void TurnOn(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IMediaPlayerEntityCore target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Removes the player from a group. Only works on platforms which support player groups.</summary>
    public static void Unjoin(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("unjoin");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Turns down the volume.</summary>
    public static void VolumeDown(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_down");
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IMediaPlayerEntityCore target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeMuteParameters data)
    {
        target.CallService("volume_mute", data);
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IMediaPlayerEntityCore target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Mutes or unmutes the media player.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="isVolumeMuted">Defines whether or not it is muted.</param>
    public static void VolumeMute(this IEnumerable<IMediaPlayerEntityCore> target, bool isVolumeMuted)
    {
        target.CallService("volume_mute", new MediaPlayerVolumeMuteParameters { IsVolumeMuted = isVolumeMuted });
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IMediaPlayerEntityCore target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, MediaPlayerVolumeSetParameters data)
    {
        target.CallService("volume_set", data);
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IMediaPlayerEntityCore target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Sets the volume level.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="volumeLevel">The volume. 0 is inaudible, 1 is the maximum volume.</param>
    public static void VolumeSet(this IEnumerable<IMediaPlayerEntityCore> target, double volumeLevel)
    {
        target.CallService("volume_set", new MediaPlayerVolumeSetParameters { VolumeLevel = volumeLevel });
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IMediaPlayerEntityCore target)
    {
        target.CallService("volume_up");
    }

    ///<summary>Turns up the volume.</summary>
    public static void VolumeUp(this IEnumerable<IMediaPlayerEntityCore> target)
    {
        target.CallService("volume_up");
    }
}

public static class NumberEntityExtensionMethods
{
    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this INumberEntityCore target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, NumberSetValueParameters data)
    {
        target.CallService("set_value", data);
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The INumberEntityCore to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this INumberEntityCore target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }

    ///<summary>Sets the value of a number.</summary>
    ///<param name="target">The IEnumerable&lt;INumberEntityCore&gt; to call this service for</param>
    ///<param name="value">The target value to set. eg: 42</param>
    public static void SetValue(this IEnumerable<INumberEntityCore> target, string? value = null)
    {
        target.CallService("set_value", new NumberSetValueParameters { Value = value });
    }
}

public static class RemoteEntityExtensionMethods
{
    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IRemoteEntityCore target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, RemoteDeleteCommandParameters data)
    {
        target.CallService("delete_command", data);
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IRemoteEntityCore target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Deletes a command or a list of commands from the database.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device from which commands will be deleted. eg: television</param>
    ///<param name="command">The single command or the list of commands to be deleted. eg: Mute</param>
    public static void DeleteCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null)
    {
        target.CallService("delete_command", new RemoteDeleteCommandParameters { Device = device, Command = command });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IRemoteEntityCore target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, RemoteLearnCommandParameters data)
    {
        target.CallService("learn_command", data);
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IRemoteEntityCore target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Learns a command or a list of commands from a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to learn command from. eg: television</param>
    ///<param name="command">A single command or a list of commands to learn. eg: Turn on</param>
    ///<param name="commandType">The type of command to be learned.</param>
    ///<param name="alternative">If code must be stored as an alternative. This is useful for discrete codes. Discrete codes are used for toggles that only perform one function. For example, a code to only turn a device on. If it is on already, sending the code won&apos;t change the state.</param>
    ///<param name="timeout">Timeout for the command to be learned.</param>
    public static void LearnCommand(this IEnumerable<IRemoteEntityCore> target, string? device = null, object? command = null, object? commandType = null, bool? alternative = null, long? timeout = null)
    {
        target.CallService("learn_command", new RemoteLearnCommandParameters { Device = device, Command = command, CommandType = commandType, Alternative = alternative, Timeout = timeout });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IRemoteEntityCore target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, RemoteSendCommandParameters data)
    {
        target.CallService("send_command", data);
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IRemoteEntityCore target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Sends a command or a list of commands to a device.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="device">Device ID to send command to. eg: 32756745</param>
    ///<param name="command">A single command or a list of commands to send. eg: Play</param>
    ///<param name="numRepeats">The number of times you want to repeat the commands.</param>
    ///<param name="delaySecs">The time you want to wait in between repeated commands.</param>
    ///<param name="holdSecs">The time you want to have it held before the release is send.</param>
    public static void SendCommand(this IEnumerable<IRemoteEntityCore> target, object command, string? device = null, long? numRepeats = null, double? delaySecs = null, double? holdSecs = null)
    {
        target.CallService("send_command", new RemoteSendCommandParameters { Device = device, Command = command, NumRepeats = numRepeats, DelaySecs = delaySecs, HoldSecs = holdSecs });
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IRemoteEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a device on/off.</summary>
    public static void Toggle(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IRemoteEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns the device off.</summary>
    public static void TurnOff(this IEnumerable<IRemoteEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IRemoteEntityCore target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, RemoteTurnOnParameters data)
    {
        target.CallService("turn_on", data);
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IRemoteEntityCore to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IRemoteEntityCore target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }

    ///<summary>Sends the power on command.</summary>
    ///<param name="target">The IEnumerable&lt;IRemoteEntityCore&gt; to call this service for</param>
    ///<param name="activity">Activity ID or activity name to be started. eg: BedroomTV</param>
    public static void TurnOn(this IEnumerable<IRemoteEntityCore> target, string? activity = null)
    {
        target.CallService("turn_on", new RemoteTurnOnParameters { Activity = activity });
    }
}

public static class RokuEntityExtensionMethods
{
    ///<summary>Emulates opening the search screen and entering the search keyword.</summary>
    public static void Search(this IMediaPlayerEntityCore target, RokuSearchParameters data)
    {
        target.CallService("search", data);
    }

    ///<summary>Emulates opening the search screen and entering the search keyword.</summary>
    public static void Search(this IEnumerable<IMediaPlayerEntityCore> target, RokuSearchParameters data)
    {
        target.CallService("search", data);
    }

    ///<summary>Emulates opening the search screen and entering the search keyword.</summary>
    ///<param name="target">The IMediaPlayerEntityCore to call this service for</param>
    ///<param name="keyword">The keyword to search for. eg: Space Jam</param>
    public static void Search(this IMediaPlayerEntityCore target, string keyword)
    {
        target.CallService("search", new RokuSearchParameters { Keyword = keyword });
    }

    ///<summary>Emulates opening the search screen and entering the search keyword.</summary>
    ///<param name="target">The IEnumerable&lt;IMediaPlayerEntityCore&gt; to call this service for</param>
    ///<param name="keyword">The keyword to search for. eg: Space Jam</param>
    public static void Search(this IEnumerable<IMediaPlayerEntityCore> target, string keyword)
    {
        target.CallService("search", new RokuSearchParameters { Keyword = keyword });
    }
}

public static class ScriptEntityExtensionMethods
{
    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IScriptEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggle a script. Starts it, if isn&apos;t running, stops it otherwise.</summary>
    public static void Toggle(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IScriptEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Stops a running script.</summary>
    public static void TurnOff(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IScriptEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Runs the sequence of actions defined in a script.</summary>
    public static void TurnOn(this IEnumerable<IScriptEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class SelectEntityExtensionMethods
{
    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this ISelectEntityCore target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the first option.</summary>
    public static void SelectFirst(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_first");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this ISelectEntityCore target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the last option.</summary>
    public static void SelectLast(this IEnumerable<ISelectEntityCore> target)
    {
        target.CallService("select_last");
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this ISelectEntityCore target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, SelectSelectNextParameters data)
    {
        target.CallService("select_next", data);
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects the next option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the last to the first.</param>
    public static void SelectNext(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_next", new SelectSelectNextParameters { Cycle = cycle });
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this ISelectEntityCore target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, SelectSelectOptionParameters data)
    {
        target.CallService("select_option", data);
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this ISelectEntityCore target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects an option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="option">Option to be selected. eg: &quot;Item A&quot;</param>
    public static void SelectOption(this IEnumerable<ISelectEntityCore> target, string option)
    {
        target.CallService("select_option", new SelectSelectOptionParameters { Option = option });
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this ISelectEntityCore target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, SelectSelectPreviousParameters data)
    {
        target.CallService("select_previous", data);
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The ISelectEntityCore to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this ISelectEntityCore target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }

    ///<summary>Selects the previous option.</summary>
    ///<param name="target">The IEnumerable&lt;ISelectEntityCore&gt; to call this service for</param>
    ///<param name="cycle">If the option should cycle from the first to the last.</param>
    public static void SelectPrevious(this IEnumerable<ISelectEntityCore> target, bool? cycle = null)
    {
        target.CallService("select_previous", new SelectSelectPreviousParameters { Cycle = cycle });
    }
}

public static class SwitchEntityExtensionMethods
{
    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this ISwitchEntityCore target)
    {
        target.CallService("toggle");
    }

    ///<summary>Toggles a switch on/off.</summary>
    public static void Toggle(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("toggle");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this ISwitchEntityCore target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch off.</summary>
    public static void TurnOff(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this ISwitchEntityCore target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns a switch on.</summary>
    public static void TurnOn(this IEnumerable<ISwitchEntityCore> target)
    {
        target.CallService("turn_on");
    }
}

public static class TodoEntityExtensionMethods
{
    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this TodoEntity target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    public static void AddItem(this IEnumerable<TodoEntity> target, TodoAddItemParameters data)
    {
        target.CallService("add_item", data);
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    public static void AddItem(this TodoEntity target, string item)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item });
    }

    ///<summary>Add a new to-do list item.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name that represents the to-do item. eg: Submit income tax return</param>
    public static void AddItem(this IEnumerable<TodoEntity> target, string item)
    {
        target.CallService("add_item", new TodoAddItemParameters { Item = item });
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this TodoEntity target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, TodoRemoveItemParameters data)
    {
        target.CallService("remove_item", data);
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list items.</param>
    public static void RemoveItem(this TodoEntity target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Remove an existing to-do list item by its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list items.</param>
    public static void RemoveItem(this IEnumerable<TodoEntity> target, string item)
    {
        target.CallService("remove_item", new TodoRemoveItemParameters { Item = item });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this TodoEntity target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, TodoUpdateItemParameters data)
    {
        target.CallService("update_item", data);
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The TodoEntity to call this service for</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    public static void UpdateItem(this TodoEntity target, string item, string? rename = null, object? status = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status });
    }

    ///<summary>Update an existing to-do list item based on its name.</summary>
    ///<param name="target">The IEnumerable&lt;TodoEntity&gt; to call this service for</param>
    ///<param name="item">The name for the to-do list item. eg: Submit income tax return</param>
    ///<param name="rename">The new name of the to-do item eg: Something else</param>
    ///<param name="status">A status or confirmation of the to-do item. eg: needs_action</param>
    public static void UpdateItem(this IEnumerable<TodoEntity> target, string item, string? rename = null, object? status = null)
    {
        target.CallService("update_item", new TodoUpdateItemParameters { Item = item, Rename = rename, Status = status });
    }
}

public static class TtsEntityExtensionMethods
{
    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this TtsEntity target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    public static void Speak(this IEnumerable<TtsEntity> target, TtsSpeakParameters data)
    {
        target.CallService("speak", data);
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The TtsEntity to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this TtsEntity target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }

    ///<summary>Speaks something using text-to-speech on a media player.</summary>
    ///<param name="target">The IEnumerable&lt;TtsEntity&gt; to call this service for</param>
    ///<param name="mediaPlayerEntityId">Media players to play the message.</param>
    ///<param name="message">The text you want to convert into speech so that you can listen to it on your device. eg: My name is hanna</param>
    ///<param name="cache">Stores this message locally so that when the text is requested again, the output can be produced more quickly.</param>
    ///<param name="language">Language to use for speech generation. eg: ru</param>
    ///<param name="options">A dictionary containing integration-specific options. eg: platform specific</param>
    public static void Speak(this IEnumerable<TtsEntity> target, string mediaPlayerEntityId, string message, bool? cache = null, string? language = null, object? options = null)
    {
        target.CallService("speak", new TtsSpeakParameters { MediaPlayerEntityId = mediaPlayerEntityId, Message = message, Cache = cache, Language = language, Options = options });
    }
}

public static class UpdateEntityExtensionMethods
{
    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IUpdateEntityCore target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Removes the skipped version marker from an update.</summary>
    public static void ClearSkipped(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("clear_skipped");
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IUpdateEntityCore target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, UpdateInstallParameters data)
    {
        target.CallService("install", data);
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IUpdateEntityCore to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IUpdateEntityCore target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Installs an update for this device or service.</summary>
    ///<param name="target">The IEnumerable&lt;IUpdateEntityCore&gt; to call this service for</param>
    ///<param name="version">The version to install. If omitted, the latest version will be installed. eg: 1.0.0</param>
    ///<param name="backup">If supported by the integration, this creates a backup before starting the update .</param>
    public static void Install(this IEnumerable<IUpdateEntityCore> target, string? version = null, bool? backup = null)
    {
        target.CallService("install", new UpdateInstallParameters { Version = version, Backup = backup });
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IUpdateEntityCore target)
    {
        target.CallService("skip");
    }

    ///<summary>Marks currently available update as skipped.</summary>
    public static void Skip(this IEnumerable<IUpdateEntityCore> target)
    {
        target.CallService("skip");
    }
}

public static class WaterHeaterEntityExtensionMethods
{
    ///<summary>Turns away mode on/off.</summary>
    public static void SetAwayMode(this WaterHeaterEntity target, WaterHeaterSetAwayModeParameters data)
    {
        target.CallService("set_away_mode", data);
    }

    ///<summary>Turns away mode on/off.</summary>
    public static void SetAwayMode(this IEnumerable<WaterHeaterEntity> target, WaterHeaterSetAwayModeParameters data)
    {
        target.CallService("set_away_mode", data);
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="awayMode">New value of away mode.</param>
    public static void SetAwayMode(this WaterHeaterEntity target, bool awayMode)
    {
        target.CallService("set_away_mode", new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Turns away mode on/off.</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="awayMode">New value of away mode.</param>
    public static void SetAwayMode(this IEnumerable<WaterHeaterEntity> target, bool awayMode)
    {
        target.CallService("set_away_mode", new WaterHeaterSetAwayModeParameters { AwayMode = awayMode });
    }

    ///<summary>Sets the operation mode.</summary>
    public static void SetOperationMode(this WaterHeaterEntity target, WaterHeaterSetOperationModeParameters data)
    {
        target.CallService("set_operation_mode", data);
    }

    ///<summary>Sets the operation mode.</summary>
    public static void SetOperationMode(this IEnumerable<WaterHeaterEntity> target, WaterHeaterSetOperationModeParameters data)
    {
        target.CallService("set_operation_mode", data);
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetOperationMode(this WaterHeaterEntity target, string operationMode)
    {
        target.CallService("set_operation_mode", new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the operation mode.</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetOperationMode(this IEnumerable<WaterHeaterEntity> target, string operationMode)
    {
        target.CallService("set_operation_mode", new WaterHeaterSetOperationModeParameters { OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    public static void SetTemperature(this WaterHeaterEntity target, WaterHeaterSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the target temperature.</summary>
    public static void SetTemperature(this IEnumerable<WaterHeaterEntity> target, WaterHeaterSetTemperatureParameters data)
    {
        target.CallService("set_temperature", data);
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The WaterHeaterEntity to call this service for</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetTemperature(this WaterHeaterEntity target, double temperature, string? operationMode = null)
    {
        target.CallService("set_temperature", new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Sets the target temperature.</summary>
    ///<param name="target">The IEnumerable&lt;WaterHeaterEntity&gt; to call this service for</param>
    ///<param name="temperature">New target temperature for the water heater.</param>
    ///<param name="operationMode">New value of the operation mode. For a list of possible modes, refer to the integration documentation. eg: eco</param>
    public static void SetTemperature(this IEnumerable<WaterHeaterEntity> target, double temperature, string? operationMode = null)
    {
        target.CallService("set_temperature", new WaterHeaterSetTemperatureParameters { Temperature = temperature, OperationMode = operationMode });
    }

    ///<summary>Turns water heater off.</summary>
    public static void TurnOff(this WaterHeaterEntity target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns water heater off.</summary>
    public static void TurnOff(this IEnumerable<WaterHeaterEntity> target)
    {
        target.CallService("turn_off");
    }

    ///<summary>Turns water heater on.</summary>
    public static void TurnOn(this WaterHeaterEntity target)
    {
        target.CallService("turn_on");
    }

    ///<summary>Turns water heater on.</summary>
    public static void TurnOn(this IEnumerable<WaterHeaterEntity> target)
    {
        target.CallService("turn_on");
    }
}

public static class WeatherEntityExtensionMethods
{
    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IWeatherEntityCore target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, WeatherGetForecastParameters data)
    {
        target.CallService("get_forecast", data);
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IWeatherEntityCore to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IWeatherEntityCore target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }

    ///<summary>Get weather forecast.</summary>
    ///<param name="target">The IEnumerable&lt;IWeatherEntityCore&gt; to call this service for</param>
    ///<param name="type">Forecast type: daily, hourly or twice daily.</param>
    public static void GetForecast(this IEnumerable<IWeatherEntityCore> target, object @type)
    {
        target.CallService("get_forecast", new WeatherGetForecastParameters { Type = @type });
    }
}

public static class ZhaEntityExtensionMethods
{
    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUserCode(this ILockEntityCore target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    public static void ClearLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaClearLockUserCodeParameters data)
    {
        target.CallService("clear_lock_user_code", data);
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Clears a user code from a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to clear code from. eg: 1</param>
    public static void ClearLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("clear_lock_user_code", new ZhaClearLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    public static void DisableLockUserCode(this ILockEntityCore target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    public static void DisableLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaDisableLockUserCodeParameters data)
    {
        target.CallService("disable_lock_user_code", data);
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public static void DisableLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Disables a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to disable. eg: 1</param>
    public static void DisableLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("disable_lock_user_code", new ZhaDisableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    public static void EnableLockUserCode(this ILockEntityCore target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    public static void EnableLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaEnableLockUserCodeParameters data)
    {
        target.CallService("enable_lock_user_code", data);
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public static void EnableLockUserCode(this ILockEntityCore target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Enables a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to enable. eg: 1</param>
    public static void EnableLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot)
    {
        target.CallService("enable_lock_user_code", new ZhaEnableLockUserCodeParameters { CodeSlot = codeSlot });
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUserCode(this ILockEntityCore target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    public static void SetLockUserCode(this IEnumerable<ILockEntityCore> target, ZhaSetLockUserCodeParameters data)
    {
        target.CallService("set_lock_user_code", data);
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The ILockEntityCore to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public static void SetLockUserCode(this ILockEntityCore target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }

    ///<summary>Sets a user code on a lock.</summary>
    ///<param name="target">The IEnumerable&lt;ILockEntityCore&gt; to call this service for</param>
    ///<param name="codeSlot">Code slot to set the code in. eg: 1</param>
    ///<param name="userCode">Code to set. eg: 1234</param>
    public static void SetLockUserCode(this IEnumerable<ILockEntityCore> target, string codeSlot, string userCode)
    {
        target.CallService("set_lock_user_code", new ZhaSetLockUserCodeParameters { CodeSlot = codeSlot, UserCode = userCode });
    }
}

public static class ZwaveJsEntityExtensionMethods
{
    ///<summary>Resets the meters on a node.</summary>
    public static void ResetMeter(this ISensorEntityCore target, ZwaveJsResetMeterParameters data)
    {
        target.CallService("reset_meter", data);
    }

    ///<summary>Resets the meters on a node.</summary>
    public static void ResetMeter(this IEnumerable<ISensorEntityCore> target, ZwaveJsResetMeterParameters data)
    {
        target.CallService("reset_meter", data);
    }

    ///<summary>Resets the meters on a node.</summary>
    ///<param name="target">The ISensorEntityCore to call this service for</param>
    ///<param name="meterType">The type of meter to reset. Not all meters support the ability to pick a meter type to reset. eg: 1</param>
    ///<param name="value">The value that meters should be reset to. Not all meters support the ability to be reset to a specific value. eg: 5</param>
    public static void ResetMeter(this ISensorEntityCore target, string? meterType = null, string? value = null)
    {
        target.CallService("reset_meter", new ZwaveJsResetMeterParameters { MeterType = meterType, Value = value });
    }

    ///<summary>Resets the meters on a node.</summary>
    ///<param name="target">The IEnumerable&lt;ISensorEntityCore&gt; to call this service for</param>
    ///<param name="meterType">The type of meter to reset. Not all meters support the ability to pick a meter type to reset. eg: 1</param>
    ///<param name="value">The value that meters should be reset to. Not all meters support the ability to be reset to a specific value. eg: 5</param>
    public static void ResetMeter(this IEnumerable<ISensorEntityCore> target, string? meterType = null, string? value = null)
    {
        target.CallService("reset_meter", new ZwaveJsResetMeterParameters { MeterType = meterType, Value = value });
    }
}